{
  "nodes": {
    "SitePage /dev-404-page/": {
      "layout": "index",
      "jsonName": "dev-404-page.json",
      "internalComponentName": "ComponentDev404Page",
      "path": "/dev-404-page/",
      "component": "/home/ryan/dev/notes/gatsby/.cache/dev-404-page.js",
      "componentChunkName": "component---cache-dev-404-page-js",
      "context": {},
      "pluginCreator___NODE": "Plugin dev-404-page",
      "pluginCreatorId": "Plugin dev-404-page",
      "componentPath": "/home/ryan/dev/notes/gatsby/.cache/dev-404-page.js",
      "id": "SitePage /dev-404-page/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "79c273befb2a66b5264bb2b0f7d3be6b",
        "description": "Plugin dev-404-page",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin dev-404-page": {
      "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby/dist/internal-plugins/dev-404-page",
      "id": "Plugin dev-404-page",
      "name": "dev-404-page",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "createPagesStatefully"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby/dist/internal-plugins/dev-404-page",
      "packageJson": {
        "name": "dev-404-page",
        "description": "Internal plugin to add a 404 page in development with helpful information",
        "version": "1.0.0",
        "main": "index.js",
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "e3978f8a2dee07093a5234fabc3c1971",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin component-page-creator": {
      "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby/dist/internal-plugins/component-page-creator",
      "id": "Plugin component-page-creator",
      "name": "component-page-creator",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "createPagesStatefully"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby/dist/internal-plugins/component-page-creator",
      "packageJson": {
        "name": "component-page-creator",
        "description": "An internal Gatsby plugin that creates pages from component files in src/pages",
        "version": "1.0.0",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "f5ed0af16f50b73283142117b08bda56",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin component-layout-creator": {
      "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby/dist/internal-plugins/component-layout-creator",
      "id": "Plugin component-layout-creator",
      "name": "component-layout-creator",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "createLayouts"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby/dist/internal-plugins/component-layout-creator",
      "packageJson": {
        "name": "component-layout-creator",
        "description": "An internal Gatsby plugin that creates pages from component files in src/layouts",
        "version": "1.0.0",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin"
        ],
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "e45cbe9709fa79b661f2e06ba7f68ac7",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin internal-data-bridge": {
      "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby/dist/internal-plugins/internal-data-bridge",
      "id": "Plugin internal-data-bridge",
      "name": "internal-data-bridge",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "sourceNodes",
        "onCreatePage"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby/dist/internal-plugins/internal-data-bridge",
      "packageJson": {
        "name": "internal-data-bridge",
        "description": "An internal Gatsby plugin which creates data nodes from internal data",
        "version": "1.0.0",
        "main": "index.js",
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "af6236cdd04c60c101102e4653351a79",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin prod-404": {
      "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby/dist/internal-plugins/prod-404",
      "id": "Plugin prod-404",
      "name": "prod-404",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "onCreatePage"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby/dist/internal-plugins/prod-404",
      "packageJson": {
        "name": "prod-404",
        "description": "Internal plugin to detect various flavors of 404 pages and ensure there's a 404.html path created as well to ensure compatability with static hosts",
        "version": "1.0.0",
        "main": "index.js",
        "author": "Kyle Mathews <mathews.kyle@gmail.com>",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "792d43cae12b570dc12437ae8469e8c2",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin query-runner": {
      "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby/dist/internal-plugins/query-runner",
      "id": "Plugin query-runner",
      "name": "query-runner",
      "version": "1.0.0",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "onCreatePage",
        "onCreateLayout"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby/dist/internal-plugins/query-runner",
      "packageJson": {
        "name": "query-runner",
        "description": "Internal plugin for running queries",
        "version": "1.0.0",
        "main": "index.js",
        "author": "",
        "license": "MIT",
        "dependencies": [],
        "devDependencies": [],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "912c0b2e21b743dadac0be8a764aacee",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-source-filesystem": {
      "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-source-filesystem",
      "id": "Plugin gatsby-source-filesystem",
      "name": "gatsby-source-filesystem",
      "version": "1.5.38",
      "pluginOptions": {
        "plugins": [],
        "path": "/home/ryan/dev/notes/gatsby/src/pages",
        "name": "pages"
      },
      "nodeAPIs": [
        "sourceNodes",
        "setFieldsOnGraphQLNodeType"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-source-filesystem",
      "packageJson": {
        "name": "gatsby-source-filesystem",
        "description": "Gatsby plugin which parses files within a directory for further parsing by other plugins",
        "version": "1.5.38",
        "keywords": [
          "gatsby",
          "gatsby-plugin"
        ],
        "author": {
          "name": "Kyle Mathews",
          "email": "mathews.kyle@gmail.com"
        },
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "better-queue",
            "version": "^3.8.7"
          },
          {
            "name": "bluebird",
            "version": "^3.5.0"
          },
          {
            "name": "chokidar",
            "version": "^1.7.0"
          },
          {
            "name": "fs-extra",
            "version": "^4.0.1"
          },
          {
            "name": "got",
            "version": "^7.1.0"
          },
          {
            "name": "md5-file",
            "version": "^3.1.1"
          },
          {
            "name": "mime",
            "version": "^1.3.6"
          },
          {
            "name": "pretty-bytes",
            "version": "^4.0.2"
          },
          {
            "name": "slash",
            "version": "^1.0.0"
          },
          {
            "name": "valid-url",
            "version": "^1.0.9"
          }
        ],
        "devDependencies": [
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^1.9.250"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "869e6612451c92f816ddea5aaaf7d8af",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-transformer-sharp": {
      "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-transformer-sharp",
      "id": "Plugin gatsby-transformer-sharp",
      "name": "gatsby-transformer-sharp",
      "version": "1.6.26",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "onCreateNode",
        "setFieldsOnGraphQLNodeType",
        "onPreExtractQueries"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-transformer-sharp",
      "packageJson": {
        "name": "gatsby-transformer-sharp",
        "description": "Gatsby transformer plugin for images using Sharp",
        "version": "1.6.26",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "image",
          "sharp"
        ],
        "author": {
          "name": "Kyle Mathews",
          "email": "mathews.kyle@gmail.com"
        },
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "bluebird",
            "version": "^3.5.0"
          },
          {
            "name": "fs-extra",
            "version": "^4.0.2"
          },
          {
            "name": "probe-image-size",
            "version": "^4.0.0"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "628939d402cb2e03e830b521745d9f83",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-transformer-remark": {
      "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-transformer-remark",
      "id": "Plugin gatsby-transformer-remark",
      "name": "gatsby-transformer-remark",
      "version": "1.7.42",
      "pluginOptions": {
        "plugins": [
          {
            "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-images",
            "id": "Plugin gatsby-remark-images",
            "name": "gatsby-remark-images",
            "version": "1.5.66",
            "pluginOptions": {
              "plugins": [],
              "maxWidth": 740,
              "wrapperStyle": "",
              "backgroundColor": "white",
              "linkImagesToOriginal": true,
              "showCaptions": false,
              "pathPrefix": ""
            },
            "nodeAPIs": [],
            "browserAPIs": [],
            "ssrAPIs": [],
            "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-images"
          },
          {
            "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-responsive-iframe",
            "id": "Plugin gatsby-remark-responsive-iframe",
            "name": "gatsby-remark-responsive-iframe",
            "version": "1.4.19",
            "pluginOptions": {
              "plugins": [],
              "wrapperStyle": "margin-bottom: 1.0725rem"
            },
            "nodeAPIs": [],
            "browserAPIs": [],
            "ssrAPIs": [],
            "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-responsive-iframe"
          },
          {
            "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-copy-linked-files",
            "id": "Plugin gatsby-remark-copy-linked-files",
            "name": "gatsby-remark-copy-linked-files",
            "version": "1.5.35",
            "pluginOptions": {
              "plugins": [],
              "ignoreFileExtensions": [
                "png",
                "jpg",
                "jpeg",
                "bmp",
                "tiff"
              ]
            },
            "nodeAPIs": [],
            "browserAPIs": [],
            "ssrAPIs": [],
            "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-copy-linked-files"
          },
          {
            "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-smartypants",
            "id": "Plugin gatsby-remark-smartypants",
            "name": "gatsby-remark-smartypants",
            "version": "1.4.12",
            "pluginOptions": {
              "plugins": [],
              "dashes": "oldschool"
            },
            "nodeAPIs": [],
            "browserAPIs": [],
            "ssrAPIs": [],
            "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-smartypants"
          },
          {
            "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-prismjs",
            "id": "Plugin gatsby-remark-prismjs",
            "name": "gatsby-remark-prismjs",
            "version": "2.0.3",
            "pluginOptions": {
              "plugins": []
            },
            "nodeAPIs": [],
            "browserAPIs": [],
            "ssrAPIs": [],
            "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-prismjs"
          },
          {
            "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-autolink-headers",
            "id": "Plugin gatsby-remark-autolink-headers",
            "name": "gatsby-remark-autolink-headers",
            "version": "1.4.18",
            "pluginOptions": {
              "plugins": []
            },
            "nodeAPIs": [],
            "browserAPIs": [
              "onClientEntry",
              "onRouteUpdate"
            ],
            "ssrAPIs": [
              "onRenderBody"
            ],
            "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-autolink-headers"
          },
          {
            "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-katex",
            "id": "Plugin gatsby-remark-katex",
            "name": "gatsby-remark-katex",
            "version": "1.0.14",
            "pluginOptions": {
              "plugins": []
            },
            "nodeAPIs": [],
            "browserAPIs": [],
            "ssrAPIs": [],
            "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-katex"
          }
        ],
        "excerpt_separator": "<!-- end -->"
      },
      "nodeAPIs": [
        "onCreateNode",
        "setFieldsOnGraphQLNodeType"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-transformer-remark",
      "packageJson": {
        "name": "gatsby-transformer-remark",
        "description": "Gatsby transformer plugin for Markdown using the Remark library and ecosystem",
        "version": "1.7.42",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "markdown",
          "remark"
        ],
        "author": {
          "name": "Kyle Mathews",
          "email": "mathews.kyle@gmail.com"
        },
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "bluebird",
            "version": "^3.5.0"
          },
          {
            "name": "graphql-type-json",
            "version": "^0.1.4"
          },
          {
            "name": "gray-matter",
            "version": "^3.0.0"
          },
          {
            "name": "hast-util-raw",
            "version": "^2.0.2"
          },
          {
            "name": "hast-util-to-html",
            "version": "^3.0.0"
          },
          {
            "name": "lodash",
            "version": "^4.17.4"
          },
          {
            "name": "mdast-util-to-hast",
            "version": "^2.4.0"
          },
          {
            "name": "mdast-util-toc",
            "version": "^2.0.1"
          },
          {
            "name": "remark",
            "version": "^7.0.1"
          },
          {
            "name": "remark-parse",
            "version": "^4.0.0"
          },
          {
            "name": "remark-retext",
            "version": "^3.1.0"
          },
          {
            "name": "remark-stringify",
            "version": "^4.0.0"
          },
          {
            "name": "retext-english",
            "version": "^3.0.0"
          },
          {
            "name": "sanitize-html",
            "version": "^1.14.1"
          },
          {
            "name": "underscore.string",
            "version": "^3.3.4"
          },
          {
            "name": "unified",
            "version": "^6.1.5"
          },
          {
            "name": "unist-util-remove-position",
            "version": "^1.1.1"
          },
          {
            "name": "unist-util-select",
            "version": "^1.5.0"
          },
          {
            "name": "unist-util-visit",
            "version": "^1.1.1"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "babel-plugin-transform-object-rest-spread",
            "version": "^6.20.2"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "e922c4a55cfe43cfb82e6376374e01c9",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-remark-images": {
      "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-images",
      "id": "Plugin gatsby-remark-images",
      "name": "gatsby-remark-images",
      "version": "1.5.66",
      "pluginOptions": {
        "plugins": [],
        "maxWidth": 740,
        "wrapperStyle": "",
        "backgroundColor": "white",
        "linkImagesToOriginal": true,
        "showCaptions": false,
        "pathPrefix": ""
      },
      "nodeAPIs": [],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-images",
      "packageJson": {
        "name": "gatsby-remark-images",
        "description": "Processes images in markdown so they can be used in the production build.",
        "version": "1.5.66",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "image",
          "markdown",
          "remark",
          "responsive images"
        ],
        "author": {
          "name": "Kyle Mathews",
          "email": "mathews.kyle@gmail.com"
        },
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "cheerio",
            "version": "^1.0.0-rc.2"
          },
          {
            "name": "gatsby-plugin-sharp",
            "version": "^1.6.47"
          },
          {
            "name": "is-relative-url",
            "version": "^2.0.0"
          },
          {
            "name": "lodash",
            "version": "^4.17.4"
          },
          {
            "name": "slash",
            "version": "^1.0.0"
          },
          {
            "name": "unist-util-select",
            "version": "^1.5.0"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "874d9ed131ab1b90a79731074d06f783",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-remark-responsive-iframe": {
      "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-responsive-iframe",
      "id": "Plugin gatsby-remark-responsive-iframe",
      "name": "gatsby-remark-responsive-iframe",
      "version": "1.4.19",
      "pluginOptions": {
        "plugins": [],
        "wrapperStyle": "margin-bottom: 1.0725rem"
      },
      "nodeAPIs": [],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-responsive-iframe",
      "packageJson": {
        "name": "gatsby-remark-responsive-iframe",
        "description": "Make iframes in Markdown processed by Remark responsive",
        "version": "1.4.19",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "remark"
        ],
        "author": {
          "name": "Kyle Mathews",
          "email": "mathews.kyle@gmail.com"
        },
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "bluebird",
            "version": "^3.5.0"
          },
          {
            "name": "cheerio",
            "version": "^1.0.0-rc.2"
          },
          {
            "name": "lodash",
            "version": "^4.17.4"
          },
          {
            "name": "unist-util-visit",
            "version": "^1.1.1"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          },
          {
            "name": "remark",
            "version": "^7.0.0"
          },
          {
            "name": "unist-util-find",
            "version": "^1.0.1"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "2c83dac29a0de4d2a84ba115c8442e9b",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-remark-copy-linked-files": {
      "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-copy-linked-files",
      "id": "Plugin gatsby-remark-copy-linked-files",
      "name": "gatsby-remark-copy-linked-files",
      "version": "1.5.35",
      "pluginOptions": {
        "plugins": [],
        "ignoreFileExtensions": [
          "png",
          "jpg",
          "jpeg",
          "bmp",
          "tiff"
        ]
      },
      "nodeAPIs": [],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-copy-linked-files",
      "packageJson": {
        "name": "gatsby-remark-copy-linked-files",
        "description": "Find files which are linked to from markdown and copy them to the public directory",
        "version": "1.5.35",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "prismjs",
          "remark"
        ],
        "author": {
          "name": "Kyle Mathews",
          "email": "mathews.kyle@gmail.com"
        },
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "cheerio",
            "version": "^1.0.0-rc.2"
          },
          {
            "name": "fs-extra",
            "version": "^4.0.1"
          },
          {
            "name": "is-relative-url",
            "version": "^2.0.0"
          },
          {
            "name": "lodash",
            "version": "^4.17.4"
          },
          {
            "name": "path-is-inside",
            "version": "^1.0.2"
          },
          {
            "name": "probe-image-size",
            "version": "^4.0.0"
          },
          {
            "name": "unist-util-visit",
            "version": "^1.1.1"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "c0ede767e66756bf705470916b1dd36a",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-remark-smartypants": {
      "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-smartypants",
      "id": "Plugin gatsby-remark-smartypants",
      "name": "gatsby-remark-smartypants",
      "version": "1.4.12",
      "pluginOptions": {
        "plugins": [],
        "dashes": "oldschool"
      },
      "nodeAPIs": [],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-smartypants",
      "packageJson": {
        "name": "gatsby-remark-smartypants",
        "description": "Use retext-smartypants to auto-enhance typography of markdown",
        "version": "1.4.12",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "smartypants"
        ],
        "author": {
          "name": "Kyle Mathews",
          "email": "mathews.kyle@gmail.com"
        },
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "retext",
            "version": "^4.0.0"
          },
          {
            "name": "retext-smartypants",
            "version": "^2.0.0"
          },
          {
            "name": "unist-util-visit",
            "version": "^1.1.1"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "99bf077f96409671fabfe66000ef6bde",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-remark-prismjs": {
      "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-prismjs",
      "id": "Plugin gatsby-remark-prismjs",
      "name": "gatsby-remark-prismjs",
      "version": "2.0.3",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-prismjs",
      "packageJson": {
        "name": "gatsby-remark-prismjs",
        "description": "Adds syntax highlighting to code blocks at build time using PrismJS",
        "version": "2.0.3",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "prismjs",
          "remark"
        ],
        "author": {
          "name": "Kyle Mathews",
          "email": "mathews.kyle@gmail.com"
        },
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "parse-numeric-range",
            "version": "0.0.2"
          },
          {
            "name": "unist-util-visit",
            "version": "^1.3.0"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "cross-env",
            "version": "^5.1.3"
          },
          {
            "name": "prismjs",
            "version": "^1.13.0"
          },
          {
            "name": "remark",
            "version": "^7.0.1"
          }
        ],
        "peerDependencies": [
          {
            "name": "prismjs",
            "version": "^1.13.0"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "c0496609e4bea796f634c14a76ea6389",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-remark-autolink-headers": {
      "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-autolink-headers",
      "id": "Plugin gatsby-remark-autolink-headers",
      "name": "gatsby-remark-autolink-headers",
      "version": "1.4.18",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [],
      "browserAPIs": [
        "onClientEntry",
        "onRouteUpdate"
      ],
      "ssrAPIs": [
        "onRenderBody"
      ],
      "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-autolink-headers",
      "packageJson": {
        "name": "gatsby-remark-autolink-headers",
        "description": "Gatsby plugin to autolink headers in markdown processed by Remark",
        "version": "1.4.18",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "remark"
        ],
        "author": {
          "name": "Kyle Mathews",
          "email": "mathews.kyle@gmail.com"
        },
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "github-slugger",
            "version": "^1.1.1"
          },
          {
            "name": "mdast-util-to-string",
            "version": "^1.0.2"
          },
          {
            "name": "unist-util-visit",
            "version": "^1.1.1"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "f31f1bb08e25147e0fd49d4bcef5c5ef",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-remark-katex": {
      "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-katex",
      "id": "Plugin gatsby-remark-katex",
      "name": "gatsby-remark-katex",
      "version": "1.0.14",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-remark-katex",
      "packageJson": {
        "name": "gatsby-remark-katex",
        "description": "Transform math nodes to html markup",
        "version": "1.0.14",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "katex",
          "remark"
        ],
        "author": {
          "name": "Jeffrey Xiao",
          "email": "jeffrey.xiao1998@gmail.com"
        },
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "katex",
            "version": "^0.9.0"
          },
          {
            "name": "remark-math",
            "version": "^1.0.3"
          },
          {
            "name": "unist-util-visit",
            "version": "^1.1.1"
          }
        ],
        "devDependencies": [
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "78438304c09abe8adc454b98c86be752",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-transformer-yaml": {
      "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-transformer-yaml",
      "id": "Plugin gatsby-transformer-yaml",
      "name": "gatsby-transformer-yaml",
      "version": "1.5.17",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "onCreateNode"
      ],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-transformer-yaml",
      "packageJson": {
        "name": "gatsby-transformer-yaml",
        "description": "Gatsby transformer plugin for yaml",
        "version": "1.5.17",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "yaml"
        ],
        "author": {
          "name": "Kyle Mathews",
          "email": "mathews.kyle@gmail.com"
        },
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "js-yaml",
            "version": "3.7.0"
          },
          {
            "name": "lodash",
            "version": "^4.17.4"
          },
          {
            "name": "unist-util-select",
            "version": "^1.5.0"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "f849aa31f2064a2bd54e3f0ced1ef17f",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-plugin-sharp": {
      "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-plugin-sharp",
      "id": "Plugin gatsby-plugin-sharp",
      "name": "gatsby-plugin-sharp",
      "version": "1.6.47",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [],
      "browserAPIs": [],
      "ssrAPIs": [],
      "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-plugin-sharp",
      "packageJson": {
        "name": "gatsby-plugin-sharp",
        "description": "Wrapper of the Sharp image manipulation library for Gatsby plugins",
        "version": "1.6.47",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "image",
          "sharp"
        ],
        "author": {
          "name": "Kyle Mathews",
          "email": "mathews.kyle@gmail.com"
        },
        "license": "MIT",
        "dependencies": [
          {
            "name": "async",
            "version": "^2.1.2"
          },
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "bluebird",
            "version": "^3.5.0"
          },
          {
            "name": "imagemin",
            "version": "^5.2.2"
          },
          {
            "name": "imagemin-pngquant",
            "version": "5.0.1"
          },
          {
            "name": "imagemin-webp",
            "version": "^4.0.0"
          },
          {
            "name": "lodash",
            "version": "^4.17.4"
          },
          {
            "name": "mini-svg-data-uri",
            "version": "^1.0.0"
          },
          {
            "name": "potrace",
            "version": "^2.1.1"
          },
          {
            "name": "probe-image-size",
            "version": "^4.0.0"
          },
          {
            "name": "progress",
            "version": "^1.1.8"
          },
          {
            "name": "sharp",
            "version": "^0.20.0"
          },
          {
            "name": "svgo",
            "version": "^0.7.2"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^1.0.0"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "0a3fd80028053edde61e95cbc2479851",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-plugin-catch-links": {
      "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-plugin-catch-links",
      "id": "Plugin gatsby-plugin-catch-links",
      "name": "gatsby-plugin-catch-links",
      "version": "1.0.22",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [],
      "browserAPIs": [
        "onClientEntry"
      ],
      "ssrAPIs": [],
      "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-plugin-catch-links",
      "packageJson": {
        "name": "gatsby-plugin-catch-links",
        "description": "Intercepts local links from markdown and other non-react pages and does a client-side pushState to avoid the browser having to refresh the page.",
        "version": "1.0.22",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin"
        ],
        "author": {
          "name": "Kyle Mathews",
          "email": "mathews.kyle@gmail.com"
        },
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^1.0.0"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "2ad9bbd0255bf7fd0a7d2987d5cea3c1",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin gatsby-plugin-glamor": {
      "resolve": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-plugin-glamor",
      "id": "Plugin gatsby-plugin-glamor",
      "name": "gatsby-plugin-glamor",
      "version": "1.6.13",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "modifyWebpackConfig",
        "modifyBabelrc"
      ],
      "browserAPIs": [
        "onClientEntry"
      ],
      "ssrAPIs": [
        "replaceRenderer"
      ],
      "pluginFilepath": "/home/ryan/dev/notes/gatsby/node_modules/gatsby-plugin-glamor",
      "packageJson": {
        "name": "gatsby-plugin-glamor",
        "description": "Gatsby plugin to add support for Glamor",
        "version": "1.6.13",
        "main": "index.js",
        "keywords": [
          "gatsby",
          "gatsby-plugin",
          "glamor"
        ],
        "author": {
          "name": "Kyle Mathews",
          "email": "mathews.kyle@gmail.com"
        },
        "license": "MIT",
        "dependencies": [
          {
            "name": "babel-runtime",
            "version": "^6.26.0"
          },
          {
            "name": "glamor",
            "version": "^2.20.29"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-cli",
            "version": "^6.26.0"
          },
          {
            "name": "cross-env",
            "version": "^5.0.5"
          }
        ],
        "peerDependencies": [
          {
            "name": "gatsby",
            "version": "^1.0.0"
          }
        ],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "f91a64187b40769404beaa8cc631d836",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Plugin default-site-plugin": {
      "resolve": "/home/ryan/dev/notes/gatsby",
      "id": "Plugin default-site-plugin",
      "name": "default-site-plugin",
      "version": "3f7b1f08ba7d32cc6fb51877ac9caa97",
      "pluginOptions": {
        "plugins": []
      },
      "nodeAPIs": [
        "createPages",
        "onCreateNode",
        "modifyWebpackConfig"
      ],
      "browserAPIs": [
        "onClientEntry"
      ],
      "ssrAPIs": [],
      "pluginFilepath": "/home/ryan/dev/notes/gatsby",
      "packageJson": {
        "name": "gatsby-example-using-remark",
        "description": "Gatsby example site that demonstrates gatsby-transformer-remark and its plugins.",
        "version": "1.0.0",
        "main": "index.js",
        "author": "Florian Kissling <sechskilo@gmail.com>",
        "license": "MIT",
        "dependencies": [
          {
            "name": "bluebird",
            "version": "^3.4.7"
          },
          {
            "name": "es6-object-assign",
            "version": "^1.1.0"
          },
          {
            "name": "lodash",
            "version": "^4.17.4"
          },
          {
            "name": "lodash-id",
            "version": "^0.14.0"
          },
          {
            "name": "prismjs",
            "version": "^1.14.0"
          },
          {
            "name": "react-typography",
            "version": "^0.15.10"
          },
          {
            "name": "rehype-react",
            "version": "^3.0.2"
          },
          {
            "name": "slash",
            "version": "^1.0.0"
          },
          {
            "name": "typeface-space-mono",
            "version": "^0.0.22"
          },
          {
            "name": "typeface-spectral",
            "version": "^0.0.29"
          },
          {
            "name": "typography",
            "version": "^0.15.10"
          }
        ],
        "devDependencies": [
          {
            "name": "babel-plugin-lodash",
            "version": "^3.2.11"
          },
          {
            "name": "babel-preset-env",
            "version": "^1.7.0"
          },
          {
            "name": "gatsby",
            "version": "^1.9.75"
          },
          {
            "name": "gatsby-image",
            "version": "^1.0.5"
          },
          {
            "name": "gatsby-link",
            "version": "^1.6.44"
          },
          {
            "name": "gatsby-plugin-catch-links",
            "version": "^1.0.22"
          },
          {
            "name": "gatsby-plugin-glamor",
            "version": "^1.6.13"
          },
          {
            "name": "gatsby-plugin-sharp",
            "version": "^1.6.47"
          },
          {
            "name": "gatsby-remark-autolink-headers",
            "version": "^1.4.8"
          },
          {
            "name": "gatsby-remark-copy-linked-files",
            "version": "^1.4.18"
          },
          {
            "name": "gatsby-remark-images",
            "version": "^1.5.66"
          },
          {
            "name": "gatsby-remark-katex",
            "version": "^1.0.14"
          },
          {
            "name": "gatsby-remark-prismjs",
            "version": "^2.0.3"
          },
          {
            "name": "gatsby-remark-responsive-iframe",
            "version": "^1.4.19"
          },
          {
            "name": "gatsby-remark-smartypants",
            "version": "^1.4.12"
          },
          {
            "name": "gatsby-source-filesystem",
            "version": "^1.5.38"
          },
          {
            "name": "gatsby-transformer-remark",
            "version": "^1.7.42"
          },
          {
            "name": "gatsby-transformer-sharp",
            "version": "^1.6.26"
          },
          {
            "name": "gatsby-transformer-yaml",
            "version": "^1.5.17"
          },
          {
            "name": "lodash-webpack-plugin",
            "version": "^0.11.2"
          }
        ],
        "peerDependencies": [],
        "optionalDependecies": [],
        "bundledDependecies": []
      },
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "5e5776e95991a76dbf556c99aec8ff63",
        "type": "SitePlugin",
        "owner": "internal-data-bridge"
      }
    },
    "Site": {
      "siteMetadata": {
        "title": "gatsby-example-using-remark",
        "author": "@gatsbyjs",
        "description": "Blazing-fast React.js static site generator",
        "homepage": "https://www.gatsbyjs.org"
      },
      "port": "8000",
      "host": "localhost",
      "mapping": {
        "MarkdownRemark.frontmatter.author": "AuthorYaml"
      },
      "pathPrefix": "",
      "polyfill": true,
      "buildTime": "2018-06-08T04:50:33.416Z",
      "id": "Site",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "contentDigest": "6c20ddd3c1c2a23cf5e70cb03b0064b9",
        "type": "Site",
        "owner": "internal-data-bridge"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "6f99bba2b7b273edfc52e1a9308a51e4",
        "type": "Directory",
        "description": "Directory \"src/pages\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages",
      "relativePath": "",
      "extension": "",
      "size": 4096,
      "prettySize": "4.1 kB",
      "modifiedTime": "2018-06-08T03:55:42.845Z",
      "accessTime": "2018-06-08T03:55:42.849Z",
      "changeTime": "2018-06-08T03:55:42.845Z",
      "birthTime": "2018-06-08T03:55:42.845Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src",
      "base": "pages",
      "ext": "",
      "name": "pages",
      "relativeDirectory": "..",
      "dev": 64769,
      "mode": 16877,
      "nlink": 18,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462739,
      "blocks": 8,
      "atimeMs": 1528430142848.9607,
      "mtimeMs": 1528430142844.9607,
      "ctimeMs": 1528430142844.9607,
      "birthtimeMs": 1528430142844.9607,
      "atime": "2018-06-08T03:55:42.849Z",
      "mtime": "2018-06-08T03:55:42.845Z",
      "ctime": "2018-06-08T03:55:42.845Z",
      "birthtime": "2018-06-08T03:55:42.845Z"
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2016-04-15---hello-world-kitchen-sink absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2016-04-15---hello-world-kitchen-sink absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "e5f2794a9c555b03ac4c7ac66886d76a",
        "type": "Directory",
        "description": "Directory \"src/pages/2016-04-15---hello-world-kitchen-sink\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2016-04-15---hello-world-kitchen-sink",
      "relativePath": "2016-04-15---hello-world-kitchen-sink",
      "extension": "",
      "size": 4096,
      "prettySize": "4.1 kB",
      "modifiedTime": "2018-06-07T06:10:26.474Z",
      "accessTime": "2018-06-07T06:10:29.102Z",
      "changeTime": "2018-06-07T06:10:26.474Z",
      "birthTime": "2018-06-07T06:10:26.474Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages",
      "base": "2016-04-15---hello-world-kitchen-sink",
      "ext": "",
      "name": "2016-04-15---hello-world-kitchen-sink",
      "relativeDirectory": "",
      "dev": 64769,
      "mode": 16877,
      "nlink": 2,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462740,
      "blocks": 8,
      "atimeMs": 1528351829101.8289,
      "mtimeMs": 1528351826473.8347,
      "ctimeMs": 1528351826473.8347,
      "birthtimeMs": 1528351826473.8347,
      "atime": "2018-06-07T06:10:29.102Z",
      "mtime": "2018-06-07T06:10:26.474Z",
      "ctime": "2018-06-07T06:10:26.474Z",
      "birthtime": "2018-06-07T06:10:26.474Z"
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "22bd20a0ac75f98fcc63a3189a83225e",
        "type": "Directory",
        "description": "Directory \"src/pages/2017-01-02---responsive-images-and-iframes\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes",
      "relativePath": "2017-01-02---responsive-images-and-iframes",
      "extension": "",
      "size": 4096,
      "prettySize": "4.1 kB",
      "modifiedTime": "2018-06-07T06:10:30.390Z",
      "accessTime": "2018-06-07T06:10:34.326Z",
      "changeTime": "2018-06-07T06:10:30.390Z",
      "birthTime": "2018-06-07T06:10:30.390Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages",
      "base": "2017-01-02---responsive-images-and-iframes",
      "ext": "",
      "name": "2017-01-02---responsive-images-and-iframes",
      "relativeDirectory": "",
      "dev": 64769,
      "mode": 16877,
      "nlink": 2,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12597074,
      "blocks": 8,
      "atimeMs": 1528351834325.817,
      "mtimeMs": 1528351830389.826,
      "ctimeMs": 1528351830389.826,
      "birthtimeMs": 1528351830389.826,
      "atime": "2018-06-07T06:10:34.326Z",
      "mtime": "2018-06-07T06:10:30.390Z",
      "ctime": "2018-06-07T06:10:30.390Z",
      "birthtime": "2018-06-07T06:10:30.390Z"
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "1361a49c842395a0686fe92b2782d68f",
        "type": "Directory",
        "description": "Directory \"src/pages/2017-03-21---copy-linked-files-intercepting-local-links\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links",
      "relativePath": "2017-03-21---copy-linked-files-intercepting-local-links",
      "extension": "",
      "size": 4096,
      "prettySize": "4.1 kB",
      "modifiedTime": "2018-06-07T06:10:32.274Z",
      "accessTime": "2018-06-07T06:10:32.278Z",
      "changeTime": "2018-06-07T06:10:32.274Z",
      "birthTime": "2018-06-07T06:10:32.274Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages",
      "base": "2017-03-21---copy-linked-files-intercepting-local-links",
      "ext": "",
      "name": "2017-03-21---copy-linked-files-intercepting-local-links",
      "relativeDirectory": "",
      "dev": 64769,
      "mode": 16877,
      "nlink": 2,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12597083,
      "blocks": 8,
      "atimeMs": 1528351832277.8215,
      "mtimeMs": 1528351832273.8215,
      "ctimeMs": 1528351832273.8215,
      "birthtimeMs": 1528351832273.8215,
      "atime": "2018-06-07T06:10:32.278Z",
      "mtime": "2018-06-07T06:10:32.274Z",
      "ctime": "2018-06-07T06:10:32.274Z",
      "birthtime": "2018-06-07T06:10:32.274Z"
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-04-04---code-and-syntax-highlighting absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-04-04---code-and-syntax-highlighting absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "c2a283e0426199b3a03107e8587af04a",
        "type": "Directory",
        "description": "Directory \"src/pages/2017-04-04---code-and-syntax-highlighting\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-04-04---code-and-syntax-highlighting",
      "relativePath": "2017-04-04---code-and-syntax-highlighting",
      "extension": "",
      "size": 4096,
      "prettySize": "4.1 kB",
      "modifiedTime": "2018-06-07T06:10:32.334Z",
      "accessTime": "2018-06-07T06:10:34.326Z",
      "changeTime": "2018-06-07T06:10:32.334Z",
      "birthTime": "2018-06-07T06:10:32.334Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages",
      "base": "2017-04-04---code-and-syntax-highlighting",
      "ext": "",
      "name": "2017-04-04---code-and-syntax-highlighting",
      "relativeDirectory": "",
      "dev": 64769,
      "mode": 16877,
      "nlink": 2,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12597087,
      "blocks": 8,
      "atimeMs": 1528351834325.817,
      "mtimeMs": 1528351832333.8215,
      "ctimeMs": 1528351832333.8215,
      "birthtimeMs": 1528351832333.8215,
      "atime": "2018-06-07T06:10:34.326Z",
      "mtime": "2018-06-07T06:10:32.334Z",
      "ctime": "2018-06-07T06:10:32.334Z",
      "birthtime": "2018-06-07T06:10:32.334Z"
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-08-07---katex absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-08-07---katex absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "9769a24831e76de223df1157139feb22",
        "type": "Directory",
        "description": "Directory \"src/pages/2017-08-07---katex\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-08-07---katex",
      "relativePath": "2017-08-07---katex",
      "extension": "",
      "size": 4096,
      "prettySize": "4.1 kB",
      "modifiedTime": "2018-06-07T06:10:32.442Z",
      "accessTime": "2018-06-07T06:10:34.326Z",
      "changeTime": "2018-06-07T06:10:32.442Z",
      "birthTime": "2018-06-07T06:10:32.442Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages",
      "base": "2017-08-07---katex",
      "ext": "",
      "name": "2017-08-07---katex",
      "relativeDirectory": "",
      "dev": 64769,
      "mode": 16877,
      "nlink": 2,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12597090,
      "blocks": 8,
      "atimeMs": 1528351834325.817,
      "mtimeMs": 1528351832441.8213,
      "ctimeMs": 1528351832441.8213,
      "birthtimeMs": 1528351832441.8213,
      "atime": "2018-06-07T06:10:34.326Z",
      "mtime": "2018-06-07T06:10:32.442Z",
      "ctime": "2018-06-07T06:10:32.442Z",
      "birthtime": "2018-06-07T06:10:32.442Z"
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-11-14---excerpts absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-11-14---excerpts absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "b79c179de0fdb4d21ceb0a007a2c977c",
        "type": "Directory",
        "description": "Directory \"src/pages/2017-11-14---excerpts\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-11-14---excerpts",
      "relativePath": "2017-11-14---excerpts",
      "extension": "",
      "size": 4096,
      "prettySize": "4.1 kB",
      "modifiedTime": "2018-06-07T06:10:32.466Z",
      "accessTime": "2018-06-07T06:10:34.326Z",
      "changeTime": "2018-06-07T06:10:32.466Z",
      "birthTime": "2018-06-07T06:10:32.466Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages",
      "base": "2017-11-14---excerpts",
      "ext": "",
      "name": "2017-11-14---excerpts",
      "relativeDirectory": "",
      "dev": 64769,
      "mode": 16877,
      "nlink": 2,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12597092,
      "blocks": 8,
      "atimeMs": 1528351834325.817,
      "mtimeMs": 1528351832465.821,
      "ctimeMs": 1528351832465.821,
      "birthtimeMs": 1528351832465.821,
      "atime": "2018-06-07T06:10:34.326Z",
      "mtime": "2018-06-07T06:10:32.466Z",
      "ctime": "2018-06-07T06:10:32.466Z",
      "birthtime": "2018-06-07T06:10:32.466Z"
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2018-01-27---custom-components absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2018-01-27---custom-components absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "0d9f5418c7665aaaa281c4598489037a",
        "type": "Directory",
        "description": "Directory \"src/pages/2018-01-27---custom-components\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2018-01-27---custom-components",
      "relativePath": "2018-01-27---custom-components",
      "extension": "",
      "size": 4096,
      "prettySize": "4.1 kB",
      "modifiedTime": "2018-06-07T06:10:32.470Z",
      "accessTime": "2018-06-07T06:10:32.474Z",
      "changeTime": "2018-06-07T06:10:32.470Z",
      "birthTime": "2018-06-07T06:10:32.470Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages",
      "base": "2018-01-27---custom-components",
      "ext": "",
      "name": "2018-01-27---custom-components",
      "relativeDirectory": "",
      "dev": 64769,
      "mode": 16877,
      "nlink": 2,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12597094,
      "blocks": 8,
      "atimeMs": 1528351832473.821,
      "mtimeMs": 1528351832469.821,
      "ctimeMs": 1528351832469.821,
      "birthtimeMs": 1528351832469.821,
      "atime": "2018-06-07T06:10:32.474Z",
      "mtime": "2018-06-07T06:10:32.470Z",
      "ctime": "2018-06-07T06:10:32.470Z",
      "birthtime": "2018-06-07T06:10:32.470Z"
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Algos absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Algos absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "700fff6cc22269dc7312f8f99d214686",
        "type": "Directory",
        "description": "Directory \"src/pages/Algos\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Algos",
      "relativePath": "Algos",
      "extension": "",
      "size": 4096,
      "prettySize": "4.1 kB",
      "modifiedTime": "2018-06-08T03:47:14.089Z",
      "accessTime": "2018-06-08T03:47:14.313Z",
      "changeTime": "2018-06-08T03:47:14.089Z",
      "birthTime": "2018-06-08T03:47:14.089Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages",
      "base": "Algos",
      "ext": "",
      "name": "Algos",
      "relativeDirectory": "",
      "dev": 64769,
      "mode": 16877,
      "nlink": 2,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462756,
      "blocks": 8,
      "atimeMs": 1528429634313.2317,
      "mtimeMs": 1528429634089.232,
      "ctimeMs": 1528429634089.232,
      "birthtimeMs": 1528429634089.232,
      "atime": "2018-06-08T03:47:14.313Z",
      "mtime": "2018-06-08T03:47:14.089Z",
      "ctime": "2018-06-08T03:47:14.089Z",
      "birthtime": "2018-06-08T03:47:14.089Z"
    },
    "/home/ryan/dev/notes/gatsby/src/pages/DBs absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/DBs absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "cb56076e1fd12ac0d4f8da563bfe5df5",
        "type": "Directory",
        "description": "Directory \"src/pages/DBs\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/DBs",
      "relativePath": "DBs",
      "extension": "",
      "size": 4096,
      "prettySize": "4.1 kB",
      "modifiedTime": "2018-06-08T03:47:13.709Z",
      "accessTime": "2018-06-08T03:47:13.917Z",
      "changeTime": "2018-06-08T03:47:13.709Z",
      "birthTime": "2018-06-08T03:47:13.709Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages",
      "base": "DBs",
      "ext": "",
      "name": "DBs",
      "relativeDirectory": "",
      "dev": 64769,
      "mode": 16877,
      "nlink": 2,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462757,
      "blocks": 8,
      "atimeMs": 1528429633917.232,
      "mtimeMs": 1528429633709.2322,
      "ctimeMs": 1528429633709.2322,
      "birthtimeMs": 1528429633709.2322,
      "atime": "2018-06-08T03:47:13.917Z",
      "mtime": "2018-06-08T03:47:13.709Z",
      "ctime": "2018-06-08T03:47:13.709Z",
      "birthtime": "2018-06-08T03:47:13.709Z"
    },
    "/home/ryan/dev/notes/gatsby/src/pages/DevOps absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/DevOps absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "2069f08fab1603cbdbbbe5d2c40333bc",
        "type": "Directory",
        "description": "Directory \"src/pages/DevOps\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/DevOps",
      "relativePath": "DevOps",
      "extension": "",
      "size": 4096,
      "prettySize": "4.1 kB",
      "modifiedTime": "2018-06-08T03:47:13.713Z",
      "accessTime": "2018-06-08T03:47:13.969Z",
      "changeTime": "2018-06-08T03:47:13.713Z",
      "birthTime": "2018-06-08T03:47:13.713Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages",
      "base": "DevOps",
      "ext": "",
      "name": "DevOps",
      "relativeDirectory": "",
      "dev": 64769,
      "mode": 16877,
      "nlink": 2,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462758,
      "blocks": 8,
      "atimeMs": 1528429633969.232,
      "mtimeMs": 1528429633713.2322,
      "ctimeMs": 1528429633713.2322,
      "birthtimeMs": 1528429633713.2322,
      "atime": "2018-06-08T03:47:13.969Z",
      "mtime": "2018-06-08T03:47:13.713Z",
      "ctime": "2018-06-08T03:47:13.713Z",
      "birthtime": "2018-06-08T03:47:13.713Z"
    },
    "/home/ryan/dev/notes/gatsby/src/pages/JavaScript absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "46f6ed5171bc9648018c076d159a912d",
        "type": "Directory",
        "description": "Directory \"src/pages/JavaScript\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript",
      "relativePath": "JavaScript",
      "extension": "",
      "size": 4096,
      "prettySize": "4.1 kB",
      "modifiedTime": "2018-06-08T03:47:14.945Z",
      "accessTime": "2018-06-08T03:47:14.949Z",
      "changeTime": "2018-06-08T03:47:14.945Z",
      "birthTime": "2018-06-08T03:47:14.945Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages",
      "base": "JavaScript",
      "ext": "",
      "name": "JavaScript",
      "relativeDirectory": "",
      "dev": 64769,
      "mode": 16877,
      "nlink": 2,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462759,
      "blocks": 8,
      "atimeMs": 1528429634949.2312,
      "mtimeMs": 1528429634945.2312,
      "ctimeMs": 1528429634945.2312,
      "birthtimeMs": 1528429634945.2312,
      "atime": "2018-06-08T03:47:14.949Z",
      "mtime": "2018-06-08T03:47:14.945Z",
      "ctime": "2018-06-08T03:47:14.945Z",
      "birthtime": "2018-06-08T03:47:14.945Z"
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Liferay absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Liferay absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "5f20699e391c17d5e2efcb9574a895ce",
        "type": "Directory",
        "description": "Directory \"src/pages/Liferay\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Liferay",
      "relativePath": "Liferay",
      "extension": "",
      "size": 4096,
      "prettySize": "4.1 kB",
      "modifiedTime": "2018-06-08T03:53:08.981Z",
      "accessTime": "2018-06-08T03:53:16.993Z",
      "changeTime": "2018-06-08T03:53:08.981Z",
      "birthTime": "2018-06-08T03:53:08.981Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages",
      "base": "Liferay",
      "ext": "",
      "name": "Liferay",
      "relativeDirectory": "",
      "dev": 64769,
      "mode": 16877,
      "nlink": 2,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462760,
      "blocks": 8,
      "atimeMs": 1528429996993.0215,
      "mtimeMs": 1528429988981.0251,
      "ctimeMs": 1528429988981.0251,
      "birthtimeMs": 1528429988981.0251,
      "atime": "2018-06-08T03:53:16.993Z",
      "mtime": "2018-06-08T03:53:08.981Z",
      "ctime": "2018-06-08T03:53:08.981Z",
      "birthtime": "2018-06-08T03:53:08.981Z"
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Linux absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Linux absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "54fc62fac24f2b1baed879b35599bbe2",
        "type": "Directory",
        "description": "Directory \"src/pages/Linux\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Linux",
      "relativePath": "Linux",
      "extension": "",
      "size": 4096,
      "prettySize": "4.1 kB",
      "modifiedTime": "2018-06-08T03:47:13.969Z",
      "accessTime": "2018-06-08T03:47:14.313Z",
      "changeTime": "2018-06-08T03:47:13.969Z",
      "birthTime": "2018-06-08T03:47:13.969Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages",
      "base": "Linux",
      "ext": "",
      "name": "Linux",
      "relativeDirectory": "",
      "dev": 64769,
      "mode": 16877,
      "nlink": 2,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462761,
      "blocks": 8,
      "atimeMs": 1528429634313.2317,
      "mtimeMs": 1528429633969.232,
      "ctimeMs": 1528429633969.232,
      "birthtimeMs": 1528429633969.232,
      "atime": "2018-06-08T03:47:14.313Z",
      "mtime": "2018-06-08T03:47:13.969Z",
      "ctime": "2018-06-08T03:47:13.969Z",
      "birthtime": "2018-06-08T03:47:13.969Z"
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Security absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Security absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "23a6483cd00555b1f54a3fe9f6809ad2",
        "type": "Directory",
        "description": "Directory \"src/pages/Security\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Security",
      "relativePath": "Security",
      "extension": "",
      "size": 4096,
      "prettySize": "4.1 kB",
      "modifiedTime": "2018-06-08T03:47:13.713Z",
      "accessTime": "2018-06-08T03:47:13.969Z",
      "changeTime": "2018-06-08T03:47:13.713Z",
      "birthTime": "2018-06-08T03:47:13.713Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages",
      "base": "Security",
      "ext": "",
      "name": "Security",
      "relativeDirectory": "",
      "dev": 64769,
      "mode": 16877,
      "nlink": 2,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462763,
      "blocks": 8,
      "atimeMs": 1528429633969.232,
      "mtimeMs": 1528429633713.2322,
      "ctimeMs": 1528429633713.2322,
      "birthtimeMs": 1528429633713.2322,
      "atime": "2018-06-08T03:47:13.969Z",
      "mtime": "2018-06-08T03:47:13.713Z",
      "ctime": "2018-06-08T03:47:13.713Z",
      "birthtime": "2018-06-08T03:47:13.713Z"
    },
    "/home/ryan/dev/notes/gatsby/src/pages/avatars absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/avatars absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "e5db21d90017fc673832f48dafe48843",
        "type": "Directory",
        "description": "Directory \"src/pages/avatars\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/avatars",
      "relativePath": "avatars",
      "extension": "",
      "size": 4096,
      "prettySize": "4.1 kB",
      "modifiedTime": "2018-06-07T06:10:32.502Z",
      "accessTime": "2018-06-07T06:10:34.326Z",
      "changeTime": "2018-06-07T06:10:32.502Z",
      "birthTime": "2018-06-07T06:10:32.502Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages",
      "base": "avatars",
      "ext": "",
      "name": "avatars",
      "relativeDirectory": "",
      "dev": 64769,
      "mode": 16877,
      "nlink": 2,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12727947,
      "blocks": 8,
      "atimeMs": 1528351834325.817,
      "mtimeMs": 1528351832501.821,
      "ctimeMs": 1528351832501.821,
      "birthtimeMs": 1528351832501.821,
      "atime": "2018-06-07T06:10:34.326Z",
      "mtime": "2018-06-07T06:10:32.502Z",
      "ctime": "2018-06-07T06:10:32.502Z",
      "birthtime": "2018-06-07T06:10:32.502Z"
    },
    "/home/ryan/dev/notes/gatsby/src/pages/examples absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/examples absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "ab1230d70bab3e0a361fb3f67130738b",
        "type": "Directory",
        "description": "Directory \"src/pages/examples\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/examples",
      "relativePath": "examples",
      "extension": "",
      "size": 4096,
      "prettySize": "4.1 kB",
      "modifiedTime": "2018-06-07T06:10:32.534Z",
      "accessTime": "2018-06-07T06:10:34.326Z",
      "changeTime": "2018-06-07T06:10:32.534Z",
      "birthTime": "2018-06-07T06:10:32.534Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages",
      "base": "examples",
      "ext": "",
      "name": "examples",
      "relativeDirectory": "",
      "dev": 64769,
      "mode": 16877,
      "nlink": 4,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12727950,
      "blocks": 8,
      "atimeMs": 1528351834325.817,
      "mtimeMs": 1528351832533.821,
      "ctimeMs": 1528351832533.821,
      "birthtimeMs": 1528351832533.821,
      "atime": "2018-06-07T06:10:34.326Z",
      "mtime": "2018-06-07T06:10:32.534Z",
      "ctime": "2018-06-07T06:10:32.534Z",
      "birthtime": "2018-06-07T06:10:32.534Z"
    },
    "/home/ryan/dev/notes/gatsby/src/pages/examples/example---custom-separator absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/examples/example---custom-separator absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "f2cdbd8b6ea5c13bf033307fad35d4f1",
        "type": "Directory",
        "description": "Directory \"src/pages/examples/example---custom-separator\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/examples/example---custom-separator",
      "relativePath": "examples/example---custom-separator",
      "extension": "",
      "size": 4096,
      "prettySize": "4.1 kB",
      "modifiedTime": "2018-06-07T06:10:32.534Z",
      "accessTime": "2018-06-07T06:10:34.326Z",
      "changeTime": "2018-06-07T06:10:32.534Z",
      "birthTime": "2018-06-07T06:10:32.534Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/examples",
      "base": "example---custom-separator",
      "ext": "",
      "name": "example---custom-separator",
      "relativeDirectory": "examples",
      "dev": 64769,
      "mode": 16877,
      "nlink": 2,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12727951,
      "blocks": 8,
      "atimeMs": 1528351834325.817,
      "mtimeMs": 1528351832533.821,
      "ctimeMs": 1528351832533.821,
      "birthtimeMs": 1528351832533.821,
      "atime": "2018-06-07T06:10:34.326Z",
      "mtime": "2018-06-07T06:10:32.534Z",
      "ctime": "2018-06-07T06:10:32.534Z",
      "birthtime": "2018-06-07T06:10:32.534Z"
    },
    "/home/ryan/dev/notes/gatsby/src/pages/examples/example---no-separator absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/examples/example---no-separator absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "e43fa2589421b239f22e6c278a962d27",
        "type": "Directory",
        "description": "Directory \"src/pages/examples/example---no-separator\"",
        "owner": "gatsby-source-filesystem"
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/examples/example---no-separator",
      "relativePath": "examples/example---no-separator",
      "extension": "",
      "size": 4096,
      "prettySize": "4.1 kB",
      "modifiedTime": "2018-06-07T06:10:32.538Z",
      "accessTime": "2018-06-07T06:10:34.326Z",
      "changeTime": "2018-06-07T06:10:32.538Z",
      "birthTime": "2018-06-07T06:10:32.538Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/examples",
      "base": "example---no-separator",
      "ext": "",
      "name": "example---no-separator",
      "relativeDirectory": "examples",
      "dev": 64769,
      "mode": 16877,
      "nlink": 2,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12727953,
      "blocks": 8,
      "atimeMs": 1528351834325.817,
      "mtimeMs": 1528351832537.821,
      "ctimeMs": 1528351832537.821,
      "birthtimeMs": 1528351832537.821,
      "atime": "2018-06-07T06:10:34.326Z",
      "mtime": "2018-06-07T06:10:32.538Z",
      "ctime": "2018-06-07T06:10:32.538Z",
      "birthtime": "2018-06-07T06:10:32.538Z"
    },
    "/home/ryan/dev/notes/gatsby/src/pages/author.yaml absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/author.yaml absPath of file",
      "children": [
        "Daisy Buchanan",
        "Jay Gatsby"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "31ebe308df3a6de5ef1ea7c14f97ee02",
        "mediaType": "text/yaml",
        "type": "File",
        "description": "File \"src/pages/author.yaml\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/author.yaml",
      "relativePath": "author.yaml",
      "extension": "yaml",
      "size": 228,
      "prettySize": "228 B",
      "modifiedTime": "2018-06-07T06:10:32.486Z",
      "accessTime": "2018-06-07T06:13:56.081Z",
      "changeTime": "2018-06-07T06:10:32.486Z",
      "birthTime": "2018-06-07T06:10:32.486Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages",
      "base": "author.yaml",
      "ext": ".yaml",
      "name": "author",
      "relativeDirectory": "",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462743,
      "blocks": 8,
      "atimeMs": 1528352036081.4326,
      "mtimeMs": 1528351832485.821,
      "ctimeMs": 1528351832485.821,
      "birthtimeMs": 1528351832485.821,
      "atime": "2018-06-07T06:13:56.081Z",
      "mtime": "2018-06-07T06:10:32.486Z",
      "ctime": "2018-06-07T06:10:32.486Z",
      "birthtime": "2018-06-07T06:10:32.486Z",
      "fields": {
        "slug": "/pages-author/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/excerpt-example.js absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/excerpt-example.js absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "8764e06902b06255f0e130ecb91513e3",
        "mediaType": "application/javascript",
        "type": "File",
        "description": "File \"src/pages/excerpt-example.js\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/excerpt-example.js",
      "relativePath": "excerpt-example.js",
      "extension": "js",
      "size": 1919,
      "prettySize": "1.92 kB",
      "modifiedTime": "2018-06-07T06:10:32.542Z",
      "accessTime": "2018-06-07T06:13:56.101Z",
      "changeTime": "2018-06-07T06:10:32.542Z",
      "birthTime": "2018-06-07T06:10:32.542Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages",
      "base": "excerpt-example.js",
      "ext": ".js",
      "name": "excerpt-example",
      "relativeDirectory": "",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462744,
      "blocks": 8,
      "atimeMs": 1528352036101.4326,
      "mtimeMs": 1528351832541.821,
      "ctimeMs": 1528351832541.821,
      "birthtimeMs": 1528351832541.821,
      "atime": "2018-06-07T06:13:56.101Z",
      "mtime": "2018-06-07T06:10:32.542Z",
      "ctime": "2018-06-07T06:10:32.542Z",
      "birthtime": "2018-06-07T06:10:32.542Z",
      "fields": {
        "slug": "/pages-excerpt-example/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/index.js absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/index.js absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "8b677c308790533c866ff469997d8982",
        "mediaType": "application/javascript",
        "type": "File",
        "description": "File \"src/pages/index.js\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/index.js",
      "relativePath": "index.js",
      "extension": "js",
      "size": 2439,
      "prettySize": "2.44 kB",
      "modifiedTime": "2018-06-07T06:10:32.550Z",
      "accessTime": "2018-06-07T06:13:56.101Z",
      "changeTime": "2018-06-07T06:10:32.550Z",
      "birthTime": "2018-06-07T06:10:32.550Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages",
      "base": "index.js",
      "ext": ".js",
      "name": "index",
      "relativeDirectory": "",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462745,
      "blocks": 8,
      "atimeMs": 1528352036101.4326,
      "mtimeMs": 1528351832549.821,
      "ctimeMs": 1528351832549.821,
      "birthtimeMs": 1528351832549.821,
      "atime": "2018-06-07T06:13:56.101Z",
      "mtime": "2018-06-07T06:10:32.550Z",
      "ctime": "2018-06-07T06:10:32.550Z",
      "birthtime": "2018-06-07T06:10:32.550Z",
      "fields": {
        "slug": "/pages/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/tags.js absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/tags.js absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "a7c5d349d6163f08fa1c74d07fa25d92",
        "mediaType": "application/javascript",
        "type": "File",
        "description": "File \"src/pages/tags.js\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/tags.js",
      "relativePath": "tags.js",
      "extension": "js",
      "size": 1046,
      "prettySize": "1.05 kB",
      "modifiedTime": "2018-06-07T06:10:32.562Z",
      "accessTime": "2018-06-07T06:13:56.101Z",
      "changeTime": "2018-06-07T06:10:32.562Z",
      "birthTime": "2018-06-07T06:10:32.562Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages",
      "base": "tags.js",
      "ext": ".js",
      "name": "tags",
      "relativeDirectory": "",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462746,
      "blocks": 8,
      "atimeMs": 1528352036101.4326,
      "mtimeMs": 1528351832561.821,
      "ctimeMs": 1528351832561.821,
      "birthtimeMs": 1528351832561.821,
      "atime": "2018-06-07T06:13:56.101Z",
      "mtime": "2018-06-07T06:10:32.562Z",
      "ctime": "2018-06-07T06:10:32.562Z",
      "birthtime": "2018-06-07T06:10:32.562Z",
      "fields": {
        "slug": "/pages-tags/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2016-04-15---hello-world-kitchen-sink/index.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2016-04-15---hello-world-kitchen-sink/index.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/2016-04-15---hello-world-kitchen-sink/index.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "0893db91dec09f0f74bc11dad39e08d5",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/2016-04-15---hello-world-kitchen-sink/index.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2016-04-15---hello-world-kitchen-sink/index.md",
      "relativePath": "2016-04-15---hello-world-kitchen-sink/index.md",
      "extension": "md",
      "size": 10157,
      "prettySize": "10.2 kB",
      "modifiedTime": "2018-06-07T06:10:26.422Z",
      "accessTime": "2018-06-07T06:13:53.873Z",
      "changeTime": "2018-06-07T06:10:26.438Z",
      "birthTime": "2018-06-07T06:10:26.438Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/2016-04-15---hello-world-kitchen-sink",
      "base": "index.md",
      "ext": ".md",
      "name": "index",
      "relativeDirectory": "2016-04-15---hello-world-kitchen-sink",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462741,
      "blocks": 24,
      "atimeMs": 1528352033873.436,
      "mtimeMs": 1528351826421.835,
      "ctimeMs": 1528351826437.835,
      "birthtimeMs": 1528351826437.835,
      "atime": "2018-06-07T06:13:53.873Z",
      "mtime": "2018-06-07T06:10:26.422Z",
      "ctime": "2018-06-07T06:10:26.438Z",
      "birthtime": "2018-06-07T06:10:26.438Z",
      "fields": {
        "slug": "/2016-04-15---hello-world-kitchen-sink/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links/Creativecommons-informational-flyer_eng.pdf absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links/Creativecommons-informational-flyer_eng.pdf absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "cdc888896b2190fade2812ca9eacde14",
        "mediaType": "application/pdf",
        "type": "File",
        "description": "File \"src/pages/2017-03-21---copy-linked-files-intercepting-local-links/Creativecommons-informational-flyer_eng.pdf\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links/Creativecommons-informational-flyer_eng.pdf",
      "relativePath": "2017-03-21---copy-linked-files-intercepting-local-links/Creativecommons-informational-flyer_eng.pdf",
      "extension": "pdf",
      "size": 64895,
      "prettySize": "64.9 kB",
      "modifiedTime": "2018-06-07T06:10:30.594Z",
      "accessTime": "2018-06-07T06:13:55.181Z",
      "changeTime": "2018-06-07T06:10:30.642Z",
      "birthTime": "2018-06-07T06:10:30.642Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links",
      "base": "Creativecommons-informational-flyer_eng.pdf",
      "ext": ".pdf",
      "name": "Creativecommons-informational-flyer_eng",
      "relativeDirectory": "2017-03-21---copy-linked-files-intercepting-local-links",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12597084,
      "blocks": 128,
      "atimeMs": 1528352035181.434,
      "mtimeMs": 1528351830593.8254,
      "ctimeMs": 1528351830641.8252,
      "birthtimeMs": 1528351830641.8252,
      "atime": "2018-06-07T06:13:55.181Z",
      "mtime": "2018-06-07T06:10:30.594Z",
      "ctime": "2018-06-07T06:10:30.642Z",
      "birthtime": "2018-06-07T06:10:30.642Z",
      "fields": {
        "slug": "/2017-03-21---copy-linked-files-intercepting-local-links-Creativecommons-informational-flyer_eng/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links/index.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links/index.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links/index.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "4691b6147284f87c4535aa6a730419bb",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/2017-03-21---copy-linked-files-intercepting-local-links/index.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links/index.md",
      "relativePath": "2017-03-21---copy-linked-files-intercepting-local-links/index.md",
      "extension": "md",
      "size": 1103,
      "prettySize": "1.1 kB",
      "modifiedTime": "2018-06-07T06:10:32.278Z",
      "accessTime": "2018-06-07T06:13:55.913Z",
      "changeTime": "2018-06-07T06:10:32.278Z",
      "birthTime": "2018-06-07T06:10:32.278Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links",
      "base": "index.md",
      "ext": ".md",
      "name": "index",
      "relativeDirectory": "2017-03-21---copy-linked-files-intercepting-local-links",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12597086,
      "blocks": 8,
      "atimeMs": 1528352035913.4329,
      "mtimeMs": 1528351832277.8215,
      "ctimeMs": 1528351832277.8215,
      "birthtimeMs": 1528351832277.8215,
      "atime": "2018-06-07T06:13:55.913Z",
      "mtime": "2018-06-07T06:10:32.278Z",
      "ctime": "2018-06-07T06:10:32.278Z",
      "birthtime": "2018-06-07T06:10:32.278Z",
      "fields": {
        "slug": "/2017-03-21---copy-linked-files-intercepting-local-links/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-08-07---katex/index.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-08-07---katex/index.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/2017-08-07---katex/index.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "db5730ed3cf9cf488f1595372849dc1a",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/2017-08-07---katex/index.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-08-07---katex/index.md",
      "relativePath": "2017-08-07---katex/index.md",
      "extension": "md",
      "size": 1118,
      "prettySize": "1.12 kB",
      "modifiedTime": "2018-06-07T06:10:32.450Z",
      "accessTime": "2018-06-07T06:13:56.077Z",
      "changeTime": "2018-06-07T06:10:32.458Z",
      "birthTime": "2018-06-07T06:10:32.458Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/2017-08-07---katex",
      "base": "index.md",
      "ext": ".md",
      "name": "index",
      "relativeDirectory": "2017-08-07---katex",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12597091,
      "blocks": 8,
      "atimeMs": 1528352036077.4326,
      "mtimeMs": 1528351832449.8213,
      "ctimeMs": 1528351832457.8213,
      "birthtimeMs": 1528351832457.8213,
      "atime": "2018-06-07T06:13:56.077Z",
      "mtime": "2018-06-07T06:10:32.450Z",
      "ctime": "2018-06-07T06:10:32.458Z",
      "birthtime": "2018-06-07T06:10:32.458Z",
      "fields": {
        "slug": "/2017-08-07---katex/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/144-density.jpg absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/144-density.jpg absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/144-density.jpg absPath of file >> ImageSharp"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "e1c8bc91f7f9fbed494f3edd10b6de41",
        "mediaType": "image/jpeg",
        "type": "File",
        "description": "File \"src/pages/2017-01-02---responsive-images-and-iframes/144-density.jpg\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/144-density.jpg",
      "relativePath": "2017-01-02---responsive-images-and-iframes/144-density.jpg",
      "extension": "jpg",
      "size": 29954,
      "prettySize": "30 kB",
      "modifiedTime": "2018-06-07T06:10:26.882Z",
      "accessTime": "2018-06-07T06:13:53.989Z",
      "changeTime": "2018-06-07T06:10:26.906Z",
      "birthTime": "2018-06-07T06:10:26.906Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes",
      "base": "144-density.jpg",
      "ext": ".jpg",
      "name": "144-density",
      "relativeDirectory": "2017-01-02---responsive-images-and-iframes",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12597075,
      "blocks": 64,
      "atimeMs": 1528352033989.436,
      "mtimeMs": 1528351826881.8337,
      "ctimeMs": 1528351826905.8337,
      "birthtimeMs": 1528351826905.8337,
      "atime": "2018-06-07T06:13:53.989Z",
      "mtime": "2018-06-07T06:10:26.882Z",
      "ctime": "2018-06-07T06:10:26.906Z",
      "birthtime": "2018-06-07T06:10:26.906Z",
      "fields": {
        "slug": "/2017-01-02---responsive-images-and-iframes-144-density/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/index.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/index.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/index.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "0de6f8b5119561638142b8c5fc0f02e4",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/2017-01-02---responsive-images-and-iframes/index.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/index.md",
      "relativePath": "2017-01-02---responsive-images-and-iframes/index.md",
      "extension": "md",
      "size": 2369,
      "prettySize": "2.37 kB",
      "modifiedTime": "2018-06-07T06:10:26.938Z",
      "accessTime": "2018-06-07T06:13:54.001Z",
      "changeTime": "2018-06-07T06:10:26.938Z",
      "birthTime": "2018-06-07T06:10:26.938Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes",
      "base": "index.md",
      "ext": ".md",
      "name": "index",
      "relativeDirectory": "2017-01-02---responsive-images-and-iframes",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12597077,
      "blocks": 8,
      "atimeMs": 1528352034001.436,
      "mtimeMs": 1528351826937.8337,
      "ctimeMs": 1528351826937.8337,
      "birthtimeMs": 1528351826937.8337,
      "atime": "2018-06-07T06:13:54.001Z",
      "mtime": "2018-06-07T06:10:26.938Z",
      "ctime": "2018-06-07T06:10:26.938Z",
      "birthtime": "2018-06-07T06:10:26.938Z",
      "fields": {
        "slug": "/2017-01-02---responsive-images-and-iframes/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/squiggly.svg absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/squiggly.svg absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "418115f7cfa5605adab242f393a72e6d",
        "mediaType": "image/svg+xml",
        "type": "File",
        "description": "File \"src/pages/2017-01-02---responsive-images-and-iframes/squiggly.svg\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/squiggly.svg",
      "relativePath": "2017-01-02---responsive-images-and-iframes/squiggly.svg",
      "extension": "svg",
      "size": 580,
      "prettySize": "580 B",
      "modifiedTime": "2018-06-07T06:10:30.426Z",
      "accessTime": "2018-06-07T06:13:55.181Z",
      "changeTime": "2018-06-07T06:10:30.458Z",
      "birthTime": "2018-06-07T06:10:30.458Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes",
      "base": "squiggly.svg",
      "ext": ".svg",
      "name": "squiggly",
      "relativeDirectory": "2017-01-02---responsive-images-and-iframes",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12597082,
      "blocks": 8,
      "atimeMs": 1528352035181.434,
      "mtimeMs": 1528351830425.8257,
      "ctimeMs": 1528351830457.8257,
      "birthtimeMs": 1528351830457.8257,
      "atime": "2018-06-07T06:13:55.181Z",
      "mtime": "2018-06-07T06:10:30.426Z",
      "ctime": "2018-06-07T06:10:30.458Z",
      "birthtime": "2018-06-07T06:10:30.458Z",
      "fields": {
        "slug": "/2017-01-02---responsive-images-and-iframes-squiggly/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-04-04---code-and-syntax-highlighting/index.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-04-04---code-and-syntax-highlighting/index.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/2017-04-04---code-and-syntax-highlighting/index.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "1c82aa048ed22fa377c50cd1d9e1707e",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/2017-04-04---code-and-syntax-highlighting/index.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-04-04---code-and-syntax-highlighting/index.md",
      "relativePath": "2017-04-04---code-and-syntax-highlighting/index.md",
      "extension": "md",
      "size": 4833,
      "prettySize": "4.83 kB",
      "modifiedTime": "2018-06-07T06:10:32.334Z",
      "accessTime": "2018-06-07T06:13:55.917Z",
      "changeTime": "2018-06-07T06:10:32.334Z",
      "birthTime": "2018-06-07T06:10:32.334Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/2017-04-04---code-and-syntax-highlighting",
      "base": "index.md",
      "ext": ".md",
      "name": "index",
      "relativeDirectory": "2017-04-04---code-and-syntax-highlighting",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12597088,
      "blocks": 16,
      "atimeMs": 1528352035917.4329,
      "mtimeMs": 1528351832333.8215,
      "ctimeMs": 1528351832333.8215,
      "birthtimeMs": 1528351832333.8215,
      "atime": "2018-06-07T06:13:55.917Z",
      "mtime": "2018-06-07T06:10:32.334Z",
      "ctime": "2018-06-07T06:10:32.334Z",
      "birthtime": "2018-06-07T06:10:32.334Z",
      "fields": {
        "slug": "/2017-04-04---code-and-syntax-highlighting/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-11-14---excerpts/index.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-11-14---excerpts/index.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/2017-11-14---excerpts/index.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "976c927175b3d021abaf4d3a0c4d596c",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/2017-11-14---excerpts/index.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-11-14---excerpts/index.md",
      "relativePath": "2017-11-14---excerpts/index.md",
      "extension": "md",
      "size": 1097,
      "prettySize": "1.1 kB",
      "modifiedTime": "2018-06-07T06:10:32.466Z",
      "accessTime": "2018-06-07T06:13:56.077Z",
      "changeTime": "2018-06-07T06:10:32.466Z",
      "birthTime": "2018-06-07T06:10:32.466Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/2017-11-14---excerpts",
      "base": "index.md",
      "ext": ".md",
      "name": "index",
      "relativeDirectory": "2017-11-14---excerpts",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12597093,
      "blocks": 8,
      "atimeMs": 1528352036077.4326,
      "mtimeMs": 1528351832465.821,
      "ctimeMs": 1528351832465.821,
      "birthtimeMs": 1528351832465.821,
      "atime": "2018-06-07T06:13:56.077Z",
      "mtime": "2018-06-07T06:10:32.466Z",
      "ctime": "2018-06-07T06:10:32.466Z",
      "birthtime": "2018-06-07T06:10:32.466Z",
      "fields": {
        "slug": "/2017-11-14---excerpts/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2018-01-27---custom-components/index.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2018-01-27---custom-components/index.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/2018-01-27---custom-components/index.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "a4b0041c5f8895a1b3065168d3ecf46e",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/2018-01-27---custom-components/index.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2018-01-27---custom-components/index.md",
      "relativePath": "2018-01-27---custom-components/index.md",
      "extension": "md",
      "size": 7895,
      "prettySize": "7.89 kB",
      "modifiedTime": "2018-06-07T06:10:32.474Z",
      "accessTime": "2018-06-07T06:13:56.081Z",
      "changeTime": "2018-06-07T06:10:32.474Z",
      "birthTime": "2018-06-07T06:10:32.474Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/2018-01-27---custom-components",
      "base": "index.md",
      "ext": ".md",
      "name": "index",
      "relativeDirectory": "2018-01-27---custom-components",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12597095,
      "blocks": 16,
      "atimeMs": 1528352036081.4326,
      "mtimeMs": 1528351832473.821,
      "ctimeMs": 1528351832473.821,
      "birthtimeMs": 1528351832473.821,
      "atime": "2018-06-07T06:13:56.081Z",
      "mtime": "2018-06-07T06:10:32.474Z",
      "ctime": "2018-06-07T06:10:32.474Z",
      "birthtime": "2018-06-07T06:10:32.474Z",
      "fields": {
        "slug": "/2018-01-27---custom-components/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Algos/data-structures.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Algos/data-structures.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/Algos/data-structures.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "88cdbd32a0f69217264cfa499a0a94f1",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/Algos/data-structures.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Algos/data-structures.md",
      "relativePath": "Algos/data-structures.md",
      "extension": "md",
      "size": 5392,
      "prettySize": "5.39 kB",
      "modifiedTime": "2018-06-08T03:59:03.153Z",
      "accessTime": "2018-06-08T03:59:03.177Z",
      "changeTime": "2018-06-08T03:59:03.153Z",
      "birthTime": "2018-06-08T03:59:03.153Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/Algos",
      "base": "data-structures.md",
      "ext": ".md",
      "name": "data-structures",
      "relativeDirectory": "Algos",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462771,
      "blocks": 16,
      "atimeMs": 1528430343176.8906,
      "mtimeMs": 1528430343152.8906,
      "ctimeMs": 1528430343152.8906,
      "birthtimeMs": 1528430343152.8906,
      "atime": "2018-06-08T03:59:03.177Z",
      "mtime": "2018-06-08T03:59:03.153Z",
      "ctime": "2018-06-08T03:59:03.153Z",
      "birthtime": "2018-06-08T03:59:03.153Z",
      "fields": {
        "slug": "/algos-data-structures/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Algos/index.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Algos/index.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/Algos/index.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "c3ca1e28ef49d4f7cc30c7522956d379",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/Algos/index.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Algos/index.md",
      "relativePath": "Algos/index.md",
      "extension": "md",
      "size": 3448,
      "prettySize": "3.45 kB",
      "modifiedTime": "2018-06-08T03:59:03.153Z",
      "accessTime": "2018-06-08T03:59:03.201Z",
      "changeTime": "2018-06-08T03:59:03.153Z",
      "birthTime": "2018-06-08T03:59:03.153Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/Algos",
      "base": "index.md",
      "ext": ".md",
      "name": "index",
      "relativeDirectory": "Algos",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462775,
      "blocks": 8,
      "atimeMs": 1528430343200.8906,
      "mtimeMs": 1528430343152.8906,
      "ctimeMs": 1528430343152.8906,
      "birthtimeMs": 1528430343152.8906,
      "atime": "2018-06-08T03:59:03.201Z",
      "mtime": "2018-06-08T03:59:03.153Z",
      "ctime": "2018-06-08T03:59:03.153Z",
      "birthtime": "2018-06-08T03:59:03.153Z",
      "fields": {
        "slug": "/algos/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/DBs/index.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/DBs/index.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/DBs/index.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "3d80e82bb2fbdd7b5aee75e685c9c3c1",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/DBs/index.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/DBs/index.md",
      "relativePath": "DBs/index.md",
      "extension": "md",
      "size": 8359,
      "prettySize": "8.36 kB",
      "modifiedTime": "2018-06-08T03:59:03.157Z",
      "accessTime": "2018-06-08T03:59:03.201Z",
      "changeTime": "2018-06-08T03:59:03.157Z",
      "birthTime": "2018-06-08T03:59:03.157Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/DBs",
      "base": "index.md",
      "ext": ".md",
      "name": "index",
      "relativeDirectory": "DBs",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462764,
      "blocks": 24,
      "atimeMs": 1528430343200.8906,
      "mtimeMs": 1528430343156.8906,
      "ctimeMs": 1528430343156.8906,
      "birthtimeMs": 1528430343156.8906,
      "atime": "2018-06-08T03:59:03.201Z",
      "mtime": "2018-06-08T03:59:03.157Z",
      "ctime": "2018-06-08T03:59:03.157Z",
      "birthtime": "2018-06-08T03:59:03.157Z",
      "fields": {
        "slug": "/dbs/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/DevOps/index.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/DevOps/index.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/DevOps/index.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "d901b7f6de5a7b7457f4718a13dc851b",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/DevOps/index.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/DevOps/index.md",
      "relativePath": "DevOps/index.md",
      "extension": "md",
      "size": 5371,
      "prettySize": "5.37 kB",
      "modifiedTime": "2018-06-08T03:59:03.149Z",
      "accessTime": "2018-06-08T03:59:03.201Z",
      "changeTime": "2018-06-08T03:59:03.149Z",
      "birthTime": "2018-06-08T03:59:03.149Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/DevOps",
      "base": "index.md",
      "ext": ".md",
      "name": "index",
      "relativeDirectory": "DevOps",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462765,
      "blocks": 16,
      "atimeMs": 1528430343200.8906,
      "mtimeMs": 1528430343148.8906,
      "ctimeMs": 1528430343148.8906,
      "birthtimeMs": 1528430343148.8906,
      "atime": "2018-06-08T03:59:03.201Z",
      "mtime": "2018-06-08T03:59:03.149Z",
      "ctime": "2018-06-08T03:59:03.149Z",
      "birthtime": "2018-06-08T03:59:03.149Z",
      "fields": {
        "slug": "/devops/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Liferay/component.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/component.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/Liferay/component.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "8e3e1ac85b7fdddb80ab467bd1a03c27",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/Liferay/component.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/component.md",
      "relativePath": "Liferay/component.md",
      "extension": "md",
      "size": 2094,
      "prettySize": "2.09 kB",
      "modifiedTime": "2018-06-08T03:59:03.189Z",
      "accessTime": "2018-06-08T03:59:03.277Z",
      "changeTime": "2018-06-08T03:59:03.189Z",
      "birthTime": "2018-06-08T03:59:03.189Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/Liferay",
      "base": "component.md",
      "ext": ".md",
      "name": "component",
      "relativeDirectory": "Liferay",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462766,
      "blocks": 8,
      "atimeMs": 1528430343276.8906,
      "mtimeMs": 1528430343188.8906,
      "ctimeMs": 1528430343188.8906,
      "birthtimeMs": 1528430343188.8906,
      "atime": "2018-06-08T03:59:03.277Z",
      "mtime": "2018-06-08T03:59:03.189Z",
      "ctime": "2018-06-08T03:59:03.189Z",
      "birthtime": "2018-06-08T03:59:03.189Z",
      "fields": {
        "slug": "/liferay-component/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Liferay/front-end.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/front-end.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/Liferay/front-end.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "e7a15b1946876014a39efdeef74a5be2",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/Liferay/front-end.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/front-end.md",
      "relativePath": "Liferay/front-end.md",
      "extension": "md",
      "size": 11646,
      "prettySize": "11.6 kB",
      "modifiedTime": "2018-06-08T03:59:03.157Z",
      "accessTime": "2018-06-08T03:59:03.201Z",
      "changeTime": "2018-06-08T03:59:03.157Z",
      "birthTime": "2018-06-08T03:59:03.157Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/Liferay",
      "base": "front-end.md",
      "ext": ".md",
      "name": "front-end",
      "relativeDirectory": "Liferay",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462773,
      "blocks": 24,
      "atimeMs": 1528430343200.8906,
      "mtimeMs": 1528430343156.8906,
      "ctimeMs": 1528430343156.8906,
      "birthtimeMs": 1528430343156.8906,
      "atime": "2018-06-08T03:59:03.201Z",
      "mtime": "2018-06-08T03:59:03.157Z",
      "ctime": "2018-06-08T03:59:03.157Z",
      "birthtime": "2018-06-08T03:59:03.157Z",
      "fields": {
        "slug": "/liferay-front-end/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Liferay/index.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/index.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/Liferay/index.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "2a209a66f6393dc8d2882d7246e84b76",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/Liferay/index.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/index.md",
      "relativePath": "Liferay/index.md",
      "extension": "md",
      "size": 1373,
      "prettySize": "1.37 kB",
      "modifiedTime": "2018-06-08T03:59:03.189Z",
      "accessTime": "2018-06-08T03:59:03.277Z",
      "changeTime": "2018-06-08T03:59:03.189Z",
      "birthTime": "2018-06-08T03:59:03.189Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/Liferay",
      "base": "index.md",
      "ext": ".md",
      "name": "index",
      "relativeDirectory": "Liferay",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462776,
      "blocks": 8,
      "atimeMs": 1528430343276.8906,
      "mtimeMs": 1528430343188.8906,
      "ctimeMs": 1528430343188.8906,
      "birthtimeMs": 1528430343188.8906,
      "atime": "2018-06-08T03:59:03.277Z",
      "mtime": "2018-06-08T03:59:03.189Z",
      "ctime": "2018-06-08T03:59:03.189Z",
      "birthtime": "2018-06-08T03:59:03.189Z",
      "fields": {
        "slug": "/liferay/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Liferay/mysql.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/mysql.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/Liferay/mysql.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "4179ac3f641dbde681c1507b0b17da7a",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/Liferay/mysql.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/mysql.md",
      "relativePath": "Liferay/mysql.md",
      "extension": "md",
      "size": 756,
      "prettySize": "756 B",
      "modifiedTime": "2018-06-08T03:59:03.141Z",
      "accessTime": "2018-06-08T03:59:03.201Z",
      "changeTime": "2018-06-08T03:59:03.141Z",
      "birthTime": "2018-06-08T03:59:03.141Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/Liferay",
      "base": "mysql.md",
      "ext": ".md",
      "name": "mysql",
      "relativeDirectory": "Liferay",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462778,
      "blocks": 8,
      "atimeMs": 1528430343200.8906,
      "mtimeMs": 1528430343140.8906,
      "ctimeMs": 1528430343140.8906,
      "birthtimeMs": 1528430343140.8906,
      "atime": "2018-06-08T03:59:03.201Z",
      "mtime": "2018-06-08T03:59:03.141Z",
      "ctime": "2018-06-08T03:59:03.141Z",
      "birthtime": "2018-06-08T03:59:03.141Z",
      "fields": {
        "slug": "/liferay-mysql/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Liferay/templates.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/templates.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/Liferay/templates.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "7ee0bd6051f5d119d64477995e971776",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/Liferay/templates.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/templates.md",
      "relativePath": "Liferay/templates.md",
      "extension": "md",
      "size": 3267,
      "prettySize": "3.27 kB",
      "modifiedTime": "2018-06-08T03:59:03.157Z",
      "accessTime": "2018-06-08T03:59:03.201Z",
      "changeTime": "2018-06-08T03:59:03.157Z",
      "birthTime": "2018-06-08T03:59:03.157Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/Liferay",
      "base": "templates.md",
      "ext": ".md",
      "name": "templates",
      "relativeDirectory": "Liferay",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462780,
      "blocks": 8,
      "atimeMs": 1528430343200.8906,
      "mtimeMs": 1528430343156.8906,
      "ctimeMs": 1528430343156.8906,
      "birthtimeMs": 1528430343156.8906,
      "atime": "2018-06-08T03:59:03.201Z",
      "mtime": "2018-06-08T03:59:03.157Z",
      "ctime": "2018-06-08T03:59:03.157Z",
      "birthtime": "2018-06-08T03:59:03.157Z",
      "fields": {
        "slug": "/liferay-templates/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Linux/actions.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Linux/actions.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/Linux/actions.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "ddfdb9254d5ce6454741048965b912de",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/Linux/actions.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Linux/actions.md",
      "relativePath": "Linux/actions.md",
      "extension": "md",
      "size": 2485,
      "prettySize": "2.48 kB",
      "modifiedTime": "2018-06-08T03:59:03.137Z",
      "accessTime": "2018-06-08T03:59:03.217Z",
      "changeTime": "2018-06-08T03:59:03.137Z",
      "birthTime": "2018-06-08T03:59:03.137Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/Linux",
      "base": "actions.md",
      "ext": ".md",
      "name": "actions",
      "relativeDirectory": "Linux",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462767,
      "blocks": 8,
      "atimeMs": 1528430343216.8906,
      "mtimeMs": 1528430343136.8906,
      "ctimeMs": 1528430343136.8906,
      "birthtimeMs": 1528430343136.8906,
      "atime": "2018-06-08T03:59:03.217Z",
      "mtime": "2018-06-08T03:59:03.137Z",
      "ctime": "2018-06-08T03:59:03.137Z",
      "birthtime": "2018-06-08T03:59:03.137Z",
      "fields": {
        "slug": "/linux-actions/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Linux/index.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Linux/index.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/Linux/index.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "320f2f77bfb7d5075744a7e5137e7b58",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/Linux/index.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Linux/index.md",
      "relativePath": "Linux/index.md",
      "extension": "md",
      "size": 1215,
      "prettySize": "1.22 kB",
      "modifiedTime": "2018-06-08T03:59:03.141Z",
      "accessTime": "2018-06-08T03:59:03.201Z",
      "changeTime": "2018-06-08T03:59:03.141Z",
      "birthTime": "2018-06-08T03:59:03.141Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/Linux",
      "base": "index.md",
      "ext": ".md",
      "name": "index",
      "relativeDirectory": "Linux",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462772,
      "blocks": 8,
      "atimeMs": 1528430343200.8906,
      "mtimeMs": 1528430343140.8906,
      "ctimeMs": 1528430343140.8906,
      "birthtimeMs": 1528430343140.8906,
      "atime": "2018-06-08T03:59:03.201Z",
      "mtime": "2018-06-08T03:59:03.141Z",
      "ctime": "2018-06-08T03:59:03.141Z",
      "birthtime": "2018-06-08T03:59:03.141Z",
      "fields": {
        "slug": "/linux/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Security/index.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Security/index.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/Security/index.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "05f79d9f656ded9ba002e34cbd35440c",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/Security/index.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Security/index.md",
      "relativePath": "Security/index.md",
      "extension": "md",
      "size": 235,
      "prettySize": "235 B",
      "modifiedTime": "2018-06-08T03:59:03.137Z",
      "accessTime": "2018-06-08T03:59:03.217Z",
      "changeTime": "2018-06-08T03:59:03.137Z",
      "birthTime": "2018-06-08T03:59:03.137Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/Security",
      "base": "index.md",
      "ext": ".md",
      "name": "index",
      "relativeDirectory": "Security",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462769,
      "blocks": 8,
      "atimeMs": 1528430343216.8906,
      "mtimeMs": 1528430343136.8906,
      "ctimeMs": 1528430343136.8906,
      "birthtimeMs": 1528430343136.8906,
      "atime": "2018-06-08T03:59:03.217Z",
      "mtime": "2018-06-08T03:59:03.137Z",
      "ctime": "2018-06-08T03:59:03.137Z",
      "birthtime": "2018-06-08T03:59:03.137Z",
      "fields": {
        "slug": "/security/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/avatars/jay.jpg absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/avatars/jay.jpg absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/avatars/jay.jpg absPath of file >> ImageSharp"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "584f423221bf98fe367b9e4de67b8e15",
        "mediaType": "image/jpeg",
        "type": "File",
        "description": "File \"src/pages/avatars/jay.jpg\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/avatars/jay.jpg",
      "relativePath": "avatars/jay.jpg",
      "extension": "jpg",
      "size": 60300,
      "prettySize": "60.3 kB",
      "modifiedTime": "2018-06-07T06:10:32.502Z",
      "accessTime": "2018-06-07T06:13:56.089Z",
      "changeTime": "2018-06-07T06:10:32.502Z",
      "birthTime": "2018-06-07T06:10:32.502Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/avatars",
      "base": "jay.jpg",
      "ext": ".jpg",
      "name": "jay",
      "relativeDirectory": "avatars",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12727949,
      "blocks": 120,
      "atimeMs": 1528352036089.4326,
      "mtimeMs": 1528351832501.821,
      "ctimeMs": 1528351832501.821,
      "birthtimeMs": 1528351832501.821,
      "atime": "2018-06-07T06:13:56.089Z",
      "mtime": "2018-06-07T06:10:32.502Z",
      "ctime": "2018-06-07T06:10:32.502Z",
      "birthtime": "2018-06-07T06:10:32.502Z",
      "fields": {
        "slug": "/avatars-jay/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/async.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/async.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/async.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "7eb03f4c8e84441b273e5e2d85778c0e",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/JavaScript/async.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/async.md",
      "relativePath": "JavaScript/async.md",
      "extension": "md",
      "size": 14042,
      "prettySize": "14 kB",
      "modifiedTime": "2018-06-08T03:59:03.153Z",
      "accessTime": "2018-06-08T03:59:03.201Z",
      "changeTime": "2018-06-08T03:59:03.153Z",
      "birthTime": "2018-06-08T03:59:03.153Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript",
      "base": "async.md",
      "ext": ".md",
      "name": "async",
      "relativeDirectory": "JavaScript",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462770,
      "blocks": 32,
      "atimeMs": 1528430343200.8906,
      "mtimeMs": 1528430343152.8906,
      "ctimeMs": 1528430343152.8906,
      "birthtimeMs": 1528430343152.8906,
      "atime": "2018-06-08T03:59:03.201Z",
      "mtime": "2018-06-08T03:59:03.153Z",
      "ctime": "2018-06-08T03:59:03.153Z",
      "birthtime": "2018-06-08T03:59:03.153Z",
      "fields": {
        "slug": "/javascript-async/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/functional.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/functional.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/functional.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "a85a37d585e8d2978c74b523c596f065",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/JavaScript/functional.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/functional.md",
      "relativePath": "JavaScript/functional.md",
      "extension": "md",
      "size": 2424,
      "prettySize": "2.42 kB",
      "modifiedTime": "2018-06-08T03:59:03.153Z",
      "accessTime": "2018-06-08T03:59:03.201Z",
      "changeTime": "2018-06-08T03:59:03.153Z",
      "birthTime": "2018-06-08T03:59:03.153Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript",
      "base": "functional.md",
      "ext": ".md",
      "name": "functional",
      "relativeDirectory": "JavaScript",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462774,
      "blocks": 8,
      "atimeMs": 1528430343200.8906,
      "mtimeMs": 1528430343152.8906,
      "ctimeMs": 1528430343152.8906,
      "birthtimeMs": 1528430343152.8906,
      "atime": "2018-06-08T03:59:03.201Z",
      "mtime": "2018-06-08T03:59:03.153Z",
      "ctime": "2018-06-08T03:59:03.153Z",
      "birthtime": "2018-06-08T03:59:03.153Z",
      "fields": {
        "slug": "/javascript-functional/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/index.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/index.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/index.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "274df1fc9d01df77b048dbd20d2544b3",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/JavaScript/index.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/index.md",
      "relativePath": "JavaScript/index.md",
      "extension": "md",
      "size": 9407,
      "prettySize": "9.41 kB",
      "modifiedTime": "2018-06-08T03:59:03.141Z",
      "accessTime": "2018-06-08T03:59:03.201Z",
      "changeTime": "2018-06-08T03:59:03.141Z",
      "birthTime": "2018-06-08T03:59:03.141Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript",
      "base": "index.md",
      "ext": ".md",
      "name": "index",
      "relativeDirectory": "JavaScript",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462777,
      "blocks": 24,
      "atimeMs": 1528430343200.8906,
      "mtimeMs": 1528430343140.8906,
      "ctimeMs": 1528430343140.8906,
      "birthtimeMs": 1528430343140.8906,
      "atime": "2018-06-08T03:59:03.201Z",
      "mtime": "2018-06-08T03:59:03.141Z",
      "ctime": "2018-06-08T03:59:03.141Z",
      "birthtime": "2018-06-08T03:59:03.141Z",
      "fields": {
        "slug": "/javascript/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/objectOriented.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/objectOriented.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/objectOriented.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "54e69f502fc879e98c29d429d45e783b",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/JavaScript/objectOriented.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/objectOriented.md",
      "relativePath": "JavaScript/objectOriented.md",
      "extension": "md",
      "size": 9770,
      "prettySize": "9.77 kB",
      "modifiedTime": "2018-06-08T03:59:03.153Z",
      "accessTime": "2018-06-08T03:59:03.201Z",
      "changeTime": "2018-06-08T03:59:03.153Z",
      "birthTime": "2018-06-08T03:59:03.153Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript",
      "base": "objectOriented.md",
      "ext": ".md",
      "name": "objectOriented",
      "relativeDirectory": "JavaScript",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462779,
      "blocks": 24,
      "atimeMs": 1528430343200.8906,
      "mtimeMs": 1528430343152.8906,
      "ctimeMs": 1528430343152.8906,
      "birthtimeMs": 1528430343152.8906,
      "atime": "2018-06-08T03:59:03.201Z",
      "mtime": "2018-06-08T03:59:03.153Z",
      "ctime": "2018-06-08T03:59:03.153Z",
      "birthtime": "2018-06-08T03:59:03.153Z",
      "fields": {
        "slug": "/javascript-objectOriented/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/pro-tips.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/pro-tips.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/pro-tips.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "e6b042f381c4ea8ccaf6d6fecfc8bf03",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/JavaScript/pro-tips.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/pro-tips.md",
      "relativePath": "JavaScript/pro-tips.md",
      "extension": "md",
      "size": 919,
      "prettySize": "919 B",
      "modifiedTime": "2018-06-08T03:59:03.141Z",
      "accessTime": "2018-06-08T03:59:03.201Z",
      "changeTime": "2018-06-08T03:59:03.141Z",
      "birthTime": "2018-06-08T03:59:03.141Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript",
      "base": "pro-tips.md",
      "ext": ".md",
      "name": "pro-tips",
      "relativeDirectory": "JavaScript",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462781,
      "blocks": 8,
      "atimeMs": 1528430343200.8906,
      "mtimeMs": 1528430343140.8906,
      "ctimeMs": 1528430343140.8906,
      "birthtimeMs": 1528430343140.8906,
      "atime": "2018-06-08T03:59:03.201Z",
      "mtime": "2018-06-08T03:59:03.141Z",
      "ctime": "2018-06-08T03:59:03.141Z",
      "birthtime": "2018-06-08T03:59:03.141Z",
      "fields": {
        "slug": "/javascript-pro-tips/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/scope.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/scope.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/scope.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "1792f62fc58a326d6629ddb3bbfe5ee3",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/JavaScript/scope.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/scope.md",
      "relativePath": "JavaScript/scope.md",
      "extension": "md",
      "size": 6283,
      "prettySize": "6.28 kB",
      "modifiedTime": "2018-06-08T03:59:03.141Z",
      "accessTime": "2018-06-08T03:59:03.201Z",
      "changeTime": "2018-06-08T03:59:03.141Z",
      "birthTime": "2018-06-08T03:59:03.141Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript",
      "base": "scope.md",
      "ext": ".md",
      "name": "scope",
      "relativeDirectory": "JavaScript",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462782,
      "blocks": 16,
      "atimeMs": 1528430343200.8906,
      "mtimeMs": 1528430343140.8906,
      "ctimeMs": 1528430343140.8906,
      "birthtimeMs": 1528430343140.8906,
      "atime": "2018-06-08T03:59:03.201Z",
      "mtime": "2018-06-08T03:59:03.141Z",
      "ctime": "2018-06-08T03:59:03.141Z",
      "birthtime": "2018-06-08T03:59:03.141Z",
      "fields": {
        "slug": "/javascript-scope/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/typescript.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/typescript.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/typescript.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "2bd2db18a0a6c7d975606f994943a772",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/JavaScript/typescript.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/typescript.md",
      "relativePath": "JavaScript/typescript.md",
      "extension": "md",
      "size": 2666,
      "prettySize": "2.67 kB",
      "modifiedTime": "2018-06-08T03:59:03.141Z",
      "accessTime": "2018-06-08T03:59:03.201Z",
      "changeTime": "2018-06-08T03:59:03.141Z",
      "birthTime": "2018-06-08T03:59:03.141Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript",
      "base": "typescript.md",
      "ext": ".md",
      "name": "typescript",
      "relativeDirectory": "JavaScript",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462783,
      "blocks": 8,
      "atimeMs": 1528430343200.8906,
      "mtimeMs": 1528430343140.8906,
      "ctimeMs": 1528430343140.8906,
      "birthtimeMs": 1528430343140.8906,
      "atime": "2018-06-08T03:59:03.201Z",
      "mtime": "2018-06-08T03:59:03.141Z",
      "ctime": "2018-06-08T03:59:03.141Z",
      "birthtime": "2018-06-08T03:59:03.141Z",
      "fields": {
        "slug": "/javascript-typescript/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/examples/example---custom-separator/index.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/examples/example---custom-separator/index.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/examples/example---custom-separator/index.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "a2ff3c98b31384efcb05bb8bc0eedf97",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/examples/example---custom-separator/index.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/examples/example---custom-separator/index.md",
      "relativePath": "examples/example---custom-separator/index.md",
      "extension": "md",
      "size": 772,
      "prettySize": "772 B",
      "modifiedTime": "2018-06-07T06:10:32.534Z",
      "accessTime": "2018-06-07T06:13:56.097Z",
      "changeTime": "2018-06-07T06:10:32.534Z",
      "birthTime": "2018-06-07T06:10:32.534Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/examples/example---custom-separator",
      "base": "index.md",
      "ext": ".md",
      "name": "index",
      "relativeDirectory": "examples/example---custom-separator",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12727952,
      "blocks": 8,
      "atimeMs": 1528352036097.4326,
      "mtimeMs": 1528351832533.821,
      "ctimeMs": 1528351832533.821,
      "birthtimeMs": 1528351832533.821,
      "atime": "2018-06-07T06:13:56.097Z",
      "mtime": "2018-06-07T06:10:32.534Z",
      "ctime": "2018-06-07T06:10:32.534Z",
      "birthtime": "2018-06-07T06:10:32.534Z",
      "fields": {
        "slug": "/example---custom-separator/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/examples/example---no-separator/index.md absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/examples/example---no-separator/index.md absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/examples/example---no-separator/index.md absPath of file >>> MarkdownRemark"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "b3884cdbdbf11ad8019f8b796f9c7622",
        "mediaType": "text/markdown",
        "type": "File",
        "description": "File \"src/pages/examples/example---no-separator/index.md\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/examples/example---no-separator/index.md",
      "relativePath": "examples/example---no-separator/index.md",
      "extension": "md",
      "size": 467,
      "prettySize": "467 B",
      "modifiedTime": "2018-06-07T06:10:32.538Z",
      "accessTime": "2018-06-07T06:13:56.101Z",
      "changeTime": "2018-06-07T06:10:32.538Z",
      "birthTime": "2018-06-07T06:10:32.538Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/examples/example---no-separator",
      "base": "index.md",
      "ext": ".md",
      "name": "index",
      "relativeDirectory": "examples/example---no-separator",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12727954,
      "blocks": 8,
      "atimeMs": 1528352036101.4326,
      "mtimeMs": 1528351832537.821,
      "ctimeMs": 1528351832537.821,
      "birthtimeMs": 1528351832537.821,
      "atime": "2018-06-07T06:13:56.101Z",
      "mtime": "2018-06-07T06:10:32.538Z",
      "ctime": "2018-06-07T06:10:32.538Z",
      "birthtime": "2018-06-07T06:10:32.538Z",
      "fields": {
        "slug": "/example---no-separator/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/144-density.jpg absPath of file >> ImageSharp": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/144-density.jpg absPath of file >> ImageSharp",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/144-density.jpg absPath of file",
      "internal": {
        "contentDigest": "e1c8bc91f7f9fbed494f3edd10b6de41",
        "type": "ImageSharp",
        "owner": "gatsby-transformer-sharp"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/avatars/jay.jpg absPath of file >> ImageSharp": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/avatars/jay.jpg absPath of file >> ImageSharp",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/avatars/jay.jpg absPath of file",
      "internal": {
        "contentDigest": "584f423221bf98fe367b9e4de67b8e15",
        "type": "ImageSharp",
        "owner": "gatsby-transformer-sharp"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/awesome_tiger.svg absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/awesome_tiger.svg absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "0c516690791b1b0e0af94616b1b6883d",
        "mediaType": "image/svg+xml",
        "type": "File",
        "description": "File \"src/pages/2017-01-02---responsive-images-and-iframes/awesome_tiger.svg\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/awesome_tiger.svg",
      "relativePath": "2017-01-02---responsive-images-and-iframes/awesome_tiger.svg",
      "extension": "svg",
      "size": 86486,
      "prettySize": "86.5 kB",
      "modifiedTime": "2018-06-07T06:10:26.934Z",
      "accessTime": "2018-06-07T06:13:53.993Z",
      "changeTime": "2018-06-07T06:10:26.938Z",
      "birthTime": "2018-06-07T06:10:26.938Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes",
      "base": "awesome_tiger.svg",
      "ext": ".svg",
      "name": "awesome_tiger",
      "relativeDirectory": "2017-01-02---responsive-images-and-iframes",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12597076,
      "blocks": 176,
      "atimeMs": 1528352033993.436,
      "mtimeMs": 1528351826933.8337,
      "ctimeMs": 1528351826937.8337,
      "birthtimeMs": 1528351826937.8337,
      "atime": "2018-06-07T06:13:53.993Z",
      "mtime": "2018-06-07T06:10:26.934Z",
      "ctime": "2018-06-07T06:10:26.938Z",
      "birthtime": "2018-06-07T06:10:26.938Z",
      "fields": {
        "slug": "/2017-01-02---responsive-images-and-iframes-awesome_tiger/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/avatars/daisy.jpg absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/avatars/daisy.jpg absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/avatars/daisy.jpg absPath of file >> ImageSharp"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "d286acdd98800790ea1bbdddbc982962",
        "mediaType": "image/jpeg",
        "type": "File",
        "description": "File \"src/pages/avatars/daisy.jpg\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/avatars/daisy.jpg",
      "relativePath": "avatars/daisy.jpg",
      "extension": "jpg",
      "size": 87678,
      "prettySize": "87.7 kB",
      "modifiedTime": "2018-06-07T06:10:32.498Z",
      "accessTime": "2018-06-07T06:13:56.081Z",
      "changeTime": "2018-06-07T06:10:32.502Z",
      "birthTime": "2018-06-07T06:10:32.502Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/avatars",
      "base": "daisy.jpg",
      "ext": ".jpg",
      "name": "daisy",
      "relativeDirectory": "avatars",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12727948,
      "blocks": 176,
      "atimeMs": 1528352036081.4326,
      "mtimeMs": 1528351832497.821,
      "ctimeMs": 1528351832501.821,
      "birthtimeMs": 1528351832501.821,
      "atime": "2018-06-07T06:13:56.081Z",
      "mtime": "2018-06-07T06:10:32.498Z",
      "ctime": "2018-06-07T06:10:32.502Z",
      "birthtime": "2018-06-07T06:10:32.502Z",
      "fields": {
        "slug": "/avatars-daisy/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/avatars/daisy.jpg absPath of file >> ImageSharp": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/avatars/daisy.jpg absPath of file >> ImageSharp",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/avatars/daisy.jpg absPath of file",
      "internal": {
        "contentDigest": "d286acdd98800790ea1bbdddbc982962",
        "type": "ImageSharp",
        "owner": "gatsby-transformer-sharp"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2016-04-15---hello-world-kitchen-sink/index.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2016-04-15---hello-world-kitchen-sink/index.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/2016-04-15---hello-world-kitchen-sink/index.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"Hello World: The remark Kitchen Sink\"\ndate: \"2016-04-15\"\ndraft: false\nauthor: Jay Gatsby\ntags:\n  - remark\n  - Kitchen Sink\n  - Images\n---\n\n![](joshua-earle-234740.jpg) _Photo by\n[Joshua Earle](https://unsplash.com/@joshuaearle) via\n[Unsplash](https://unsplash.com/@joshuaearle?photo=-87JyMb9ZfU)_\n\n**_Note how all headlines below show an anchor link when you hover them?_**\\\nThat's [gatsby-remark-autolink-headers][5] hooking up all `MarkdownRemark` headers\nwith anchor links for us.\n\n## Markdown in Gatsby\n\nMarkdown parsing in Gatsby is done with [gatsby-transformer-remark][1], which\nuses the excellent [remark][2] under the hood.\\\nAlongside remark we also use [gatsby-remark-smartypants][6], which provides smart\npunctuation through [retext-smartypants][7].\n\nThe examples on this page cover the basic Markdown syntax and are adapted from\n[Markdown Here's Cheatsheet][3] ([CC-BY][4]).\n\n---\n\nThis is intended as a quick reference and showcase. For more complete info, see\n[John Gruber's original spec](http://daringfireball.net/projects/markdown/) and\nthe\n[GitHub-flavored Markdown info page](http://github.github.com/github-flavored-markdown/).\n\n##### Table of Contents\n\n[Headers](#headers) [Emphasis](#emphasis) [Lists](#lists) [Links](#links)\n[Images](#images) [Tables](#tables) [Footnotes](#footnotes)\n[Blockquotes](#blockquotes) [Inline HTML](#html) [Horizontal Rule](#hr)\n[Line Breaks](#lines)\n\n<a name=\"headers\"></a>\n\n## Headers\n\n```no-highlight\n# H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n\nAlternatively, for H1 and H2, an underline-ish style:\n\nAlt-H1\n======\n\nAlt-H2\n------\n```\n\n# H1\n\n## H2\n\n### H3\n\n#### H4\n\n##### H5\n\n###### H6\n\nAlternatively, for H1 and H2, an underline-ish style:\n\n# Alt-H1\n\n## Alt-H2\n\n<a name=\"emphasis\"></a>\n\n## Emphasis\n\n```no-highlight\nEmphasis, aka italics, with *asterisks* or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n```\n\nEmphasis, aka italics, with _asterisks_ or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or **underscores**.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n\n<a name=\"lists\"></a>\n\n## Lists\n\nIn this example, leading and trailing spaces are shown with with dots: ⋅\n\n```no-highlight\n1. First ordered list item\n2. Another item\n⋅⋅⋅* Unordered sub-list.\n1. Actual numbers don't matter, just that it's a number\n⋅⋅⋅1. Ordered sub-list\n4. And another item.\n\n⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅\n⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅\n\n* Unordered list can use asterisks\n- Or minuses\n+ Or pluses\n```\n\n1.  First ordered list item\n2.  Another item\n    * Unordered sub-list.\n3.  Actual numbers don't matter, just that it's a number\n    1.  Ordered sub-list\n4.  And another item.\n\nYou can have properly indented paragraphs within list items. Notice the blank\nline above, and the leading spaces (at least one, but we'll use three here to\nalso align the raw Markdown).\n\nTo have a line break without a paragraph, you will need to use two trailing\nspaces.\\\n Note that this line is separate, but within the same paragraph.\n\n* Unordered list can use asterisks\n\n- Or minuses\n\n* Or pluses\n\n<a name=\"links\"></a>\n\n## Links\n\nThere are two ways to create links.\n\n```no-highlight\n[I'm an inline-style link](https://www.google.com)\n\n[I'm an inline-style link with title](https://www.google.com \"Google's Homepage\")\n\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs and URLs in angle brackets will automatically get turned into links.\nhttp://www.example.com or <http://www.example.com> and sometimes\nexample.com (but not on GitHub, for example).\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com\n```\n\n[I'm an inline-style link](https://www.google.com)\n\n[I'm an inline-style link with title](https://www.google.com \"Google's Homepage\")\n\n[I'm a reference-style link][arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs and URLs in angle brackets will automatically get turned into links.\nhttp://www.example.com or <http://www.example.com> and sometimes example.com\n(but not on GitHub, for example).\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com\n\n<a name=\"images\"></a>\n\n## Images\n\n```no-highlight\nHere's our logo (hover to see the title text):\n\nInline-style:\n![alt text](https://pbs.twimg.com/profile_images/875556871427375106/Xuq8DypK_bigger.jpg \"Logo Title Text 1\")\n\nReference-style:\n![alt text][logo]\n\n[logo]: https://pbs.twimg.com/profile_images/875556871427375106/Xuq8DypK_bigger.jpg \"Logo Title Text 2\"\n```\n\nHere's our logo (hover to see the title text):\n\nInline-style:\n![alt text](https://pbs.twimg.com/profile_images/875556871427375106/Xuq8DypK_bigger.jpg \"Logo Title Text 1\")\n\nReference-style: ![alt text][logo]\n\n[logo]: https://pbs.twimg.com/profile_images/875556871427375106/Xuq8DypK_bigger.jpg \"Logo Title Text 2\"\n\n<a name=\"tables\"></a>\n\n## Tables\n\nTables aren't part of the core Markdown spec, but they are part of our\nimplementation. They are an easy way of adding tables to your email -- a task\nthat would otherwise require copy-pasting from another application.\n\n```no-highlight\nColons can be used to align columns.\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\nThere must be at least 3 dashes separating each header cell.\nThe outer pipes (|) are optional, and you don't need to make the\nraw Markdown line up prettily. You can also use inline Markdown.\n\nMarkdown | Less | Pretty\n--- | --- | ---\n*Still* | `renders` | **nicely**\n1 | 2 | 3\n```\n\nColons can be used to align columns.\n\n| Tables        |      Are      |  Cool |\n| ------------- | :-----------: | ----: |\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      |   centered    |   $12 |\n| zebra stripes |   are neat    |    $1 |\n\nThere must be at least 3 dashes separating each header cell. The outer pipes (|)\nare optional, and you don't need to make the raw Markdown line up prettily. You\ncan also use inline Markdown.\n\n| Markdown | Less      | Pretty     |\n| -------- | --------- | ---------- |\n| _Still_  | `renders` | **nicely** |\n| 1        | 2         | 3          |\n\n<a name=\"footnotes\"></a>\n\n## Footnotes\n\nFootnotes are also not a core feature of markdown, but they're a common\nextension feature. The footnote syntax looks like this:\n\n```markdown\nThis line has a footnote [^1]. Scroll down or click the link to see it.\n```\n\nThat renders like this:\n\nThis line has a footnote [^1]. Scroll down or click the link to see it.\n\n<a name=\"blockquotes\"></a>\n\n## Blockquotes\n\n```no-highlight\n> Blockquotes are very handy in email to emulate reply text.\n> This line is part of the same quote.\n\nQuote break.\n\n> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.\n```\n\n> Blockquotes are very handy in email to emulate reply text. This line is part\n> of the same quote.\n\nQuote break.\n\n> This is a very long line that will still be quoted properly when it wraps. Oh\n> boy let's keep writing to make sure this is long enough to actually wrap for\n> everyone. Oh, you can _put_ **Markdown** into a blockquote.\n\n<a name=\"html\"></a>\n\n## Inline HTML\n\nYou can also use raw HTML in your Markdown, and it'll mostly work pretty well.\n\n```html\n<dl>\n  <dt>Definition list</dt>\n  <dd>Is something people use sometimes.</dd>\n\n  <dt>Markdown in HTML</dt>\n  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>\n</dl>\n```\n\n<dl>\n  <dt>Definition list</dt>\n  <dd>Is something people use sometimes.</dd>\n\n  <dt>Markdown in HTML</dt>\n  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>\n</dl>\n\n<a name=\"hr\"></a>\n\n## Horizontal Rule\n\n```\nThree or more...\n\n---\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores\n```\n\nThree or more...\n\n---\n\nHyphens\n\n---\n\nAsterisks\n\n---\n\nUnderscores\n\n<a name=\"lines\"></a>\n\n## Line Breaks\n\nHere are some things to try out:\n\n```\nHere's a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\n\nThis line is also a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the *same paragraph*.\n```\n\nHere's a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a\n_separate paragraph_.\n\nThis line is also begins a separate paragraph, but...\\\nThis line is only separated by a single newline, so it's a separate line in the _same\nparagraph_.\n\n[^1]: The footnote appears at the bottom of the page\n\n[1]: https://www.gatsbyjs.org/packages/gatsby-transformer-remark/\n[2]: http://remark.js.org/\n[3]: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\n[4]: https://creativecommons.org/licenses/by/3.0/\n[5]: https://www.gatsbyjs.org/packages/gatsby-remark-autolink-headers/\n[6]: https://www.gatsbyjs.org/packages/gatsby-remark-smartypants/\n[7]: https://github.com/wooorm/retext-smartypants\n",
        "type": "MarkdownRemark",
        "contentDigest": "23cd11166abd31626254b30e7b06f795",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin",
          "tagSlugs": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Hello World: The remark Kitchen Sink",
        "date": "2016-04-15",
        "draft": false,
        "author": "Jay Gatsby",
        "tags": [
          "remark",
          "Kitchen Sink",
          "Images"
        ],
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/2016-04-15---hello-world-kitchen-sink/index.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/2016-04-15---hello-world-kitchen-sink/index.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n![](joshua-earle-234740.jpg) _Photo by\n[Joshua Earle](https://unsplash.com/@joshuaearle) via\n[Unsplash](https://unsplash.com/@joshuaearle?photo=-87JyMb9ZfU)_\n\n**_Note how all headlines below show an anchor link when you hover them?_**\\\nThat's [gatsby-remark-autolink-headers][5] hooking up all `MarkdownRemark` headers\nwith anchor links for us.\n\n## Markdown in Gatsby\n\nMarkdown parsing in Gatsby is done with [gatsby-transformer-remark][1], which\nuses the excellent [remark][2] under the hood.\\\nAlongside remark we also use [gatsby-remark-smartypants][6], which provides smart\npunctuation through [retext-smartypants][7].\n\nThe examples on this page cover the basic Markdown syntax and are adapted from\n[Markdown Here's Cheatsheet][3] ([CC-BY][4]).\n\n---\n\nThis is intended as a quick reference and showcase. For more complete info, see\n[John Gruber's original spec](http://daringfireball.net/projects/markdown/) and\nthe\n[GitHub-flavored Markdown info page](http://github.github.com/github-flavored-markdown/).\n\n##### Table of Contents\n\n[Headers](#headers) [Emphasis](#emphasis) [Lists](#lists) [Links](#links)\n[Images](#images) [Tables](#tables) [Footnotes](#footnotes)\n[Blockquotes](#blockquotes) [Inline HTML](#html) [Horizontal Rule](#hr)\n[Line Breaks](#lines)\n\n<a name=\"headers\"></a>\n\n## Headers\n\n```no-highlight\n# H1\n## H2\n### H3\n#### H4\n##### H5\n###### H6\n\nAlternatively, for H1 and H2, an underline-ish style:\n\nAlt-H1\n======\n\nAlt-H2\n------\n```\n\n# H1\n\n## H2\n\n### H3\n\n#### H4\n\n##### H5\n\n###### H6\n\nAlternatively, for H1 and H2, an underline-ish style:\n\n# Alt-H1\n\n## Alt-H2\n\n<a name=\"emphasis\"></a>\n\n## Emphasis\n\n```no-highlight\nEmphasis, aka italics, with *asterisks* or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n```\n\nEmphasis, aka italics, with _asterisks_ or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or **underscores**.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n\n<a name=\"lists\"></a>\n\n## Lists\n\nIn this example, leading and trailing spaces are shown with with dots: ⋅\n\n```no-highlight\n1. First ordered list item\n2. Another item\n⋅⋅⋅* Unordered sub-list.\n1. Actual numbers don't matter, just that it's a number\n⋅⋅⋅1. Ordered sub-list\n4. And another item.\n\n⋅⋅⋅You can have properly indented paragraphs within list items. Notice the blank line above, and the leading spaces (at least one, but we'll use three here to also align the raw Markdown).\n\n⋅⋅⋅To have a line break without a paragraph, you will need to use two trailing spaces.⋅⋅\n⋅⋅⋅Note that this line is separate, but within the same paragraph.⋅⋅\n\n* Unordered list can use asterisks\n- Or minuses\n+ Or pluses\n```\n\n1.  First ordered list item\n2.  Another item\n    * Unordered sub-list.\n3.  Actual numbers don't matter, just that it's a number\n    1.  Ordered sub-list\n4.  And another item.\n\nYou can have properly indented paragraphs within list items. Notice the blank\nline above, and the leading spaces (at least one, but we'll use three here to\nalso align the raw Markdown).\n\nTo have a line break without a paragraph, you will need to use two trailing\nspaces.\\\n Note that this line is separate, but within the same paragraph.\n\n* Unordered list can use asterisks\n\n- Or minuses\n\n* Or pluses\n\n<a name=\"links\"></a>\n\n## Links\n\nThere are two ways to create links.\n\n```no-highlight\n[I'm an inline-style link](https://www.google.com)\n\n[I'm an inline-style link with title](https://www.google.com \"Google's Homepage\")\n\n[I'm a reference-style link][Arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs and URLs in angle brackets will automatically get turned into links.\nhttp://www.example.com or <http://www.example.com> and sometimes\nexample.com (but not on GitHub, for example).\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com\n```\n\n[I'm an inline-style link](https://www.google.com)\n\n[I'm an inline-style link with title](https://www.google.com \"Google's Homepage\")\n\n[I'm a reference-style link][arbitrary case-insensitive reference text]\n\n[I'm a relative reference to a repository file](../blob/master/LICENSE)\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself].\n\nURLs and URLs in angle brackets will automatically get turned into links.\nhttp://www.example.com or <http://www.example.com> and sometimes example.com\n(but not on GitHub, for example).\n\nSome text to show that the reference links can follow later.\n\n[arbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com\n\n<a name=\"images\"></a>\n\n## Images\n\n```no-highlight\nHere's our logo (hover to see the title text):\n\nInline-style:\n![alt text](https://pbs.twimg.com/profile_images/875556871427375106/Xuq8DypK_bigger.jpg \"Logo Title Text 1\")\n\nReference-style:\n![alt text][logo]\n\n[logo]: https://pbs.twimg.com/profile_images/875556871427375106/Xuq8DypK_bigger.jpg \"Logo Title Text 2\"\n```\n\nHere's our logo (hover to see the title text):\n\nInline-style:\n![alt text](https://pbs.twimg.com/profile_images/875556871427375106/Xuq8DypK_bigger.jpg \"Logo Title Text 1\")\n\nReference-style: ![alt text][logo]\n\n[logo]: https://pbs.twimg.com/profile_images/875556871427375106/Xuq8DypK_bigger.jpg \"Logo Title Text 2\"\n\n<a name=\"tables\"></a>\n\n## Tables\n\nTables aren't part of the core Markdown spec, but they are part of our\nimplementation. They are an easy way of adding tables to your email -- a task\nthat would otherwise require copy-pasting from another application.\n\n```no-highlight\nColons can be used to align columns.\n\n| Tables        | Are           | Cool  |\n| ------------- |:-------------:| -----:|\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      | centered      |   $12 |\n| zebra stripes | are neat      |    $1 |\n\nThere must be at least 3 dashes separating each header cell.\nThe outer pipes (|) are optional, and you don't need to make the\nraw Markdown line up prettily. You can also use inline Markdown.\n\nMarkdown | Less | Pretty\n--- | --- | ---\n*Still* | `renders` | **nicely**\n1 | 2 | 3\n```\n\nColons can be used to align columns.\n\n| Tables        |      Are      |  Cool |\n| ------------- | :-----------: | ----: |\n| col 3 is      | right-aligned | $1600 |\n| col 2 is      |   centered    |   $12 |\n| zebra stripes |   are neat    |    $1 |\n\nThere must be at least 3 dashes separating each header cell. The outer pipes (|)\nare optional, and you don't need to make the raw Markdown line up prettily. You\ncan also use inline Markdown.\n\n| Markdown | Less      | Pretty     |\n| -------- | --------- | ---------- |\n| _Still_  | `renders` | **nicely** |\n| 1        | 2         | 3          |\n\n<a name=\"footnotes\"></a>\n\n## Footnotes\n\nFootnotes are also not a core feature of markdown, but they're a common\nextension feature. The footnote syntax looks like this:\n\n```markdown\nThis line has a footnote [^1]. Scroll down or click the link to see it.\n```\n\nThat renders like this:\n\nThis line has a footnote [^1]. Scroll down or click the link to see it.\n\n<a name=\"blockquotes\"></a>\n\n## Blockquotes\n\n```no-highlight\n> Blockquotes are very handy in email to emulate reply text.\n> This line is part of the same quote.\n\nQuote break.\n\n> This is a very long line that will still be quoted properly when it wraps. Oh boy let's keep writing to make sure this is long enough to actually wrap for everyone. Oh, you can *put* **Markdown** into a blockquote.\n```\n\n> Blockquotes are very handy in email to emulate reply text. This line is part\n> of the same quote.\n\nQuote break.\n\n> This is a very long line that will still be quoted properly when it wraps. Oh\n> boy let's keep writing to make sure this is long enough to actually wrap for\n> everyone. Oh, you can _put_ **Markdown** into a blockquote.\n\n<a name=\"html\"></a>\n\n## Inline HTML\n\nYou can also use raw HTML in your Markdown, and it'll mostly work pretty well.\n\n```html\n<dl>\n  <dt>Definition list</dt>\n  <dd>Is something people use sometimes.</dd>\n\n  <dt>Markdown in HTML</dt>\n  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>\n</dl>\n```\n\n<dl>\n  <dt>Definition list</dt>\n  <dd>Is something people use sometimes.</dd>\n\n  <dt>Markdown in HTML</dt>\n  <dd>Does *not* work **very** well. Use HTML <em>tags</em>.</dd>\n</dl>\n\n<a name=\"hr\"></a>\n\n## Horizontal Rule\n\n```\nThree or more...\n\n---\n\nHyphens\n\n***\n\nAsterisks\n\n___\n\nUnderscores\n```\n\nThree or more...\n\n---\n\nHyphens\n\n---\n\nAsterisks\n\n---\n\nUnderscores\n\n<a name=\"lines\"></a>\n\n## Line Breaks\n\nHere are some things to try out:\n\n```\nHere's a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a *separate paragraph*.\n\nThis line is also a separate paragraph, but...\nThis line is only separated by a single newline, so it's a separate line in the *same paragraph*.\n```\n\nHere's a line for us to start with.\n\nThis line is separated from the one above by two newlines, so it will be a\n_separate paragraph_.\n\nThis line is also begins a separate paragraph, but...\\\nThis line is only separated by a single newline, so it's a separate line in the _same\nparagraph_.\n\n[^1]: The footnote appears at the bottom of the page\n\n[1]: https://www.gatsbyjs.org/packages/gatsby-transformer-remark/\n[2]: http://remark.js.org/\n[3]: https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet\n[4]: https://creativecommons.org/licenses/by/3.0/\n[5]: https://www.gatsbyjs.org/packages/gatsby-remark-autolink-headers/\n[6]: https://www.gatsbyjs.org/packages/gatsby-remark-smartypants/\n[7]: https://github.com/wooorm/retext-smartypants\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2016-04-15---hello-world-kitchen-sink/index.md",
      "fields": {
        "slug": "/2016-04-15---hello-world-kitchen-sink/",
        "tagSlugs": [
          "/tags/remark/",
          "/tags/kitchen-sink/",
          "/tags/images/"
        ]
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links/index.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links/index.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links/index.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"Copying Linked Files and Intercepting Local Links\"\ndate: \"2017-03-21\"\ndraft: false\nauthor: Daisy Buchanan\ntags:\n  - remark\n  - linked files\n  - local links\n---\n\n![](denys-nevozhai-184452.jpg) _Photo by\n[Denys Nevozhai](https://unsplash.com/@dnevozhai) via\n[Unsplash](https://unsplash.com/@dnevozhai?photo=DlnK1KOREds)_\n\n## Copying Linked Files\n\n[gatsby-remark-copy-linked-files][1] copies files linked to from Markdown to\nyour `public` folder.\n\nLet's try with a PDF, that you should be able to preview and/or download by\nclicking this link:\n[Creative Commons Informational Flyer.pdf](Creativecommons-informational-flyer_eng.pdf)\n\n## Intercepting Local Links\n\n[gatsby-plugin-catch-links][2] intercepts local links from Markdown and other\nnon-react pages and does a client-side `pushState` to avoid the browser having\nto refresh the page.\n\nLet's try linking to the\n\"[Code and Syntax Highlighting with PrismJS](/code-and-syntax-highlighting/)\"\narticle…\n\n[1]: https://www.gatsbyjs.org/packages/gatsby-remark-copy-linked-files/\n[2]: https://www.gatsbyjs.org/packages/gatsby-plugin-catch-links/\n",
        "type": "MarkdownRemark",
        "contentDigest": "1bfef1d1e1c5563454259ee3c4844114",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin",
          "tagSlugs": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Copying Linked Files and Intercepting Local Links",
        "date": "2017-03-21",
        "draft": false,
        "author": "Daisy Buchanan",
        "tags": [
          "remark",
          "linked files",
          "local links"
        ],
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links/index.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links/index.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n![](denys-nevozhai-184452.jpg) _Photo by\n[Denys Nevozhai](https://unsplash.com/@dnevozhai) via\n[Unsplash](https://unsplash.com/@dnevozhai?photo=DlnK1KOREds)_\n\n## Copying Linked Files\n\n[gatsby-remark-copy-linked-files][1] copies files linked to from Markdown to\nyour `public` folder.\n\nLet's try with a PDF, that you should be able to preview and/or download by\nclicking this link:\n[Creative Commons Informational Flyer.pdf](Creativecommons-informational-flyer_eng.pdf)\n\n## Intercepting Local Links\n\n[gatsby-plugin-catch-links][2] intercepts local links from Markdown and other\nnon-react pages and does a client-side `pushState` to avoid the browser having\nto refresh the page.\n\nLet's try linking to the\n\"[Code and Syntax Highlighting with PrismJS](/code-and-syntax-highlighting/)\"\narticle…\n\n[1]: https://www.gatsbyjs.org/packages/gatsby-remark-copy-linked-files/\n[2]: https://www.gatsbyjs.org/packages/gatsby-plugin-catch-links/\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links/index.md",
      "fields": {
        "slug": "/2017-03-21---copy-linked-files-intercepting-local-links/",
        "tagSlugs": [
          "/tags/remark/",
          "/tags/linked-files/",
          "/tags/local-links/"
        ]
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-08-07---katex/index.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-08-07---katex/index.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/2017-08-07---katex/index.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"Rendering math equations with KaTeX\"\ndate: \"2017-08-07\"\ndraft: false\nauthor: Daisy Buchanan\ntags:\n  - remark\n  - math\n  - KaTeX\n---\n\n[gatsby-remark-katex][1] adds math equation support to gatsby using\n[remark-math][2] and [katex][3].\n\n## Math Equations in Inline Mode\n\nSurround your equation with `$` to generate a math equation in inline mode.\n\n**Example markdown:**\n\n```\n$a^2 + b^2 = c^2$\n```\n\n**Example output:** $a^2 + b^2 = c^2$\n\n## Math Equations in Display Mode\n\nSurround your equation with `$$` and new-lines to generate a math equation in\ndisplay mode.\n\n**Example markdown:**\n\n```\n$$\na^2 + b^2 = c^2\n$$\n```\n\n**Example output:**\n$$\na^2 + b^2 = c^2\n$$\n\n**Add Katex CSS to your template** Katex's CSS file is required to render the\nformulas correctly. Include the CSS file in your template ([example][4])\n\n```\nrequire(`katex/dist/katex.min.css`)\n```\n\n[1]: https://www.gatsbyjs.org/packages/gatsby-remark-katex/\n[2]: https://github.com/Rokt33r/remark-math\n[3]: https://github.com/Khan/KaTeX\n[4]: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/templates/template-blog-post.js\n",
        "type": "MarkdownRemark",
        "contentDigest": "1f59b87cf8319254d549ce5fdfa2edb9",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin",
          "tagSlugs": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Rendering math equations with KaTeX",
        "date": "2017-08-07",
        "draft": false,
        "author": "Daisy Buchanan",
        "tags": [
          "remark",
          "math",
          "KaTeX"
        ],
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/2017-08-07---katex/index.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/2017-08-07---katex/index.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n[gatsby-remark-katex][1] adds math equation support to gatsby using\n[remark-math][2] and [katex][3].\n\n## Math Equations in Inline Mode\n\nSurround your equation with `$` to generate a math equation in inline mode.\n\n**Example markdown:**\n\n```\n$a^2 + b^2 = c^2$\n```\n\n**Example output:** $a^2 + b^2 = c^2$\n\n## Math Equations in Display Mode\n\nSurround your equation with `$$` and new-lines to generate a math equation in\ndisplay mode.\n\n**Example markdown:**\n\n```\n$$\na^2 + b^2 = c^2\n$$\n```\n\n**Example output:**\n$$\na^2 + b^2 = c^2\n$$\n\n**Add Katex CSS to your template** Katex's CSS file is required to render the\nformulas correctly. Include the CSS file in your template ([example][4])\n\n```\nrequire(`katex/dist/katex.min.css`)\n```\n\n[1]: https://www.gatsbyjs.org/packages/gatsby-remark-katex/\n[2]: https://github.com/Rokt33r/remark-math\n[3]: https://github.com/Khan/KaTeX\n[4]: https://github.com/gatsbyjs/gatsby/blob/master/examples/using-remark/src/templates/template-blog-post.js\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-08-07---katex/index.md",
      "fields": {
        "slug": "/2017-08-07---katex/",
        "tagSlugs": [
          "/tags/remark/",
          "/tags/math/",
          "/tags/ka-te-x/"
        ]
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/index.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/index.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/index.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"Responsive Images and iFrames\"\ndate: \"2017-01-02\"\ndraft: false\nauthor: Jay Gatsby\ntags:\n  - remark\n  - Images\n  - Videos\n  - iFrames\n---\n\n![](mikael-cho-214358.jpg) _Photo by [Mikael Cho](https://unsplash.com/@mikael)\nvia [Unsplash](https://unsplash.com/@mikael?photo=_3TDkAttcaM)_\n\n[gatsby-remark-images][1] and [gatsby-remark-responsive-iframe][2] are here to\ntake care of all your basic Markdown image and iframe issues.\n\n## Images\n\n[gatsby-remark-images][1] provides _out-of-the-box progressive image loading_\n(as popularized by [Medium][3] and [Facebook][4]) for all local JPGs and PNGs in\nyour Markdown documents.\n\nYou aren't just limited to markdown image tags either. You can either use\nmarkdown image tags:\n\n```\n![](image.png)\n```\n\nOr HTML image tags:\n\n```\n&lt;img src=\"image.png\" alt=\"\"&gt;\n```\n\nLet's see some more photos by\n[Max Boettinger](https://unsplash.com/@maxboettinger)\n([I](https://unsplash.com/photos/T7Lnl3PFISM),\n[II](https://unsplash.com/@maxboettinger?photo=SUFS6CPjB5Q)):\n\n![](max-boettinger-109436.jpg)\n\n![](max-boettinger-288448.jpg)\n\n### What about retina images?\n\nAbsolutely, these are supported too! Gatsby takes care to retain images' pixel\ndensity.\n\n![Gandalf telling you that you should stay where you are](144-density.jpg)\n\n### Okay, nice! But what about GIFs?\n\nSadly, [Sharp](https://github.com/lovell/sharp) – the library that does the\nactual image processing for us in [gatsby-plugin-sharp][5] – is not able to\nwrite out the GIF file format. We will just copy them over for you, instead, and\nalso do that with SVGs.\n\nAn animated GIF of the Select2 Logo: ![Select2 Logo animation](select2-logo.gif)\n\nAn inline example ![example](squiggly.svg) SVG. Tremendous!\n\nAnd here's an awesome SVG tiger:\n\n![awesome tiger](awesome_tiger.svg)\n\n## iFrames and video embeds\n\nLet's add a YouTube video to show off responsive iFrames real quick:\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/hbjR5N6IhDU\" frameborder=\"0\" allowfullscreen></iframe>\n\n[1]: https://www.gatsbyjs.org/packages/gatsby-remark-images/\n[2]: https://www.gatsbyjs.org/packages/gatsby-remark-responsive-iframe/\n[3]: https://jmperezperez.com/medium-image-progressive-loading-placeholder/\n[4]: https://code.facebook.com/posts/991252547593574/the-technology-behind-preview-photos/\n[5]: https://www.gatsbyjs.org/packages/gatsby-plugin-sharp/\n",
        "type": "MarkdownRemark",
        "contentDigest": "b17347e751c05a47184a3771ea6ebb62",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin",
          "tagSlugs": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Responsive Images and iFrames",
        "date": "2017-01-02",
        "draft": false,
        "author": "Jay Gatsby",
        "tags": [
          "remark",
          "Images",
          "Videos",
          "iFrames"
        ],
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/index.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/index.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n![](mikael-cho-214358.jpg) _Photo by [Mikael Cho](https://unsplash.com/@mikael)\nvia [Unsplash](https://unsplash.com/@mikael?photo=_3TDkAttcaM)_\n\n[gatsby-remark-images][1] and [gatsby-remark-responsive-iframe][2] are here to\ntake care of all your basic Markdown image and iframe issues.\n\n## Images\n\n[gatsby-remark-images][1] provides _out-of-the-box progressive image loading_\n(as popularized by [Medium][3] and [Facebook][4]) for all local JPGs and PNGs in\nyour Markdown documents.\n\nYou aren't just limited to markdown image tags either. You can either use\nmarkdown image tags:\n\n```\n![](image.png)\n```\n\nOr HTML image tags:\n\n```\n&lt;img src=\"image.png\" alt=\"\"&gt;\n```\n\nLet's see some more photos by\n[Max Boettinger](https://unsplash.com/@maxboettinger)\n([I](https://unsplash.com/photos/T7Lnl3PFISM),\n[II](https://unsplash.com/@maxboettinger?photo=SUFS6CPjB5Q)):\n\n![](max-boettinger-109436.jpg)\n\n![](max-boettinger-288448.jpg)\n\n### What about retina images?\n\nAbsolutely, these are supported too! Gatsby takes care to retain images' pixel\ndensity.\n\n![Gandalf telling you that you should stay where you are](144-density.jpg)\n\n### Okay, nice! But what about GIFs?\n\nSadly, [Sharp](https://github.com/lovell/sharp) – the library that does the\nactual image processing for us in [gatsby-plugin-sharp][5] – is not able to\nwrite out the GIF file format. We will just copy them over for you, instead, and\nalso do that with SVGs.\n\nAn animated GIF of the Select2 Logo: ![Select2 Logo animation](select2-logo.gif)\n\nAn inline example ![example](squiggly.svg) SVG. Tremendous!\n\nAnd here's an awesome SVG tiger:\n\n![awesome tiger](awesome_tiger.svg)\n\n## iFrames and video embeds\n\nLet's add a YouTube video to show off responsive iFrames real quick:\n\n<iframe width=\"560\" height=\"315\" src=\"https://www.youtube.com/embed/hbjR5N6IhDU\" frameborder=\"0\" allowfullscreen></iframe>\n\n[1]: https://www.gatsbyjs.org/packages/gatsby-remark-images/\n[2]: https://www.gatsbyjs.org/packages/gatsby-remark-responsive-iframe/\n[3]: https://jmperezperez.com/medium-image-progressive-loading-placeholder/\n[4]: https://code.facebook.com/posts/991252547593574/the-technology-behind-preview-photos/\n[5]: https://www.gatsbyjs.org/packages/gatsby-plugin-sharp/\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/index.md",
      "fields": {
        "slug": "/2017-01-02---responsive-images-and-iframes/",
        "tagSlugs": [
          "/tags/remark/",
          "/tags/images/",
          "/tags/videos/",
          "/tags/i-frames/"
        ]
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-04-04---code-and-syntax-highlighting/index.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-04-04---code-and-syntax-highlighting/index.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/2017-04-04---code-and-syntax-highlighting/index.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"Code and Syntax Highlighting with PrismJS\"\ndate: \"2017-04-04\"\ndraft: false\nauthor: Daisy Buchanan\ntags:\n  - remark\n  - Code Highlighting\n---\n\n![](jeremy-bishop-262119.jpg) _Photo by\n[Jeremy Bishop](https://unsplash.com/@tidesinourveins) via\n[Unsplash](https://unsplash.com/?photo=XxpCNQ_w3is)_\n\nCode blocks are part of the Markdown spec, but syntax highlighting isn't.\nHowever, many renderers support syntax highlighting. In\n[gatsby-remark-prismjs][1], we use 🤔 [PrismJS][2].\n\n## Inline code\n\n```no-highlight\nInline `code` has `back-ticks around` it.\n```\n\nInline `code` has `back-ticks around` it.\n\n## Code blocks\n\nIn Markdown, blocks of code are either fenced by lines with three back-ticks\n<code>&#96;&#96;&#96;</code>, or are indented with four spaces. Fenced code\nblocks are easier to write and maintain, and only they support syntax\nhighlighting by indicating a language.\n\nTo see the complete list of supported languages, and how to write language\nnames, see the [PrismJS homepage][3].\n\n    ```javascript\n    var s = \"JavaScript syntax highlighting\";\n    alert(s);\n    ```\n\n    ```python\n    s = \"Python syntax highlighting\"\n    print s\n    ```\n\n    ```\n    No language indicated, so no syntax highlighting.\n    But let's throw in a &lt;b&gt;tag&lt;/b&gt;.\n    ```\n\n```javascript\nvar s = \"JavaScript syntax highlighting\";\nalert(s);\n```\n\n```python\ns = \"Python syntax highlighting\"\nprint s\n```\n\n```\nNo language indicated, so no syntax highlighting.\nBut let's throw in a <b>tag</b>.\n```\n\n## Line highlighting\n\n[gatsby-remark-prismjs][1] has its own line highlighting implementation which\ndiffers a bit from PrismJS's own. You can find out everything about it in the\n[corresponding README][1].\n\n    ```javascript{1-2,22}\n    // In your gatsby-config.js\n    // Let's make this line very long so that our container has to scroll its overflow…\n    plugins: [\n      {\n        resolve: `gatsby-transformer-remark`,\n        options: {\n          plugins: [\n            {\n              resolve: `gatsby-remark-images`,\n              options: {\n                maxWidth: 756,\n              },\n            },\n            {\n              resolve: `gatsby-remark-responsive-iframe`,\n              options: {\n                wrapperStyle: `margin-bottom: 1.0725rem`,\n              },\n            },\n            `gatsby-remark-copy-linked-files`,\n            `gatsby-remark-smartypants`,\n            `gatsby-remark-prismjs`,\n          ]\n        }\n      }\n    ]\n    ```\n\n```javascript{1-2,22}\n// In your gatsby-config.js\n// Let's make this line very long so that our container has to scroll its overflow…\nplugins: [\n  {\n    resolve: `gatsby-transformer-remark`,\n    options: {\n      plugins: [\n        {\n          resolve: `gatsby-remark-images`,\n          options: {\n            maxWidth: 756,\n          },\n        },\n        {\n          resolve: `gatsby-remark-responsive-iframe`,\n          options: {\n            wrapperStyle: `margin-bottom: 1.0725rem`,\n          },\n        },\n        `gatsby-remark-copy-linked-files`,\n        `gatsby-remark-smartypants`,\n        `gatsby-remark-prismjs`,\n      ]\n    }\n  }\n]\n```\n\nLet's do something crazy and add a list with another code example:\n\n* **A list item**\n\n  …and a paragraph! In my younger and more vulnerable years my father gave me\n  some advice that I’ve been turning over in my mind ever since.\n\n  1.  A nested numbered list\n  2.  “Whenever you feel like criticizing any one,” he told me, “just remember\n      that all the people in this world haven’t had the advantages that you’ve\n      had.”\n\n* Roger that, now back to topic: _Highlighted code blocks work here, too:_\n\n  ```css{10,13}\n  .clearfix:after {\n  \tvisibility: hidden;\n  \tdisplay: block;\n  \tfont-size: 0;\n  \tcontent: \" \";\n  \tclear: both;\n  \theight: 0;\n  \t}\n  .clearfix { display: inline-table; }\n  /* Hides from IE-mac \\*/\n  * html .clearfix { height: 1%; }\n  .clearfix { display: block; }\n  /* End hide from IE-mac */\n  ```\n\n  Wow, \"IE-mac\"?\n  [Yeah, that was a thing](https://en.wikipedia.org/wiki/Internet_Explorer_for_Mac)\n  back in the day … a good one at the time, too:\n\n  > Initial versions were developed from the same code base as Internet Explorer\n  > for Windows. Later versions diverged, particularly with the release of\n  > version 5 which included the cutting edge,\n  > [fault-tolerant](https://en.wikipedia.org/wiki/Fault-tolerant) and highly\n  > standards-compliant\n  > [Tasman](<https://en.wikipedia.org/wiki/Tasman_(layout_engine)>) >\n  > [layout engine](https://en.wikipedia.org/wiki/Layout_engine).\n\n  Source: https://en.wikipedia.org/wiki/Internet_Explorer_for_Mac\n\n* **The last list item** –- no more list items after this one, pinky swear!\n\n[1]: https://www.gatsbyjs.org/packages/gatsby-remark-prismjs/\n[2]: http://prismjs.com/\n[3]: http://prismjs.com/#languages-list\n",
        "type": "MarkdownRemark",
        "contentDigest": "7566c96e1b085ecb5c4fc612234d8ad8",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin",
          "tagSlugs": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Code and Syntax Highlighting with PrismJS",
        "date": "2017-04-04",
        "draft": false,
        "author": "Daisy Buchanan",
        "tags": [
          "remark",
          "Code Highlighting"
        ],
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/2017-04-04---code-and-syntax-highlighting/index.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/2017-04-04---code-and-syntax-highlighting/index.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n![](jeremy-bishop-262119.jpg) _Photo by\n[Jeremy Bishop](https://unsplash.com/@tidesinourveins) via\n[Unsplash](https://unsplash.com/?photo=XxpCNQ_w3is)_\n\nCode blocks are part of the Markdown spec, but syntax highlighting isn't.\nHowever, many renderers support syntax highlighting. In\n[gatsby-remark-prismjs][1], we use 🤔 [PrismJS][2].\n\n## Inline code\n\n```no-highlight\nInline `code` has `back-ticks around` it.\n```\n\nInline `code` has `back-ticks around` it.\n\n## Code blocks\n\nIn Markdown, blocks of code are either fenced by lines with three back-ticks\n<code>&#96;&#96;&#96;</code>, or are indented with four spaces. Fenced code\nblocks are easier to write and maintain, and only they support syntax\nhighlighting by indicating a language.\n\nTo see the complete list of supported languages, and how to write language\nnames, see the [PrismJS homepage][3].\n\n    ```javascript\n    var s = \"JavaScript syntax highlighting\";\n    alert(s);\n    ```\n\n    ```python\n    s = \"Python syntax highlighting\"\n    print s\n    ```\n\n    ```\n    No language indicated, so no syntax highlighting.\n    But let's throw in a &lt;b&gt;tag&lt;/b&gt;.\n    ```\n\n```javascript\nvar s = \"JavaScript syntax highlighting\";\nalert(s);\n```\n\n```python\ns = \"Python syntax highlighting\"\nprint s\n```\n\n```\nNo language indicated, so no syntax highlighting.\nBut let's throw in a <b>tag</b>.\n```\n\n## Line highlighting\n\n[gatsby-remark-prismjs][1] has its own line highlighting implementation which\ndiffers a bit from PrismJS's own. You can find out everything about it in the\n[corresponding README][1].\n\n    ```javascript{1-2,22}\n    // In your gatsby-config.js\n    // Let's make this line very long so that our container has to scroll its overflow…\n    plugins: [\n      {\n        resolve: `gatsby-transformer-remark`,\n        options: {\n          plugins: [\n            {\n              resolve: `gatsby-remark-images`,\n              options: {\n                maxWidth: 756,\n              },\n            },\n            {\n              resolve: `gatsby-remark-responsive-iframe`,\n              options: {\n                wrapperStyle: `margin-bottom: 1.0725rem`,\n              },\n            },\n            `gatsby-remark-copy-linked-files`,\n            `gatsby-remark-smartypants`,\n            `gatsby-remark-prismjs`,\n          ]\n        }\n      }\n    ]\n    ```\n\n```javascript{1-2,22}\n// In your gatsby-config.js\n// Let's make this line very long so that our container has to scroll its overflow…\nplugins: [\n  {\n    resolve: `gatsby-transformer-remark`,\n    options: {\n      plugins: [\n        {\n          resolve: `gatsby-remark-images`,\n          options: {\n            maxWidth: 756,\n          },\n        },\n        {\n          resolve: `gatsby-remark-responsive-iframe`,\n          options: {\n            wrapperStyle: `margin-bottom: 1.0725rem`,\n          },\n        },\n        `gatsby-remark-copy-linked-files`,\n        `gatsby-remark-smartypants`,\n        `gatsby-remark-prismjs`,\n      ]\n    }\n  }\n]\n```\n\nLet's do something crazy and add a list with another code example:\n\n* **A list item**\n\n  …and a paragraph! In my younger and more vulnerable years my father gave me\n  some advice that I’ve been turning over in my mind ever since.\n\n  1.  A nested numbered list\n  2.  “Whenever you feel like criticizing any one,” he told me, “just remember\n      that all the people in this world haven’t had the advantages that you’ve\n      had.”\n\n* Roger that, now back to topic: _Highlighted code blocks work here, too:_\n\n  ```css{10,13}\n  .clearfix:after {\n  \tvisibility: hidden;\n  \tdisplay: block;\n  \tfont-size: 0;\n  \tcontent: \" \";\n  \tclear: both;\n  \theight: 0;\n  \t}\n  .clearfix { display: inline-table; }\n  /* Hides from IE-mac \\*/\n  * html .clearfix { height: 1%; }\n  .clearfix { display: block; }\n  /* End hide from IE-mac */\n  ```\n\n  Wow, \"IE-mac\"?\n  [Yeah, that was a thing](https://en.wikipedia.org/wiki/Internet_Explorer_for_Mac)\n  back in the day … a good one at the time, too:\n\n  > Initial versions were developed from the same code base as Internet Explorer\n  > for Windows. Later versions diverged, particularly with the release of\n  > version 5 which included the cutting edge,\n  > [fault-tolerant](https://en.wikipedia.org/wiki/Fault-tolerant) and highly\n  > standards-compliant\n  > [Tasman](<https://en.wikipedia.org/wiki/Tasman_(layout_engine)>) >\n  > [layout engine](https://en.wikipedia.org/wiki/Layout_engine).\n\n  Source: https://en.wikipedia.org/wiki/Internet_Explorer_for_Mac\n\n* **The last list item** –- no more list items after this one, pinky swear!\n\n[1]: https://www.gatsbyjs.org/packages/gatsby-remark-prismjs/\n[2]: http://prismjs.com/\n[3]: http://prismjs.com/#languages-list\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-04-04---code-and-syntax-highlighting/index.md",
      "fields": {
        "slug": "/2017-04-04---code-and-syntax-highlighting/",
        "tagSlugs": [
          "/tags/remark/",
          "/tags/code-highlighting/"
        ]
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-11-14---excerpts/index.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-11-14---excerpts/index.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/2017-11-14---excerpts/index.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"Using Excerpts\"\ndate: \"2017-11-14\"\ndraft: false\nauthor: Jay Gatsby\ntags:\n  - remark\n  - excerpts\n---\n\n`gatsby-transformer-remark` allows you to get an excerpt from a markdown post. By default, it will prune the first 140 characters, but you can optionally specify a `pruneLength` in the graphql query.\n\n```graphql\n{\n  allMarkdownRemark {\n    edges {\n      node {\n        excerpt(pruneLength: 280)\n      }\n    }\n  }\n}\n```\n\nYou can also manually mark in your markdown where to stop excerpting—similar to Jekyl. `gatsby-transformer-remark` uses [gray-matter](https://github.com/jonschlinkert/gray-matter) to parse markdown frontmatter, so you can specify an `excerpt_separator`, as well as any of the other options mentioned [here](https://github.com/jonschlinkert/gray-matter#options), in the `gatsby-config.js` file.\n\n```json\n{\n  resolve: `gatsby-transformer-remark`,\n  options: {\n    excerpt_separator: `<!-- end -->`\n  }\n}\n```\n\nAny file that does not have the given `excerpt_separator` will fall back to the default pruning method.\n\nYou can see the results [here](/excerpt-example)\n",
        "type": "MarkdownRemark",
        "contentDigest": "3c739e11022092161a1d5315882183b6",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin",
          "tagSlugs": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Using Excerpts",
        "date": "2017-11-14",
        "draft": false,
        "author": "Jay Gatsby",
        "tags": [
          "remark",
          "excerpts"
        ],
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/2017-11-14---excerpts/index.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/2017-11-14---excerpts/index.md absPath of file"
      },
      "excerpt": "\n`gatsby-transformer-remark` allows you to get an excerpt from a markdown post. By default, it will prune the first 140 characters, but you can optionally specify a `pruneLength` in the graphql query.\n\n```graphql\n{\n  allMarkdownRemark {\n    edges {\n      node {\n        excerpt(pruneLength: 280)\n      }\n    }\n  }\n}\n```\n\nYou can also manually mark in your markdown where to stop excerpting—similar to Jekyl. `gatsby-transformer-remark` uses [gray-matter](https://github.com/jonschlinkert/gray-matter) to parse markdown frontmatter, so you can specify an `excerpt_separator`, as well as any of the other options mentioned [here](https://github.com/jonschlinkert/gray-matter#options), in the `gatsby-config.js` file.\n\n```json\n{\n  resolve: `gatsby-transformer-remark`,\n  options: {\n    excerpt_separator: `",
      "rawMarkdownBody": "\n`gatsby-transformer-remark` allows you to get an excerpt from a markdown post. By default, it will prune the first 140 characters, but you can optionally specify a `pruneLength` in the graphql query.\n\n```graphql\n{\n  allMarkdownRemark {\n    edges {\n      node {\n        excerpt(pruneLength: 280)\n      }\n    }\n  }\n}\n```\n\nYou can also manually mark in your markdown where to stop excerpting—similar to Jekyl. `gatsby-transformer-remark` uses [gray-matter](https://github.com/jonschlinkert/gray-matter) to parse markdown frontmatter, so you can specify an `excerpt_separator`, as well as any of the other options mentioned [here](https://github.com/jonschlinkert/gray-matter#options), in the `gatsby-config.js` file.\n\n```json\n{\n  resolve: `gatsby-transformer-remark`,\n  options: {\n    excerpt_separator: `<!-- end -->`\n  }\n}\n```\n\nAny file that does not have the given `excerpt_separator` will fall back to the default pruning method.\n\nYou can see the results [here](/excerpt-example)\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-11-14---excerpts/index.md",
      "fields": {
        "slug": "/2017-11-14---excerpts/",
        "tagSlugs": [
          "/tags/remark/",
          "/tags/excerpts/"
        ]
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2018-01-27---custom-components/index.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2018-01-27---custom-components/index.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/2018-01-27---custom-components/index.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"Custom components\"\ndate: \"2018-01-27\"\ndraft: false\nauthor: Jay Gatsby\ntags:\n  - remark\n  - React\n  - components\n---\n\nWhat if you want custom UI interactions embedded in your Markdown?\n\nBy using `rehype-react` with the `htmlAst` field, you can write custom React components and then reference them from your Markdown files, or map generic HTML elements like `<ul>` or `<h2>` to your own components. \n\n_Note: this functionality was added in version 1.7.31 of gatsby-transformer-remark_\n\n## Writing a component\n\nWrite the component the way you normally would. For example, here's a simple \"Counter\" component:\n\n```js\nimport React from \"react\";\n\nconst counterStyle = {\n  /* styles skipped for brevity */\n};\n\nexport default class Counter extends React.Component {\n  static defaultProps = {\n    initialvalue: 0,\n  };\n\n  state = {\n    value: Number(this.props.initialvalue),\n  };\n\n  handleIncrement = () => {\n    this.setState(state => {\n      return {\n        value: state.value + 1,\n      };\n    });\n  };\n\n  handleDecrement = () => {\n    this.setState(state => {\n      return {\n        value: state.value - 1,\n      };\n    });\n  };\n\n  render() {\n    return (\n      <span style={counterStyle}>\n        <strong style={{ flex: `1 1` }}>{this.state.value}</strong>\n        <button onClick={this.handleDecrement}>-1</button>\n        <button onClick={this.handleIncrement}>+1</button>\n      </span>\n    );\n  }\n}\n```\n\n## Enabling the component\n\nIn order to display this component within a Markdown file, you'll need to add a reference to the component in the template that renders your Markdown content. There are five parts to this:\n\n1.  Install `rehype-react` as a dependency\n\n    ```bash\n    # If you use Yarn\n    yarn add rehype-react\n\n    # If you use npm\n    npm install --save rehype-react\n    ```\n\n2.  Import `rehype-react` and whichever components you wish to use\n\n    ```js\n    import rehypeReact from \"rehype-react\";\n    import Counter from \"../components/Counter\";\n    ```\n\n3.  Create a render function with references to your custom components\n\n    ```js\n    const renderAst = new rehypeReact({\n      createElement: React.createElement,\n      components: { \"interactive-counter\": Counter },\n    }).Compiler;\n    ```\n\n    I prefer to use hyphenated names to make it clear that it's a custom component.\n\n4.  Render your content using `htmlAst` instead of `html`\n\n    This will look different depending on how you were previously referring to the post object retrieved from GraphQL, but in general you'll want to replace this:\n\n    ```js\n    <div dangerouslySetInnerHTML={{ __html: post.html }} />\n    ```\n\n    with this:\n\n    ```js\n    {\n      renderAst(post.htmlAst)\n    }\n    ```\n\n5.  Change `html` to `htmlAst` in your `pageQuery`\n\n    ```graphql\n    # ...\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      htmlAst # previously `html`\n\n      # other fields...\n    }\n    # ...\n    ```\n\n## Using the component\n\nNow, you can directly use your custom component within your Markdown files! For instance, if you include the tag:\n\n```html\n<interactive-counter></interactive-counter>\n```\n\nYou'll end up with an interactive component:\n\n<interactive-counter></interactive-counter>\n\nIn addition, you can also pass attributes, which can be used as props in your component:\n\n```html\n<interactive-counter initialvalue=\"10\"></interactive-counter>\n```\n\n<interactive-counter initialvalue=\"10\"></interactive-counter>\n\n## Mapping from generic HTML elements\n\nYou can also map a generic HTML element to one of your own components. This can be particularly useful if you are using something like styled-components as it allows you to share these primitives between markdown content and the rest of your site. It also means the author of the Markdown doesn't need to use any custom markup - just standard markdown.\n\nFor example if you have a series of header components:\n\n```javascript\nconst PrimaryTitle = styled.h1`…`\nconst SecondaryTitle styled.h2`…`\nconst TertiaryTitle styled.h3`…`\n```\n\nYou can map headers defined in markdown to these components:\n\n```js\nconst renderAst = new rehypeReact({\n  createElement: React.createElement,\n  components: { \n    \"h1\": PrimaryTitle,\n    \"h2\": SecondaryTitle,\n    \"h3\": TertiaryTitle,\n   },\n}).Compiler;\n```\n\nAnd headers defined in markdown will be rendered as your components instead of generic HTML elements:\n\n```markdown\n# This will be rendered as a PrimaryTitle component\n## This will be rendered as a SecondaryTitle component\n### This will be rendered as a TertiaryTitle component\n```\n\n## Caveats\n\nAlthough it looks like we're now using React components in our Markdown files, that's not _entirely_ true: we're adding custom HTML elements which are then replaced by React components. This means there are a few things to watch out for.\n\n### Always add closing tags\n\nJSX allows us to write self-closing tags, such as `<my-component />`. However, the HTML parser would incorrectly interpret this as an opening tag, and be unable to find a closing tag. For this reason, tags written in Markdown files always need to be explicitly closed, even when empty:\n\n```html\n<my-component></my-component>\n```\n\n### Attribute names are always lowercased\n\nHTML attribute names are not case-sensitive. `gatsby-transformer-remark` handles this by lowercasing all attribute names; this means that any props on an exposed component must also be all-lowercase.\n\n> The prop in the `Counter` example above was named `initialvalue` rather than `initialValue` for exactly this reason; if we tried to access `this.props.initialValue` we'd have found it to be `undefined`.\n\n### Attributes are always strings\n\nAny prop that gets its value from an attribute will always receive a string value. Your component is responsible for properly deserializing passed values.\n\n* Numbers are always passed as strings, even if the attribute is written without quotes: `<my-component value=37></my-component>` will still receive the string `\"37\"` as its value instead of the number `37`.\n* React lets you pass a prop without a value, and will interpret it to mean `true`; for example, if you write `<MyComponent isEnabled />` then the props would be `{ isEnabled: true }`. However, in your Markdown, an attribute without a value will not be interpreted as `true`; instead, it will be passed as the empty string `\"\"`. Similarly, passing `somevalue=true` and `othervalue=false` will result in the string values `\"true\"` and `\"false\"`, respectively.\n* You can pass object values if you use `JSON.parse()` in your component to get the value out; just remember to enclose the value in single quotes to ensure it is parsed correctly (e.g. `<my-thing objectvalue='{\"foo\": \"bar\"}'></my-thing>`).\n\n> Notice in the `Counter` example how the initial `value` has been cast using the `Number()` function.\n\n## Possibilities\n\nCustom components embedded in Markdown enables many features that weren't possible before; here are some ideas, starting simple and getting complex:\n\n* Write a live countdown clock for an event such as Christmas, the Super Bowl, or someone's birthday. Suggested markup: `<countdown-clock> 2019-01-02T05:00:00.000Z </countdown-clock>`\n* Write a component that displays as a link with an informative hovercard. For example, you might want to write `<hover-card subject=\"ostrich\"> ostriches </hover-card>` to show a link that lets you hover to get information on ostriches.\n* If your Gatsby site is for vacation photos, you might write a component that allows you to show a carousel of pictures, and perhaps a map that shows where each photo was taken.\n* Write a component that lets you add live code demos in your Markdown, using [component-playground](https://formidable.com/open-source/component-playground/) or something similar.\n* Write a component that wraps a [GFM table](./hello-world-kitchen-sink/#tables) and displays the data from the table in an interactive graph.\n",
        "type": "MarkdownRemark",
        "contentDigest": "f8d3189fad246fdfafbe6db08acbe709",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin",
          "tagSlugs": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Custom components",
        "date": "2018-01-27",
        "draft": false,
        "author": "Jay Gatsby",
        "tags": [
          "remark",
          "React",
          "components"
        ],
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/2018-01-27---custom-components/index.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/2018-01-27---custom-components/index.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\nWhat if you want custom UI interactions embedded in your Markdown?\n\nBy using `rehype-react` with the `htmlAst` field, you can write custom React components and then reference them from your Markdown files, or map generic HTML elements like `<ul>` or `<h2>` to your own components. \n\n_Note: this functionality was added in version 1.7.31 of gatsby-transformer-remark_\n\n## Writing a component\n\nWrite the component the way you normally would. For example, here's a simple \"Counter\" component:\n\n```js\nimport React from \"react\";\n\nconst counterStyle = {\n  /* styles skipped for brevity */\n};\n\nexport default class Counter extends React.Component {\n  static defaultProps = {\n    initialvalue: 0,\n  };\n\n  state = {\n    value: Number(this.props.initialvalue),\n  };\n\n  handleIncrement = () => {\n    this.setState(state => {\n      return {\n        value: state.value + 1,\n      };\n    });\n  };\n\n  handleDecrement = () => {\n    this.setState(state => {\n      return {\n        value: state.value - 1,\n      };\n    });\n  };\n\n  render() {\n    return (\n      <span style={counterStyle}>\n        <strong style={{ flex: `1 1` }}>{this.state.value}</strong>\n        <button onClick={this.handleDecrement}>-1</button>\n        <button onClick={this.handleIncrement}>+1</button>\n      </span>\n    );\n  }\n}\n```\n\n## Enabling the component\n\nIn order to display this component within a Markdown file, you'll need to add a reference to the component in the template that renders your Markdown content. There are five parts to this:\n\n1.  Install `rehype-react` as a dependency\n\n    ```bash\n    # If you use Yarn\n    yarn add rehype-react\n\n    # If you use npm\n    npm install --save rehype-react\n    ```\n\n2.  Import `rehype-react` and whichever components you wish to use\n\n    ```js\n    import rehypeReact from \"rehype-react\";\n    import Counter from \"../components/Counter\";\n    ```\n\n3.  Create a render function with references to your custom components\n\n    ```js\n    const renderAst = new rehypeReact({\n      createElement: React.createElement,\n      components: { \"interactive-counter\": Counter },\n    }).Compiler;\n    ```\n\n    I prefer to use hyphenated names to make it clear that it's a custom component.\n\n4.  Render your content using `htmlAst` instead of `html`\n\n    This will look different depending on how you were previously referring to the post object retrieved from GraphQL, but in general you'll want to replace this:\n\n    ```js\n    <div dangerouslySetInnerHTML={{ __html: post.html }} />\n    ```\n\n    with this:\n\n    ```js\n    {\n      renderAst(post.htmlAst)\n    }\n    ```\n\n5.  Change `html` to `htmlAst` in your `pageQuery`\n\n    ```graphql\n    # ...\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      htmlAst # previously `html`\n\n      # other fields...\n    }\n    # ...\n    ```\n\n## Using the component\n\nNow, you can directly use your custom component within your Markdown files! For instance, if you include the tag:\n\n```html\n<interactive-counter></interactive-counter>\n```\n\nYou'll end up with an interactive component:\n\n<interactive-counter></interactive-counter>\n\nIn addition, you can also pass attributes, which can be used as props in your component:\n\n```html\n<interactive-counter initialvalue=\"10\"></interactive-counter>\n```\n\n<interactive-counter initialvalue=\"10\"></interactive-counter>\n\n## Mapping from generic HTML elements\n\nYou can also map a generic HTML element to one of your own components. This can be particularly useful if you are using something like styled-components as it allows you to share these primitives between markdown content and the rest of your site. It also means the author of the Markdown doesn't need to use any custom markup - just standard markdown.\n\nFor example if you have a series of header components:\n\n```javascript\nconst PrimaryTitle = styled.h1`…`\nconst SecondaryTitle styled.h2`…`\nconst TertiaryTitle styled.h3`…`\n```\n\nYou can map headers defined in markdown to these components:\n\n```js\nconst renderAst = new rehypeReact({\n  createElement: React.createElement,\n  components: { \n    \"h1\": PrimaryTitle,\n    \"h2\": SecondaryTitle,\n    \"h3\": TertiaryTitle,\n   },\n}).Compiler;\n```\n\nAnd headers defined in markdown will be rendered as your components instead of generic HTML elements:\n\n```markdown\n# This will be rendered as a PrimaryTitle component\n## This will be rendered as a SecondaryTitle component\n### This will be rendered as a TertiaryTitle component\n```\n\n## Caveats\n\nAlthough it looks like we're now using React components in our Markdown files, that's not _entirely_ true: we're adding custom HTML elements which are then replaced by React components. This means there are a few things to watch out for.\n\n### Always add closing tags\n\nJSX allows us to write self-closing tags, such as `<my-component />`. However, the HTML parser would incorrectly interpret this as an opening tag, and be unable to find a closing tag. For this reason, tags written in Markdown files always need to be explicitly closed, even when empty:\n\n```html\n<my-component></my-component>\n```\n\n### Attribute names are always lowercased\n\nHTML attribute names are not case-sensitive. `gatsby-transformer-remark` handles this by lowercasing all attribute names; this means that any props on an exposed component must also be all-lowercase.\n\n> The prop in the `Counter` example above was named `initialvalue` rather than `initialValue` for exactly this reason; if we tried to access `this.props.initialValue` we'd have found it to be `undefined`.\n\n### Attributes are always strings\n\nAny prop that gets its value from an attribute will always receive a string value. Your component is responsible for properly deserializing passed values.\n\n* Numbers are always passed as strings, even if the attribute is written without quotes: `<my-component value=37></my-component>` will still receive the string `\"37\"` as its value instead of the number `37`.\n* React lets you pass a prop without a value, and will interpret it to mean `true`; for example, if you write `<MyComponent isEnabled />` then the props would be `{ isEnabled: true }`. However, in your Markdown, an attribute without a value will not be interpreted as `true`; instead, it will be passed as the empty string `\"\"`. Similarly, passing `somevalue=true` and `othervalue=false` will result in the string values `\"true\"` and `\"false\"`, respectively.\n* You can pass object values if you use `JSON.parse()` in your component to get the value out; just remember to enclose the value in single quotes to ensure it is parsed correctly (e.g. `<my-thing objectvalue='{\"foo\": \"bar\"}'></my-thing>`).\n\n> Notice in the `Counter` example how the initial `value` has been cast using the `Number()` function.\n\n## Possibilities\n\nCustom components embedded in Markdown enables many features that weren't possible before; here are some ideas, starting simple and getting complex:\n\n* Write a live countdown clock for an event such as Christmas, the Super Bowl, or someone's birthday. Suggested markup: `<countdown-clock> 2019-01-02T05:00:00.000Z </countdown-clock>`\n* Write a component that displays as a link with an informative hovercard. For example, you might want to write `<hover-card subject=\"ostrich\"> ostriches </hover-card>` to show a link that lets you hover to get information on ostriches.\n* If your Gatsby site is for vacation photos, you might write a component that allows you to show a carousel of pictures, and perhaps a map that shows where each photo was taken.\n* Write a component that lets you add live code demos in your Markdown, using [component-playground](https://formidable.com/open-source/component-playground/) or something similar.\n* Write a component that wraps a [GFM table](./hello-world-kitchen-sink/#tables) and displays the data from the table in an interactive graph.\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2018-01-27---custom-components/index.md",
      "fields": {
        "slug": "/2018-01-27---custom-components/",
        "tagSlugs": [
          "/tags/remark/",
          "/tags/react/",
          "/tags/components/"
        ]
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Algos/data-structures.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Algos/data-structures.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/Algos/data-structures.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"Data Structures\"\ndescription: \"Computer science data structure interfaces\"\nauthor: Jay Gatsby\nweight: 2\n---\n\n\n\n<article id=\"1\">\n\n## Data Structures - Interfaces:\n\n> Interfaces deal with the outside of the black box--the buttons on it\n\n### Sets\n\n> Good use case is for adding users\n\n* A set is like an amorphous cloud that does: 1. Adds 2. Removes 3. Contains\n\n```javascript\nset\n\t.add(5)\n\t.add(7)\n\t.add(7)\n```\n\n* Only 5 and 7 will be added once\n\n#### Features\n\n    * No duplicates\n\t* No guarantee of order\n\t* ES6 has native sets along with weakSets\n\n### Maps\n\n#### Features\n\n* Similar to JS objects (key value sets)\n* they don't have prototypes, inheritance or methods\n* No concept of order\n* No dupe keys but you can have dupe values\n* ES6 has native maps along with weakMaps\n\n### Stacks\n\n> Programming itself is a stack--think recursion\n\n![stack](https://btholt.github.io/four-semesters-of-cs/img/stack.png)\n\n* Most programming languages are based on a stack\n* LIFO: Arrays have a stack interface but they are not a pure stack _ Because with a pure stack you push on top and pop\n\tfrom top _ You can't get to anything beneath the top node\n\n### Queue\n\n![Queue](https://btholt.github.io/four-semesters-of-cs/img/queue.png)\n\n* **FIFO**\n* All stacks need to have the methods enqueue (add/push) and dequeue (remove/pop)\n* There are priority queues like for streaming video \\* Items that have a higher priority get queued or dequeued first\n\n</article>\n\n<article id=\"2\">\n\n## Data Structures - Implementations:\n\n##### Implementations deal with that is happening under the hood--what is going on in the blackbox\n\n### Implementing Arrays\n\n#### Array Lists\n\n##### Primary lesson is to learn to make decisions based on the problem you are getting at\n\n* BIGO:\n\t* Gets: O(1)\n\t\t* You have to loop through the list until you find the right node\n\t* Adds / Deletes: O(n)\n\n* **Analytical Q's to ask yourself:**\n\t* *Will this problem require a lot of gets?*\n\t* *Will it require a lot of deletes?*\n\t\t* For Array lists if you want to do **a lot of gets **this is a great solution\n\t\t* But not so much for the case where you want to do **a lot of deletes**\n\n![Array List](https://btholt.github.io/four-semesters-of-cs/img/array.png)\n\n* We are going to fake these in JS but really we are borrowing from Java\n\t* These concepts are really important in non garbage collected languages like Java (or Jakarta ;)\n* One annoying thing in ArrayLists is you have to collapse the array if you deleted an item\n* [a,b,c,d,e,f,g]\n\t* -> delete index 3\n\t* -> array is [a,b,c,(blank),e,f,g]\n\t* -> shift elements 4,5,6 back one index\n\t* -> array is [a,b,c,e,f,g]\n\t* -> decrement length\n\n* Tradeoff: This optimizes **gets** and deoptimizes **deletes** and **insertIntos**      \n\nExercise:\n\n<p data-height=\"300\" data-theme-id=\"31719\" data-slug-hash=\"wmYoJG\" data-default-tab=\"js,result\" data-user=\"RyanGarant\" data-embed-version=\"2\" data-pen-title=\"Visualized Data Structures: Array List Exercise\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/RyanGarant/pen/wmYoJG/\">Visualized Data Structures: Array List Exercise</a> by Ryan Garant (<a href=\"https://codepen.io/RyanGarant\">@RyanGarant</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n\n* BIGO:\n\t* Gets: 0(n)\n\t\t* You have to loop through the list until you find the right node\n\t* Adds / Deletes: 0(1)\n\n### Stacks\n\n![stack](https://www.tutorialspoint.com/data_structures_algorithms/images/stack_representation.jpg)\n\n* **LIFO**: The **Last** item added **Into** the stack will be the **First** one taken **Out** of the stack \\* The idea of\n\tthe \"call stack\" goes along with this concept\n\n##### Constructor Function\n\n* **Storage**: using a string instead of an array so we can feel what it is like to build in that functionality ;)\n\n##### Methods\n\n```javascript\npush(value) // adds value to the front & returns size of stack\npop() //removes value from front, returns value\nsize() //returns size of stack as an integer\n```\n\n<p data-height=\"300\" data-theme-id=\"31719\" data-slug-hash=\"vWLpYe\" data-default-tab=\"js\" data-user=\"RyanGarant\" data-embed-version=\"2\" data-pen-title=\"Stack\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/RyanGarant/pen/vWLpYe/\">Stack</a> by Ryan Garant (<a href=\"https://codepen.io/RyanGarant\">@RyanGarant</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n\n```javascript\nconst Stack = function() {\n\tthis.storage = ''\n}\n\nStack.prototype.push = function(val) {\n\tthis.storage = `${this.storage},${val}`\n}\n\nStack.prototype.pop = function() {\n\tconst lastValIndex = this.storage.lastIndexOf(',')\n\tthis.storage = this.storage.substring(0, lastValIndex)\n}\n\nStack.prototype.size = function() {\n\tconsole.log((this.storage.match(/,/g) || []).length)\n}\n\nconst myWeeklyMenu = new Stack()\n\nmyWeeklyMenu.push('redBeans')\nmyWeeklyMenu.push('blueBeans')\nmyWeeklyMenu.push('yellowBeans')\n\nmyWeeklyMenu.pop()\n\nmyWeeklyMenu.size()\n\nconsole.log(myWeeklyMenu.storage)\n```\n\n## Queues\n\n<img src=\"/images/algos/queues.png\" alt=\"Queues\">\n\n<p data-height=\"300\" data-theme-id=\"31719\" data-slug-hash=\"wPEyRg\" data-default-tab=\"js\" data-user=\"RyanGarant\" data-embed-version=\"2\" data-pen-title=\"Queue Data Structure\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/RyanGarant/pen/wPEyRg/\">Queue Data Structure</a> by Ryan Garant (<a href=\"https://codepen.io/RyanGarant\">@RyanGarant</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n</article>\n",
        "type": "MarkdownRemark",
        "contentDigest": "b969f0618414d92114568753e6a3f885",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Data Structures",
        "description": "Computer science data structure interfaces",
        "author": "Jay Gatsby",
        "weight": 2,
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/Algos/data-structures.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/Algos/data-structures.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n\n\n<article id=\"1\">\n\n## Data Structures - Interfaces:\n\n> Interfaces deal with the outside of the black box--the buttons on it\n\n### Sets\n\n> Good use case is for adding users\n\n* A set is like an amorphous cloud that does: 1. Adds 2. Removes 3. Contains\n\n```javascript\nset\n\t.add(5)\n\t.add(7)\n\t.add(7)\n```\n\n* Only 5 and 7 will be added once\n\n#### Features\n\n    * No duplicates\n\t* No guarantee of order\n\t* ES6 has native sets along with weakSets\n\n### Maps\n\n#### Features\n\n* Similar to JS objects (key value sets)\n* they don't have prototypes, inheritance or methods\n* No concept of order\n* No dupe keys but you can have dupe values\n* ES6 has native maps along with weakMaps\n\n### Stacks\n\n> Programming itself is a stack--think recursion\n\n![stack](https://btholt.github.io/four-semesters-of-cs/img/stack.png)\n\n* Most programming languages are based on a stack\n* LIFO: Arrays have a stack interface but they are not a pure stack _ Because with a pure stack you push on top and pop\n\tfrom top _ You can't get to anything beneath the top node\n\n### Queue\n\n![Queue](https://btholt.github.io/four-semesters-of-cs/img/queue.png)\n\n* **FIFO**\n* All stacks need to have the methods enqueue (add/push) and dequeue (remove/pop)\n* There are priority queues like for streaming video \\* Items that have a higher priority get queued or dequeued first\n\n</article>\n\n<article id=\"2\">\n\n## Data Structures - Implementations:\n\n##### Implementations deal with that is happening under the hood--what is going on in the blackbox\n\n### Implementing Arrays\n\n#### Array Lists\n\n##### Primary lesson is to learn to make decisions based on the problem you are getting at\n\n* BIGO:\n\t* Gets: O(1)\n\t\t* You have to loop through the list until you find the right node\n\t* Adds / Deletes: O(n)\n\n* **Analytical Q's to ask yourself:**\n\t* *Will this problem require a lot of gets?*\n\t* *Will it require a lot of deletes?*\n\t\t* For Array lists if you want to do **a lot of gets **this is a great solution\n\t\t* But not so much for the case where you want to do **a lot of deletes**\n\n![Array List](https://btholt.github.io/four-semesters-of-cs/img/array.png)\n\n* We are going to fake these in JS but really we are borrowing from Java\n\t* These concepts are really important in non garbage collected languages like Java (or Jakarta ;)\n* One annoying thing in ArrayLists is you have to collapse the array if you deleted an item\n* [a,b,c,d,e,f,g]\n\t* -> delete index 3\n\t* -> array is [a,b,c,(blank),e,f,g]\n\t* -> shift elements 4,5,6 back one index\n\t* -> array is [a,b,c,e,f,g]\n\t* -> decrement length\n\n* Tradeoff: This optimizes **gets** and deoptimizes **deletes** and **insertIntos**      \n\nExercise:\n\n<p data-height=\"300\" data-theme-id=\"31719\" data-slug-hash=\"wmYoJG\" data-default-tab=\"js,result\" data-user=\"RyanGarant\" data-embed-version=\"2\" data-pen-title=\"Visualized Data Structures: Array List Exercise\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/RyanGarant/pen/wmYoJG/\">Visualized Data Structures: Array List Exercise</a> by Ryan Garant (<a href=\"https://codepen.io/RyanGarant\">@RyanGarant</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n\n* BIGO:\n\t* Gets: 0(n)\n\t\t* You have to loop through the list until you find the right node\n\t* Adds / Deletes: 0(1)\n\n### Stacks\n\n![stack](https://www.tutorialspoint.com/data_structures_algorithms/images/stack_representation.jpg)\n\n* **LIFO**: The **Last** item added **Into** the stack will be the **First** one taken **Out** of the stack \\* The idea of\n\tthe \"call stack\" goes along with this concept\n\n##### Constructor Function\n\n* **Storage**: using a string instead of an array so we can feel what it is like to build in that functionality ;)\n\n##### Methods\n\n```javascript\npush(value) // adds value to the front & returns size of stack\npop() //removes value from front, returns value\nsize() //returns size of stack as an integer\n```\n\n<p data-height=\"300\" data-theme-id=\"31719\" data-slug-hash=\"vWLpYe\" data-default-tab=\"js\" data-user=\"RyanGarant\" data-embed-version=\"2\" data-pen-title=\"Stack\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/RyanGarant/pen/vWLpYe/\">Stack</a> by Ryan Garant (<a href=\"https://codepen.io/RyanGarant\">@RyanGarant</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n\n```javascript\nconst Stack = function() {\n\tthis.storage = ''\n}\n\nStack.prototype.push = function(val) {\n\tthis.storage = `${this.storage},${val}`\n}\n\nStack.prototype.pop = function() {\n\tconst lastValIndex = this.storage.lastIndexOf(',')\n\tthis.storage = this.storage.substring(0, lastValIndex)\n}\n\nStack.prototype.size = function() {\n\tconsole.log((this.storage.match(/,/g) || []).length)\n}\n\nconst myWeeklyMenu = new Stack()\n\nmyWeeklyMenu.push('redBeans')\nmyWeeklyMenu.push('blueBeans')\nmyWeeklyMenu.push('yellowBeans')\n\nmyWeeklyMenu.pop()\n\nmyWeeklyMenu.size()\n\nconsole.log(myWeeklyMenu.storage)\n```\n\n## Queues\n\n<img src=\"/images/algos/queues.png\" alt=\"Queues\">\n\n<p data-height=\"300\" data-theme-id=\"31719\" data-slug-hash=\"wPEyRg\" data-default-tab=\"js\" data-user=\"RyanGarant\" data-embed-version=\"2\" data-pen-title=\"Queue Data Structure\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/RyanGarant/pen/wPEyRg/\">Queue Data Structure</a> by Ryan Garant (<a href=\"https://codepen.io/RyanGarant\">@RyanGarant</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n</article>\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Algos/data-structures.md",
      "fields": {
        "slug": "/algos-data-structures/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Algos/index.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Algos/index.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/Algos/index.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"Algos\"\ndescription: \"Fundamentals: algorithms, computing, 1's & 0's\"\nauthor: Jay Gatsby\nicon: \"hammer\"\nweight: 1\n---\n\n#{$page.description}\n\n<article id=\"1\">\n\n## Big O Notation\n\n[![bigocheatsheet.png](https://s20.postimg.org/arpf7xsl9/bigocheatsheet.png)](https://postimg.org/image/x3n81brp5/)\n\n[![array_Big_O.png](https://s20.postimg.org/w2mzc7app/array_Big_O.png)](https://postimg.org/image/hjfuashkp/)\n\n* [Big O Cheatsheet](http://bigocheatsheet.com/)\n\n#### TODO: [Read this](https://web.njit.edu/~wl256/download/cs610/Introduction-to-algorithm-3rdEdition.pdf)\n\n> Big O sucks away the unimportant stuff so you can focus on what matters\n\n### O(1)\n\n* When you have no loops and are just doing something and exiting/returning\n\n### O(n)\n\n* When you are doing the same amount of work that is going into a function\n\n### O(n^2)\n\n* Trick here is to look for double `for` or `while` loops\n\n### O(log n)\n\n* Where code employs **divide and conquer** strategies that use _recursion_ like merge and quick sorts\n\n</article>\n\n<article id=\"2\">\n\n## Iteration\n\n### Bubble Sort\n\n`bigO = n ^ 2`\n\n```javascript\nfunction bubbleSort(nums) {  \n  do {\n    var swapped = false\n\n    for (let i = 0; i < nums.length; i++) {\n      if (nums[i] > nums[i + 1] {\n        const temp = nums[i]\n        nums[i] = nums[i + 1]\n        nums[i + 1] = temp\n        swapped = true\n      }\n    }\n  } while(swapped)\n}\n```\n\n* You probably will never use a do loop or bubble sort in production code\n\n### Insertion Sort\n\n`bigO = n ^ 2`\n\n* Has more favorable coefficients than bubble sort\n* Better for things that are **near sorted** \\* merge sort and quick sort are pretty much faster in all other cases\n\n```javascript\nfunction insertionSort(nums) {\n\tfor (let i = 1; i < nums.length; i++) {\n\t\tfor (let j = 0; j < i; j++) {\n\t\t\tif (nums[i] < nums[j]) {\n\t\t\t\tconst spliced = nums.splice(i, 1)\n\t\t\t\tnums.splice(j, 0, spliced[0])\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n</article>\n\n<article id=\"3\">\n\n## Recursion\n\n> Your **base case** is the most important piece. If you don't write this first you will stack overflow\n\n### Recipe for recursion:\n\n1. Identify base case(s)\n2. Identify recursive case(s)\n3. return where appropriate\n4. write procecdures for each case that bring you closer to the base case(s)\n\n```javascript\nfunction basicRecursion(max, current) {\n\tif (current > max) return\n\tconsole.log(current)\n\tbasicRecursion(max, current + 1)\n}\n\nbasicRecursion(1, 10)\n```\n\n### Fibonacci Sequences\n\n`1, 1, 2, 3, 5, 10`\n\n* Fibonacci sequences lends itself well to recursion because they are themselves defined **recursively**\n  * You need to know the **first two preceeding** terms to get the nth number of the sequence\n\n```javascript\nfunction fibonacci(n) {\n\tif (n <= 2) return 1\n\n\treturn fibonacci(n - 1) + fibonacci(n - 2)\n}\n```\n\n* Notice how we are returning the recursive function\n  _ It is a common mistake to not return the recursive function\n  _ What will happen is it will return `undefined` instead of preserving the value you are seeking\n\n### Factorials\n\n`!4 = 4 * 3 * 2 * 1`\n\n* Factorials are defined recursively by **multiplying itself** by the previous number until you get to 1\n\n```javascript\nfunction factorial(n) {\n\tif (n < 2) return 1\n\n\treturn n * factorial(n - 1)\n}\n```\n\n### Merge Sort\n\n`bigO = O(n log n)`\n\n* Recursive algo that is very **stable**\n  * However when sorting numbers stability doesn't matter because you don't care what order two 4's for instance are given to you\n\n</article>\n",
        "type": "MarkdownRemark",
        "contentDigest": "266f031c4a7f6b821dde61e0063433f8",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Algos",
        "description": "Fundamentals: algorithms, computing, 1's & 0's",
        "author": "Jay Gatsby",
        "icon": "hammer",
        "weight": 1,
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/Algos/index.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/Algos/index.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n#{$page.description}\n\n<article id=\"1\">\n\n## Big O Notation\n\n[![bigocheatsheet.png](https://s20.postimg.org/arpf7xsl9/bigocheatsheet.png)](https://postimg.org/image/x3n81brp5/)\n\n[![array_Big_O.png](https://s20.postimg.org/w2mzc7app/array_Big_O.png)](https://postimg.org/image/hjfuashkp/)\n\n* [Big O Cheatsheet](http://bigocheatsheet.com/)\n\n#### TODO: [Read this](https://web.njit.edu/~wl256/download/cs610/Introduction-to-algorithm-3rdEdition.pdf)\n\n> Big O sucks away the unimportant stuff so you can focus on what matters\n\n### O(1)\n\n* When you have no loops and are just doing something and exiting/returning\n\n### O(n)\n\n* When you are doing the same amount of work that is going into a function\n\n### O(n^2)\n\n* Trick here is to look for double `for` or `while` loops\n\n### O(log n)\n\n* Where code employs **divide and conquer** strategies that use _recursion_ like merge and quick sorts\n\n</article>\n\n<article id=\"2\">\n\n## Iteration\n\n### Bubble Sort\n\n`bigO = n ^ 2`\n\n```javascript\nfunction bubbleSort(nums) {  \n  do {\n    var swapped = false\n\n    for (let i = 0; i < nums.length; i++) {\n      if (nums[i] > nums[i + 1] {\n        const temp = nums[i]\n        nums[i] = nums[i + 1]\n        nums[i + 1] = temp\n        swapped = true\n      }\n    }\n  } while(swapped)\n}\n```\n\n* You probably will never use a do loop or bubble sort in production code\n\n### Insertion Sort\n\n`bigO = n ^ 2`\n\n* Has more favorable coefficients than bubble sort\n* Better for things that are **near sorted** \\* merge sort and quick sort are pretty much faster in all other cases\n\n```javascript\nfunction insertionSort(nums) {\n\tfor (let i = 1; i < nums.length; i++) {\n\t\tfor (let j = 0; j < i; j++) {\n\t\t\tif (nums[i] < nums[j]) {\n\t\t\t\tconst spliced = nums.splice(i, 1)\n\t\t\t\tnums.splice(j, 0, spliced[0])\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n</article>\n\n<article id=\"3\">\n\n## Recursion\n\n> Your **base case** is the most important piece. If you don't write this first you will stack overflow\n\n### Recipe for recursion:\n\n1. Identify base case(s)\n2. Identify recursive case(s)\n3. return where appropriate\n4. write procecdures for each case that bring you closer to the base case(s)\n\n```javascript\nfunction basicRecursion(max, current) {\n\tif (current > max) return\n\tconsole.log(current)\n\tbasicRecursion(max, current + 1)\n}\n\nbasicRecursion(1, 10)\n```\n\n### Fibonacci Sequences\n\n`1, 1, 2, 3, 5, 10`\n\n* Fibonacci sequences lends itself well to recursion because they are themselves defined **recursively**\n  * You need to know the **first two preceeding** terms to get the nth number of the sequence\n\n```javascript\nfunction fibonacci(n) {\n\tif (n <= 2) return 1\n\n\treturn fibonacci(n - 1) + fibonacci(n - 2)\n}\n```\n\n* Notice how we are returning the recursive function\n  _ It is a common mistake to not return the recursive function\n  _ What will happen is it will return `undefined` instead of preserving the value you are seeking\n\n### Factorials\n\n`!4 = 4 * 3 * 2 * 1`\n\n* Factorials are defined recursively by **multiplying itself** by the previous number until you get to 1\n\n```javascript\nfunction factorial(n) {\n\tif (n < 2) return 1\n\n\treturn n * factorial(n - 1)\n}\n```\n\n### Merge Sort\n\n`bigO = O(n log n)`\n\n* Recursive algo that is very **stable**\n  * However when sorting numbers stability doesn't matter because you don't care what order two 4's for instance are given to you\n\n</article>\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Algos/index.md",
      "fields": {
        "slug": "/algos/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/DevOps/index.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/DevOps/index.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/DevOps/index.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"DevOps\"\ndescription: \"Intro to DevOps (based on https://courses.edx.org/courses/course-v1:LinuxFoundationX+LFS161x+1T2018)\"\nauthor: Jay Gatsby\nicon: \"hammer\"\nweight: 1\n---\n\n\n\n<article id=\"1\">\n\n## Intro\n\nThe structure of this intro is organized around the \"Three Ways\" which outline values & philosophies that guide DevOps processes & practices:\n\nI. The First Way - accelerate the delivery of IT services with **Continuous Delivery** and using principles and practices that lead to an accelerated flow.\n\nII. The Second Way - amplify feedback loops by creating a problem-solving culture, understand monitoring, monitoring business metrics, and changing how management applies DevOps.\n\nIII. The Third Way - patterns of organizational learning and safety culture that include blameless postmortems, resilience engineering, and systems thinking.\n\n* [*Why the name “DevOps”?*](http://dev2ops.org/2010/02/what-is-devops/)\n\t* Probably because it’s catchy\n\t* It’s also a good mental image of the concept at the widest scale — when you bring Dev and Ops together you get DevOps\n\n* Devops enables:\n\t* [\"It Alignment\"](http://en.wikipedia.org/wiki/Business/IT_alignment)\n\t\t* a desired state in which a business organization is able to use information technology (IT) effectively to achieve business objectives — typically improved financial performance or marketplace competitiveness\n\t* [\"Agility\"](http://en.wikipedia.org/wiki/Business_agility)\n\t\t* ability of an organization to rapidly adapt to market and environmental changes in productive and cost-effective ways\n\n</article>\n\n<article id=\"2\">\n\n## History\n\n* [A brief history of IT Operations, DevOps, and NoOps](https://blog.appdynamics.com/engineering/is-noops-the-end-of-devops-think-again/)\n\t* In traditional IT organizations, developers and system administrators have opposing goals.\n\t\t* **Developers’** primary focus is to *build features*\n\t\t* **operations’** focus is to ensure the *availability, reliability, performance, and security* of the features in production\n\t* The **Wall of Confusion**, illustrates the barrier between development and operations\n\t\t* which leads to an unending series of outages, fire fighting, blame shifting, internal tension, customer frustration, and business failure.\n\t* In the late **1980s**, **IT Infrastructure Library (ITIL)** emerged\n\t\t* a set of standards and *best practices shared by the highest performing IT organizations*\n\t\t* promised high change success rates and prevented typical disasters associated with software deployment, but **at the expense of speed** and slowing down workflow\n\t* Meanwhile, the software development community was busy forming their own best practices for the rapid development of applications.\n\t\t* In **2001**, a summit of prominent software craftsmen drafted the **Agile Manifesto**, kickstarting the agile development movement into full gear\n\t\t* The agile principles empowered small, cross-functional teams to *build high-quality software faster* than ever before.\n\t* The rise of the internet **during the 1990s** was the catalyst that fueled the demand for better, faster, more sophisticated software\n\t\t* Technologies advancements arose:\n\t\t\t* version control\n\t\t\t* continuous integration\n\t\t\t* configuration management\n\t\t\t* virtualization\n\t* In **2006**, the need for better processes and tools reached a critical mass with the public launch of *Amazon Web Services*.\n\t\t* With the advent of cloud computing, *software teams could now outsource their physical infrastructure entirely to cloud providers*\n\t\t* And instead manage virtual infrastructure resources via APIs\n\t\t* This **infrastructure as a service (IaaS) model** allowed development teams to move faster\n\t\t\t* No longer having to wait on IT to order and provision new hardware\n\t* **One year later**, **platform as a service (PaaS) solutions,** such as *Heroku* and *CloudFoundry*, made it possible for a single developer *with no operations experience* to launch a scalable web application over the weekend, because the platform automated everything from commit to deploy.\n\t* The **pivotal moment in DevOps history** was the [groundbreaking presentation](https://www.youtube.com/watch?v=LdOe18KhtT4)\n\t\t* from *John Allspaw and Paul Hammond* at the 2009 Velocity Conference—10+ Deploys Per Day: Dev and Ops Cooperation at Flickr.\n\t\t* About how a large company with complex software could successfully deploy a product multiple times per day\n\t\t* Shocked IT community\n\t* **Devopsdays** conf then launced\n\t\t* Is a worldwide tour of locally organized conferences for developers, sysadmins, and other software professionals to meet and share their stories, ideas, and challenges. Some common themes discussed at Devopsdays include fostering a culture of community and collaboration, blameless post mortems, and applying agile practices and lean manufacturing principles to IT operations.\n\t* Other movements then arose:\n\t\t* *Docker*\n\t\t\t* An open-source container management platform that brought DIY PaaS solutions to the masses\n\t\t* *Kubernetes*\n\t\t\t* A popular container orchestration framework\n    * *AWS Lambda*\n\t\t\t* The first widespread example of Serverless computing in which functions run on demand without the need for a server to run continuously\n</article>\n\n<article id=\"3\">\n\n## What is NoOps & is DevOps dead?\n\n<img src=\"/images/devops/noops.jpg\">\n\n</article>\n",
        "type": "MarkdownRemark",
        "contentDigest": "837a4443829ae5e3c2c0347cea853528",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "DevOps",
        "description": "Intro to DevOps (based on https://courses.edx.org/courses/course-v1:LinuxFoundationX+LFS161x+1T2018)",
        "author": "Jay Gatsby",
        "icon": "hammer",
        "weight": 1,
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/DevOps/index.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/DevOps/index.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n\n\n<article id=\"1\">\n\n## Intro\n\nThe structure of this intro is organized around the \"Three Ways\" which outline values & philosophies that guide DevOps processes & practices:\n\nI. The First Way - accelerate the delivery of IT services with **Continuous Delivery** and using principles and practices that lead to an accelerated flow.\n\nII. The Second Way - amplify feedback loops by creating a problem-solving culture, understand monitoring, monitoring business metrics, and changing how management applies DevOps.\n\nIII. The Third Way - patterns of organizational learning and safety culture that include blameless postmortems, resilience engineering, and systems thinking.\n\n* [*Why the name “DevOps”?*](http://dev2ops.org/2010/02/what-is-devops/)\n\t* Probably because it’s catchy\n\t* It’s also a good mental image of the concept at the widest scale — when you bring Dev and Ops together you get DevOps\n\n* Devops enables:\n\t* [\"It Alignment\"](http://en.wikipedia.org/wiki/Business/IT_alignment)\n\t\t* a desired state in which a business organization is able to use information technology (IT) effectively to achieve business objectives — typically improved financial performance or marketplace competitiveness\n\t* [\"Agility\"](http://en.wikipedia.org/wiki/Business_agility)\n\t\t* ability of an organization to rapidly adapt to market and environmental changes in productive and cost-effective ways\n\n</article>\n\n<article id=\"2\">\n\n## History\n\n* [A brief history of IT Operations, DevOps, and NoOps](https://blog.appdynamics.com/engineering/is-noops-the-end-of-devops-think-again/)\n\t* In traditional IT organizations, developers and system administrators have opposing goals.\n\t\t* **Developers’** primary focus is to *build features*\n\t\t* **operations’** focus is to ensure the *availability, reliability, performance, and security* of the features in production\n\t* The **Wall of Confusion**, illustrates the barrier between development and operations\n\t\t* which leads to an unending series of outages, fire fighting, blame shifting, internal tension, customer frustration, and business failure.\n\t* In the late **1980s**, **IT Infrastructure Library (ITIL)** emerged\n\t\t* a set of standards and *best practices shared by the highest performing IT organizations*\n\t\t* promised high change success rates and prevented typical disasters associated with software deployment, but **at the expense of speed** and slowing down workflow\n\t* Meanwhile, the software development community was busy forming their own best practices for the rapid development of applications.\n\t\t* In **2001**, a summit of prominent software craftsmen drafted the **Agile Manifesto**, kickstarting the agile development movement into full gear\n\t\t* The agile principles empowered small, cross-functional teams to *build high-quality software faster* than ever before.\n\t* The rise of the internet **during the 1990s** was the catalyst that fueled the demand for better, faster, more sophisticated software\n\t\t* Technologies advancements arose:\n\t\t\t* version control\n\t\t\t* continuous integration\n\t\t\t* configuration management\n\t\t\t* virtualization\n\t* In **2006**, the need for better processes and tools reached a critical mass with the public launch of *Amazon Web Services*.\n\t\t* With the advent of cloud computing, *software teams could now outsource their physical infrastructure entirely to cloud providers*\n\t\t* And instead manage virtual infrastructure resources via APIs\n\t\t* This **infrastructure as a service (IaaS) model** allowed development teams to move faster\n\t\t\t* No longer having to wait on IT to order and provision new hardware\n\t* **One year later**, **platform as a service (PaaS) solutions,** such as *Heroku* and *CloudFoundry*, made it possible for a single developer *with no operations experience* to launch a scalable web application over the weekend, because the platform automated everything from commit to deploy.\n\t* The **pivotal moment in DevOps history** was the [groundbreaking presentation](https://www.youtube.com/watch?v=LdOe18KhtT4)\n\t\t* from *John Allspaw and Paul Hammond* at the 2009 Velocity Conference—10+ Deploys Per Day: Dev and Ops Cooperation at Flickr.\n\t\t* About how a large company with complex software could successfully deploy a product multiple times per day\n\t\t* Shocked IT community\n\t* **Devopsdays** conf then launced\n\t\t* Is a worldwide tour of locally organized conferences for developers, sysadmins, and other software professionals to meet and share their stories, ideas, and challenges. Some common themes discussed at Devopsdays include fostering a culture of community and collaboration, blameless post mortems, and applying agile practices and lean manufacturing principles to IT operations.\n\t* Other movements then arose:\n\t\t* *Docker*\n\t\t\t* An open-source container management platform that brought DIY PaaS solutions to the masses\n\t\t* *Kubernetes*\n\t\t\t* A popular container orchestration framework\n    * *AWS Lambda*\n\t\t\t* The first widespread example of Serverless computing in which functions run on demand without the need for a server to run continuously\n</article>\n\n<article id=\"3\">\n\n## What is NoOps & is DevOps dead?\n\n<img src=\"/images/devops/noops.jpg\">\n\n</article>\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/DevOps/index.md",
      "fields": {
        "slug": "/devops/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/DBs/index.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/DBs/index.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/DBs/index.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"DBs\"\ndescription: \"Fundamentals of SQL DBs like SQLite, Postgres & MySQL\"\nauthor: Jay Gatsby\nicon: \"hammer\"\nweight: 1\n---\n\n<article id=\"1\">\n\n## General Intro Knowledge\n\n> A DB is simply an organized set of data that typically persists\n\n* Different DBs serve different purposes and are better for particular use cases\n\t* Relational Stores\n\t\t* SQlite\n\t\t\t* Operates off of a file like an Excel workbook\n\t\t* Postgres\n\t\t* MySql\n\t\t* Google Spanner\n\t* Key-Value Stores\n\t\t* Redis\n\t\t* Dynamo DB\n\t* Column Stores\n\t\t* Cassandra\n\t\t* Apache HBASE\n\t* Graph Databases\n\t\t* neo4j\n\t\t* graphQL\n\t* Document Databases\n\t\t* Mongo DB\n\n</article>\n\n\n<article id=\"2\">\n\n## Relational Algebra & Codds Relational Model\n\n* Edward Codd in 1969 developed \"Codd's Relational Model\"\n\t* It is a way of organizing data like an Excel worksheet\n\t\t* A relation (table) is a set of tuples (rows)\n\t\t* Each element (cell value) in a tuple is a member of a data domain (set of allowed values)\n\t\t* These elements are called attribute values and are associated with an attribute (column name + type)\n\t* The important idea that comes from this is \"schemas\"\n\n### Schemas\n\n> Schemas come from the Greek word for shape...like the shape of your data\n\n* Does not involve the values themselves but the shape\n* Tables, column names, types and constraints\n* Connected to your \"data domain\"\n\n### Relational Algebra vs Relational Calculus\n\n* Codd's theorum states that for every relational calculus we can come up with, there exists a relational algebra way of getting there\n\n* To find the moves that Jeff Goldblum is in the:\n\t* Relational algebra way (imperative)\n\t\t* Join Movie and Actor over actorId\n\t\t* Filter the results to include those that include Jeff Goldblum\n\t\t* Select the movieTitle and year columns\n\t* Relational Calculus way (declarative)\n\t\t* Get movieTitle and year for Movie so that there exists an Actor A who was in the movie and is Jeff Goldblum\n\n</article>\n\n<article id=\"3\">\n\n## Structured Query Language (SQL)\n\n* Direct extension from Codd's work\n* Declarative\n* Used in Relational Database Management System (RDBMS)\n* Can be procedural as well like functions and control flow statements\n\n\n### SQL Language Elements\n\n1. SELECT clause `SELECT * FROM Employee`\n2. WHERE clause `WHERE id = 123 AND is_admin = 'true'`\n\t* All the code after `WHERE` is called the Predicate\n\t* the `'true'` piece is known as the Expression\n\t* Both of these come together to form the Statement\n\t\t* A Statement is a complete sentence\n\t\t* Clauses are phrases of the sentence\n\n### Command Line SQL\n\n* You can run sql queries from the command line\n* You can create dbs from cli\n* you can delete dbs from cli\n\n</article>\n\n\n<article id=\"4\">\n\n## Quotes & Aliases\n\n### Quotes\n\n* Usually table names, column names and keywords are case insensitive\n* 'Single quotes' are used for string literals\n* \"Double quotes\" or `backticks` (MySQL only) for words that conflict with SQL keywords, or when case sensitivity is desired \n* Quotes can have a drastic impact on what you receive\n\n### Aliases\n\n* The `AS` keyword can be used to give a table or column an alias\n* Only impacts the current query\n\n<img alt=\"Aliases\" src=\"/images/db/alias.png\">\n\n</article>\n\n\n<article id=\"5\">\n\n## Simple SELECT Queries\n\n* Returns a result set\n* FROM allows one or more elements to be returned from a relation\n\n```sql\nSELECT * FROM Employee\n```\n<img alt=\"Select Statement\" src=\"/images/db/simple-select.png\">\n\n* SELECT grabs all records from Employee table\n\n* Choosing elements\n\t* elements are returned in the order that you ask for them\n\t* It's good to be explicit so that:\n\t\t* You minimize the amount of data that you are sending over the wire\n\t\t* developer intent is clear\n\t\t* less I/O\n\t\t* Future schema changes will not affect results\n\n```sql\nSELECT id, firstname, lastname FROM Employee\n```\n\n</article>\n\n\n<article id=\"6\">\n\n## Logic & Control Flow\n\n### WHERE\n\n* used to filter a result set with a condition\n* Make sure to use single quotes! unless you have a special use case or special characters\n\n### Conditions\n\n* >, <, >=, <=, =\n* Not equal: <> or !=\n* Within a range: `temperature BETWEEN 68 AND 75`\n* Member of a set: `companyname IN ('Microsoft', 'LinkedIn')`\n* String ends with: `email LIKE '%.gov'`\n* String includes: `summary LIKE '%siracha%'`\n* String length: `email LIKE '__'`\n\n### AND, OR, NOT\n\n* Boolean logic operators\n* Parens for clarity\n\n<img alt=\"Boolean\" src=\"/images/db/boolean.png\">\n\n</article>\n\n\n<article id=\"7\">\n\n## Core Functions\n\n* Each db has a slightly different set of core functions\n* Some are the same like:\n\t* lower\n\t* max\n\t* min\n\t* count\n\t* substr\n* You can use them in comparisons\n\t* `SELECT lower(title) AS name FROM Product`\n\n### Debugging Conditions\n\n* Conditions can be evaluated directly with a SELECT statement\n\n```sql\nSELECT 'mike@example.com' LIKE '%@example.com'; -- TRUE\nSELECT 'mike@gmail.com' LIKE '%@example.com'; -- FALSE\n```\n\n</article>\n\n\n<article id=\"8\">\n\n## Sorting & Pagination\n\n### Sorting\n\n* `ORDER BY` clause declares the desired sorting of the result set\n* Sort Direction as `ASC` to `DESC`\n\n<img alt=\"Sorting\" src=\"/images/db/sorting.png\">\n\n### Limiting\n\n* Useful when dealing with large sets\n* Can have good performance benefits when it comes to sending less data over the wire\n* Doesn't help necessarily with making your DB do less work\n* Performance gain could be huge if the DB doesn't have to sort the entire set\n* Limiting should be your last clause (order matters!)\n\n<img alt=\"Limiting\" src=\"/images/db/limiting.png\">\n\n### Offsetting\n\n* Offset means to start with Nth result\n* Combining this with LIMIT gives us the ability to paginate\n\n<img alt=\"Offsetting\" src=\"/images/db/offsetting.png\">\n\n</article>\n\n\n<article id=\"9\">\n\n## Joining Tables\n\n### Relationships\n\n* Not where the term \"relational\" comes from\n* It actually comes from the the concept of relational algebra\n* EX: 1 customer can have MANY orders\n\n### JOIN\n\n* Assemble tables together\n* Joining can only be performed on a related column between two tables\n* Whatever comes after the `FROM` is the left table and whatever comes after `JOIN` is the right table\n\n```sql\nSELECT *\nFROM CustomerOrder AS o\nLEFT JOIN Customer AS c\n\tON c.id = o.customerid\n```\n\n* Four types of join:\n\t1. INNER JOIN\n\t\t* Will bring two tables together and will only give you things that exist in both tables\n\t\t* Will exclude non matches from left and right tables\n\t\t* Like if a customer exists in the customers table but doesn't have an order yet you wanna handle that case\n\t2. LEFT JOIN\n\t\t* Will ensure everything from the left table will be included but exclude non matches from the right table\n\t\t* Say you have Orders table on left and you want to add customername which is in the Customers table\n\t\t\t* LEFT JOIN would probably be the best fit because you want to include an order even if there is not a customer name match\n\t3. RIGHT JOIN\n\t\t* The opposite of LEFT JOIN\n\t\t* Some DBs don't support this like SQlite\n\t4. FULL JOIN\n\t\t* Will include non matches in both tables\n\n* LEFT, RIGHT & FULL JOIN are known as OUTER JOINs\n\t* So OUTER JOINs allow for one or more rows to be partially empty because it doesn't have a corresponding match in anther table\n\n#### JOIN Selecting Columns\n\n* SELECT * is typically a bad idea because it can lead to duplicate columns like `id` which exists as a column usually in every table\n* So it is better to SELECT only the columns you want using aliasing\n\n</article>\n\n\n<article id=\"10\">\n\n## Aggregate Functions\n\n* Allows you to performa a calculation an entire result set and arrive at a single value\n\t* SUM\n\t* COUNT\n\t* MIN/MAX\n\t* AVG\n* There are different aggregate functions from DB to DB\n\n### Aggregate Functions and GROUP BY\n\t* Instead of taking an entire table and squashing it into one table you can do calcs on a \n\t\t* These kinds of operations are great to do in the DB rather than on the frontend\n\t* If you use GROUP BY you can add something to select if you are not using it in GROUP BY\n\n```sql\nSELECT c.id, c.name, sum(o.amount)\nFROM CustomerOrder AS o\nINNER JOIN Customer AS c\n\tON o.customerid = c.id\nGROUP BY c.id\n```\n\n<img alt=\"Aggregate Month\" src=\"/images/db/aggregate-month.png\">\n<img alt=\"Aggregate Multiple\" src=\"/images/db/aggregate-multiple.png\">\n\n* The solution for using a WHERE clause on grouped results is the HAVING clause\n\n<img alt=\"having\" src=\"/images/db/having.png\">\n</article>\n",
        "type": "MarkdownRemark",
        "contentDigest": "d782e0c990db5bb776b2148a863652be",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "DBs",
        "description": "Fundamentals of SQL DBs like SQLite, Postgres & MySQL",
        "author": "Jay Gatsby",
        "icon": "hammer",
        "weight": 1,
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/DBs/index.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/DBs/index.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n<article id=\"1\">\n\n## General Intro Knowledge\n\n> A DB is simply an organized set of data that typically persists\n\n* Different DBs serve different purposes and are better for particular use cases\n\t* Relational Stores\n\t\t* SQlite\n\t\t\t* Operates off of a file like an Excel workbook\n\t\t* Postgres\n\t\t* MySql\n\t\t* Google Spanner\n\t* Key-Value Stores\n\t\t* Redis\n\t\t* Dynamo DB\n\t* Column Stores\n\t\t* Cassandra\n\t\t* Apache HBASE\n\t* Graph Databases\n\t\t* neo4j\n\t\t* graphQL\n\t* Document Databases\n\t\t* Mongo DB\n\n</article>\n\n\n<article id=\"2\">\n\n## Relational Algebra & Codds Relational Model\n\n* Edward Codd in 1969 developed \"Codd's Relational Model\"\n\t* It is a way of organizing data like an Excel worksheet\n\t\t* A relation (table) is a set of tuples (rows)\n\t\t* Each element (cell value) in a tuple is a member of a data domain (set of allowed values)\n\t\t* These elements are called attribute values and are associated with an attribute (column name + type)\n\t* The important idea that comes from this is \"schemas\"\n\n### Schemas\n\n> Schemas come from the Greek word for shape...like the shape of your data\n\n* Does not involve the values themselves but the shape\n* Tables, column names, types and constraints\n* Connected to your \"data domain\"\n\n### Relational Algebra vs Relational Calculus\n\n* Codd's theorum states that for every relational calculus we can come up with, there exists a relational algebra way of getting there\n\n* To find the moves that Jeff Goldblum is in the:\n\t* Relational algebra way (imperative)\n\t\t* Join Movie and Actor over actorId\n\t\t* Filter the results to include those that include Jeff Goldblum\n\t\t* Select the movieTitle and year columns\n\t* Relational Calculus way (declarative)\n\t\t* Get movieTitle and year for Movie so that there exists an Actor A who was in the movie and is Jeff Goldblum\n\n</article>\n\n<article id=\"3\">\n\n## Structured Query Language (SQL)\n\n* Direct extension from Codd's work\n* Declarative\n* Used in Relational Database Management System (RDBMS)\n* Can be procedural as well like functions and control flow statements\n\n\n### SQL Language Elements\n\n1. SELECT clause `SELECT * FROM Employee`\n2. WHERE clause `WHERE id = 123 AND is_admin = 'true'`\n\t* All the code after `WHERE` is called the Predicate\n\t* the `'true'` piece is known as the Expression\n\t* Both of these come together to form the Statement\n\t\t* A Statement is a complete sentence\n\t\t* Clauses are phrases of the sentence\n\n### Command Line SQL\n\n* You can run sql queries from the command line\n* You can create dbs from cli\n* you can delete dbs from cli\n\n</article>\n\n\n<article id=\"4\">\n\n## Quotes & Aliases\n\n### Quotes\n\n* Usually table names, column names and keywords are case insensitive\n* 'Single quotes' are used for string literals\n* \"Double quotes\" or `backticks` (MySQL only) for words that conflict with SQL keywords, or when case sensitivity is desired \n* Quotes can have a drastic impact on what you receive\n\n### Aliases\n\n* The `AS` keyword can be used to give a table or column an alias\n* Only impacts the current query\n\n<img alt=\"Aliases\" src=\"/images/db/alias.png\">\n\n</article>\n\n\n<article id=\"5\">\n\n## Simple SELECT Queries\n\n* Returns a result set\n* FROM allows one or more elements to be returned from a relation\n\n```sql\nSELECT * FROM Employee\n```\n<img alt=\"Select Statement\" src=\"/images/db/simple-select.png\">\n\n* SELECT grabs all records from Employee table\n\n* Choosing elements\n\t* elements are returned in the order that you ask for them\n\t* It's good to be explicit so that:\n\t\t* You minimize the amount of data that you are sending over the wire\n\t\t* developer intent is clear\n\t\t* less I/O\n\t\t* Future schema changes will not affect results\n\n```sql\nSELECT id, firstname, lastname FROM Employee\n```\n\n</article>\n\n\n<article id=\"6\">\n\n## Logic & Control Flow\n\n### WHERE\n\n* used to filter a result set with a condition\n* Make sure to use single quotes! unless you have a special use case or special characters\n\n### Conditions\n\n* >, <, >=, <=, =\n* Not equal: <> or !=\n* Within a range: `temperature BETWEEN 68 AND 75`\n* Member of a set: `companyname IN ('Microsoft', 'LinkedIn')`\n* String ends with: `email LIKE '%.gov'`\n* String includes: `summary LIKE '%siracha%'`\n* String length: `email LIKE '__'`\n\n### AND, OR, NOT\n\n* Boolean logic operators\n* Parens for clarity\n\n<img alt=\"Boolean\" src=\"/images/db/boolean.png\">\n\n</article>\n\n\n<article id=\"7\">\n\n## Core Functions\n\n* Each db has a slightly different set of core functions\n* Some are the same like:\n\t* lower\n\t* max\n\t* min\n\t* count\n\t* substr\n* You can use them in comparisons\n\t* `SELECT lower(title) AS name FROM Product`\n\n### Debugging Conditions\n\n* Conditions can be evaluated directly with a SELECT statement\n\n```sql\nSELECT 'mike@example.com' LIKE '%@example.com'; -- TRUE\nSELECT 'mike@gmail.com' LIKE '%@example.com'; -- FALSE\n```\n\n</article>\n\n\n<article id=\"8\">\n\n## Sorting & Pagination\n\n### Sorting\n\n* `ORDER BY` clause declares the desired sorting of the result set\n* Sort Direction as `ASC` to `DESC`\n\n<img alt=\"Sorting\" src=\"/images/db/sorting.png\">\n\n### Limiting\n\n* Useful when dealing with large sets\n* Can have good performance benefits when it comes to sending less data over the wire\n* Doesn't help necessarily with making your DB do less work\n* Performance gain could be huge if the DB doesn't have to sort the entire set\n* Limiting should be your last clause (order matters!)\n\n<img alt=\"Limiting\" src=\"/images/db/limiting.png\">\n\n### Offsetting\n\n* Offset means to start with Nth result\n* Combining this with LIMIT gives us the ability to paginate\n\n<img alt=\"Offsetting\" src=\"/images/db/offsetting.png\">\n\n</article>\n\n\n<article id=\"9\">\n\n## Joining Tables\n\n### Relationships\n\n* Not where the term \"relational\" comes from\n* It actually comes from the the concept of relational algebra\n* EX: 1 customer can have MANY orders\n\n### JOIN\n\n* Assemble tables together\n* Joining can only be performed on a related column between two tables\n* Whatever comes after the `FROM` is the left table and whatever comes after `JOIN` is the right table\n\n```sql\nSELECT *\nFROM CustomerOrder AS o\nLEFT JOIN Customer AS c\n\tON c.id = o.customerid\n```\n\n* Four types of join:\n\t1. INNER JOIN\n\t\t* Will bring two tables together and will only give you things that exist in both tables\n\t\t* Will exclude non matches from left and right tables\n\t\t* Like if a customer exists in the customers table but doesn't have an order yet you wanna handle that case\n\t2. LEFT JOIN\n\t\t* Will ensure everything from the left table will be included but exclude non matches from the right table\n\t\t* Say you have Orders table on left and you want to add customername which is in the Customers table\n\t\t\t* LEFT JOIN would probably be the best fit because you want to include an order even if there is not a customer name match\n\t3. RIGHT JOIN\n\t\t* The opposite of LEFT JOIN\n\t\t* Some DBs don't support this like SQlite\n\t4. FULL JOIN\n\t\t* Will include non matches in both tables\n\n* LEFT, RIGHT & FULL JOIN are known as OUTER JOINs\n\t* So OUTER JOINs allow for one or more rows to be partially empty because it doesn't have a corresponding match in anther table\n\n#### JOIN Selecting Columns\n\n* SELECT * is typically a bad idea because it can lead to duplicate columns like `id` which exists as a column usually in every table\n* So it is better to SELECT only the columns you want using aliasing\n\n</article>\n\n\n<article id=\"10\">\n\n## Aggregate Functions\n\n* Allows you to performa a calculation an entire result set and arrive at a single value\n\t* SUM\n\t* COUNT\n\t* MIN/MAX\n\t* AVG\n* There are different aggregate functions from DB to DB\n\n### Aggregate Functions and GROUP BY\n\t* Instead of taking an entire table and squashing it into one table you can do calcs on a \n\t\t* These kinds of operations are great to do in the DB rather than on the frontend\n\t* If you use GROUP BY you can add something to select if you are not using it in GROUP BY\n\n```sql\nSELECT c.id, c.name, sum(o.amount)\nFROM CustomerOrder AS o\nINNER JOIN Customer AS c\n\tON o.customerid = c.id\nGROUP BY c.id\n```\n\n<img alt=\"Aggregate Month\" src=\"/images/db/aggregate-month.png\">\n<img alt=\"Aggregate Multiple\" src=\"/images/db/aggregate-multiple.png\">\n\n* The solution for using a WHERE clause on grouped results is the HAVING clause\n\n<img alt=\"having\" src=\"/images/db/having.png\">\n</article>\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/DBs/index.md",
      "fields": {
        "slug": "/dbs/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Liferay/component.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/component.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/component.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"Component Architecture\"\ndescription: \"How we can leverage a reusable Atomic Design component model\"\nauthor: Jay Gatsby\nweight: 4\n---\n\n<article id=\"1\">\n\n## Building out a component based design\n\n* So I have two ideas here on \n\t* This is a solution where components could be consumed at the **web content level** and at the **theme level**\n\t* Definitely use **Lexicon/Clay** either route we go\n\t1. Use **Freemarker macros** to encapsulate clay components\n\t2. Use **Soy templates** to encapsulate clay components\n\t\t* Soy templates can be called from within a freemarker template\n\t\t* There is currently a [soy-metal-clay library available](https://github.com/metal/metal-clay-components) that is in development\n\t\t* [Soy cheatsheet](https://github.com/liferay/soy-cheat-sheet#miscellaneous)\n\n##### Here is an example of how Travis Cory calls soy templates by using a tag lib in web content and in the theme context\n\n```htmlmixed\nFrom web content\n\n<#assign liferay_soy = taglibLiferayHash[\"/META-INF/resources/soy.tld\"] />\n\nFrom theme\n\n<#assign liferay_soy = PortletJspTagLibs[\"/META-INF/resources/soy.tld\"] />\n\n\n<#assign context = {\"id\": \"chips\", \"chips\": [\"test1\", \"test2\"]} />\n\n<@liferay_soy[\"template-renderer\"]\n    componentId=\"chips\"\n    context=context\n    templateNamespace= \"MaterialChips.render\"\n/>\n```\n\n</article>\n\n<article id=\"2\">\n\n## Integrating Metal\n\n*It is recommended to integrate metal at the *OSGI* level although you could do it from a theme level and potentially a web content level\n\n* In relation to that keep an eye on **page fragments** that Jorge Ferrer is working on which may facilitate this\n\n* **Loop Faro** are good examples for microsites\n* Metal is only really helpful when you have **dynamic content**\n  * For static content it is not useful\n\n* Soy is only possibly on **server side**; better for **SEO**\n  * At this point it is not ideal to render JSX on Java server or have like Node servlets rendering and passing it on to Java\n\n* Talk to Travis about **workspaces**\n* Use **generator cli** rather than building things out in Liferay context\n</article>\n",
        "type": "MarkdownRemark",
        "contentDigest": "c11c7b0554ea54781188d22858a068db",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Component Architecture",
        "description": "How we can leverage a reusable Atomic Design component model",
        "author": "Jay Gatsby",
        "weight": 4,
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/component.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/component.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n<article id=\"1\">\n\n## Building out a component based design\n\n* So I have two ideas here on \n\t* This is a solution where components could be consumed at the **web content level** and at the **theme level**\n\t* Definitely use **Lexicon/Clay** either route we go\n\t1. Use **Freemarker macros** to encapsulate clay components\n\t2. Use **Soy templates** to encapsulate clay components\n\t\t* Soy templates can be called from within a freemarker template\n\t\t* There is currently a [soy-metal-clay library available](https://github.com/metal/metal-clay-components) that is in development\n\t\t* [Soy cheatsheet](https://github.com/liferay/soy-cheat-sheet#miscellaneous)\n\n##### Here is an example of how Travis Cory calls soy templates by using a tag lib in web content and in the theme context\n\n```htmlmixed\nFrom web content\n\n<#assign liferay_soy = taglibLiferayHash[\"/META-INF/resources/soy.tld\"] />\n\nFrom theme\n\n<#assign liferay_soy = PortletJspTagLibs[\"/META-INF/resources/soy.tld\"] />\n\n\n<#assign context = {\"id\": \"chips\", \"chips\": [\"test1\", \"test2\"]} />\n\n<@liferay_soy[\"template-renderer\"]\n    componentId=\"chips\"\n    context=context\n    templateNamespace= \"MaterialChips.render\"\n/>\n```\n\n</article>\n\n<article id=\"2\">\n\n## Integrating Metal\n\n*It is recommended to integrate metal at the *OSGI* level although you could do it from a theme level and potentially a web content level\n\n* In relation to that keep an eye on **page fragments** that Jorge Ferrer is working on which may facilitate this\n\n* **Loop Faro** are good examples for microsites\n* Metal is only really helpful when you have **dynamic content**\n  * For static content it is not useful\n\n* Soy is only possibly on **server side**; better for **SEO**\n  * At this point it is not ideal to render JSX on Java server or have like Node servlets rendering and passing it on to Java\n\n* Talk to Travis about **workspaces**\n* Use **generator cli** rather than building things out in Liferay context\n</article>\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/component.md",
      "fields": {
        "slug": "/liferay-component/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Liferay/front-end.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/front-end.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/front-end.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"DXP Front End Golden Nuggets\"\ndescription: \"Gleanings from the DXP Front End Training Course\"\nauthor: Jay Gatsby\nweight: 2\n---\n\n<article id=\"1\">\n\n## Overview of New Tools\n\n#### Yeoman Generator\n\n* You can use yeoman [liferay theme generator](https://dev.liferay.com/develop/tutorials/-/knowledge_base/7-0/themes-generator) or [Blade](https://dev.liferay.com/develop/tutorials/-/knowledge_base/7-0/installing-blade-cli)\n* When generating the theme you can choose from\n\t* **Styled** (includes Lexicon)\n\t* **Unstyled** (doesn't include Lexicon)\n\n#### [Lexicon](https://lexicondesign.io/)\n\n> **Lexicon** is a design system that describes how you should develop the UI\n\n* Like [grids should be designed with 8px as the base unit](https://lexicondesign.io/docs/designPrinciples/grid.html)\n* Or [alerts should should for only 10 secons if actions are associated](https://lexicondesign.io/docs/patterns/alerts.html)\n* So it's really a set of guidelines to foster a **consistent user experience**\n* Extends Bootstrap 4 (breaking changes with Bootstrap 3) and built with SASS\n* The goals is to provide a **unified & consistent** user experience\n* The BIG BENEFIT to devs is that it provides **reusable patterns** that can be leveraged into components which speeds up development...*and is more fun* ;)\n\n#### [Clay](https://claycss.com)\n\n> **Clay** is essentially the design principles of Lexicon **coded out**\n\n* Clay is not in DXP yet (currently Lexicon is the experience and implementation)\n\t* It is on master now though\n* Extension of Bootstrap 3\n* Built with SASS\n* Consists of components like **Cards and Dropdowns**\n* Has reusable patterns built in\n* We start with Clay Base when we generate a theme\n* You can get access to clay by doing:\n\n```sass\n@import \"aui/lexicon/atlas\";\n```\n\n#### Templates\n\n* Web Content Templates\n* Application Display Templates (how you want to display)\n\t* Helpful because themes don't help with layout of apps on page\n* Soy/JSX Templates (In book appendix)\n\n#### Javascript\n\n* You can use Jquery, AlloyUI & Metal JS\n\t* **Alloy** is supported but not recommended for new development\n\t* you can use **ES6**! Wahoo!!!\n\n</article>\n\n<article id=\"2\">\n\n## Generating Your Theme\n\n* What has changed in DXP on the front end?\n\t* **Liferay theme generator**\n\t* **Themelets**\n\t\t* mini UI components\n\t* [Bourbon](http://bourbon.io/) sass utils\n\t\t* Process css3 features\n\t\t* provides mixins\n\t\t* Bourbon is deprecating vendor prefix mixins\n\t\t\t* [They recommend using autoprefixer](https://github.com/thoughtbot/bourbon/issues/702)\n\t* **Theme Contributors**\n\t\t* allows you to override default theme things like the **nav, menu or dockbar**\n\t\t* You need `Blade CLI` to do this\n\t\t* Requires some backend knowledge OSGI modules\n\t\t* If you’d like to package UI resources independent of a specific theme and include them on all pages, Theme Contributors are the right tool\n\n\t* **Importing Resources**\n\t\t* Resources importer allows you to deploy theme with predefined content\n\t\t* So you can create new sites with a predefined look and feel\n\nThis command will generate the base theme into your CWD\n* `cd` into `modules/apps` from liferay root and run:\n\n```shell\nyo liferay-theme\n```\n\n* Verify that your `theme folder` was generated in `portal-folder/modules/apps`\n\t* `cd` into it and then run:\n\n```shell\ngulp deploy\n```\n\n* Then you can go to `localhost` and check\n\t* Other gulp tasks are available [here](https://github.com/liferay/liferay-theme-tasks)\n\t* Then change to your theme by clicking configure like below\n\n<img src=\"/images/liferay/set-theme.png\" alt=\"Set Theme\">\n\n</article>\n\n<article id=\"3\">\n\n## Using the Build Folder\n\n* You can pull in resources from the **build** folder\n\t* There are a lot of *good examples* in there all the way from templates to sass modules that will serve as a helpful guide\n\t* So let's saty you want a **component**, go into `build` and copy that component into `src dir`\n\t\t* Make sure to ***mirror folder structure***\n\n</article>\n\n<article id=\"4\">\n\n## Templates\n\n### Macros\n\n* [Here is the list of available freemarker macros](https://dev.liferay.com/develop/tutorials/-/knowledge_base/7-0/freemarker-macros#product-macros) that you can use out of the box\n\n* Example of navigation macro\n\n```htmlmixed\n<@liferay.navigation_menu\n\tinstance_id=\"footer_navigation_menu\"\n\tdefault_preferences=\"${freeMarkerPortletPreferences}\"\n/>\n```\n\n### Theme Settings\n\n#### Example of getting a theme setting in freemarker\n\n```htmlmixed\n<#assign show_header_search = getterUtil.getBoolean(themeDisplay.getThemeSetting(\"show-header-search\")) />\n```\n</article>\n\n<article id=\"5\">\n\n## Application Decorators\n\n### Default Options\n* Barebone\n* Borderless\n* Decorate\n\n#### Example of changing existing app decorators\n\n```sass\n.portlet-decorate .portlet-content {\n\tbackground: $portlet-topper-color;\n\tborder: 1px solid #DEEEEE;\n}\n\n.portlet-barebone .portlet-content {\n\tpadding: 0;\n}\n```\n\n* Then in `liferay-look-and-feel.xml` do (na)\n* **id** saves in DB and **name** shows up on platform\n\n```xml\n<portlet-decorator id=\"trending\" name=\"Trending\">\n\t<portlet-decorator-css-class>portlet-trending</portlet-decorator-css-class>\n</portlet-decorator>\n```\n\n</article>\n\n\n<article id=\"6\">\n\n## Javascript\n\n* To use ES6 file endings must be `file.es.js`\n* To get access to use es6 run this in root of your theme:\n\n```shell\nnpm i -S liferay-theme-es2015-hook\n```\n\n* If you want to use metal do:\n\n```shell\nnpm i -S metal metal-dom metal-state\n```\n\n* We can require js modules in our `main.js` like so:\n\n```javascript\n(function() {\n\tAUI().ready(\n\t\t'liferay-sign-in-modal',\n\t\tfunction(A) {\n\t\t\tvar signIn = A.one('.sign-in > a');\n\n\t\t\tif (signIn && signIn.getData('redirect') !== 'true') {\n\t\t\t\tsignIn.plug(Liferay.SignInModal);\n\t\t\t}\n\t\t}\n\t);\n\n\trequire(\n\t\t'space-theme/js/top_search.es',\n\t\tfunction(TopSearch) {\n\t\t\tnew TopSearch.default();\n\t\t}\n\t);\n})();\n```\n\n* And then do cool stuff like:\n\n```javascript\nimport async from 'metal/src/async/async';\nimport core from 'metal/src/core';\nimport dom from 'metal-dom/src/dom';\nimport State from 'metal-state/src/State';\n\nclass MyComponent extends State {\n\tconstructor() {\n\t\t\tconsole.log('Hello, World!');\n\t}\n\t// ...more cool stuff\n}\n\nexport default MyComponent;\n```\n\n* When you are done run:\n\n```shell\ngulp deploy\n\nor\n\ngulp watch\n```\n\n#### Class Syntax\n\n```javascript\nclass Car {\n\tconstructor(make) { //constructors!\n\t\tthis.currentSpeed = 25;\n\t}\n\tprintCurrentSpeed() {\n\t\tconsole.log('current speed: ' + this.currentSpeed + ' mph.');\n\t}\n}\n\nclass RaceCar extends Car { //inheritance\n\tconstructor(make, topSpeed) {\n\t\tsuper(make);\n\t\tthis.topSpeed = topSpeed;\n\t}\n\tgoFast(){\n\t\tthis.currentSpeed = this.topSpeed;\n\t}\n}\n```\n\n#### Arrow Functions!\n\n```javascript\nvar materials = [\n  'Hydrogen',\n  'Helium',\n  'Lithium',\n  'Beryllium'\n];\n\nmaterials.map(function(material) { \n  return material.length; \n}); // [8, 6, 7, 9]\n\nmaterials.map((material) => {\n  return material.length;\n}); // [8, 6, 7, 9]\n\nmaterials.map(material => material.length); // [8, 6, 7, 9]\n\n// arrow functions don't bind this keyword to the function either! Wahoo :)\n```\n\n#### Semantically helpful `let` and `const` block-scoped declarations\n\n```javascript\n//let\nfunction letTest() {\n\tlet x = 1; // let declares a frame scope local variable\n\n\tif (true) {\n\t\tlet x = 2; // different variable\n\t\tconsole.log(x); // 2\n\t}\n\n\tconsole.log(x); // 1\n}\n\n//const\nconst ALWAYS_SEVEN = 7;\n// this will throw an error\nALWAYS_SEVEN = 8;\n\n// You can mutate but not reassign\n```\n\n</article>\n\n\n<article id=\"7\">\n\n## Layout Templates\n\n> Controls how portlets and web content layout on the page\n\n* If you want a custom layout, you can create these in the `layouttpl/custom` folder\n\t* File: `layouttpl/custom/porygon_50_50_width_limited.tpl`\n\n```htmlmixed\n<div class=\"columns-2 container-fluid-1280\" id=\"main-content\" role=\"main\">\n\t<div class=\"portlet-layout row\">\n\t\t<div class=\"col-md-6 portlet-column portlet-column-first\" id=\"column-1\">\n\t\t\t$processor.processColumn(\"column-1\", \"portlet-column-content portlet-column-content-first\")\n\t\t</div>\n\n\t\t<div class=\"col-md-6 portlet-column portlet-column-last\" id=\"column-2\">\n\t\t\t$processor.processColumn(\"column-2\", \"portlet-column-content portlet-column-content-last\")\n\t\t</div>\n\t</div>\n</div>\n```\n\n* You can also add an image in that same folder that will show up on the platform (Example below)\n\n<img src=\"/images/liferay/custom-layout.png\" alt=\"Layout\" style=\"max-width: 400px;\">\n\n\n* Then in `liferay-look-and-feel.xml` do\n\n```xml\n<layout-templates>\n\t<custom>\n\t\t<layout-template id=\"porygon_70_30_width_limited\" name=\"Porygon 2 Columns (70/30) width limited\">\n\t\t\t<template-path>/layouttpl/custom/porygon_70_30_width_limited.tpl</template-path>\n\t\t\t<thumbnail-path>/layouttpl/custom/porygon_70_30_width_limited.png</thumbnail-path>\n\t\t</layout-template>\n\t</custom>\n</layout-templates>\n```\n\n</article>\n\n\n<article id=\"8\">\n\n## Themelets\n\n> Themelets are small reusable pieces of code that you can leverage in themes\n\n* They can exist as **npm packages** (super dope)\n* Small ui components that you can plugin to your themes\n* Beneficial because there are **npm themelets** that have already been developed that you can consume\n\t* https://www.npmjs.com/search?q=themelets\n\t* https://dev.liferay.com/develop/tutorials/-/knowledge_base/7-0/themelets\n\t* Themelet JS gets injected here in portal normal:\n\n```\n<!-- inject:js -->\n<!-- endinject -->\n```\n\n### Example\n\n#### This installs it on the same level as your theme\n\n<img src=\"/images/liferay/themelet.png\" alt=\"Themelet\">\n\n* then cd into your new themelet directory and run:\n\n```shell\nnpm link\n```\n\n* then to plug it in, navigate back to your theme folder and run\n\n```shell\ngulp extend\n```\n\n<img src=\"/images/liferay/consume-themelet.png\" alt=\"Themelet\">\n\n* then `gulp-deploy`\n\nOr you can do: `gulp extend` and search for a themelet on npm\n\n\n</article>\n\n\n<article id=\"9\">\n\n## Resources Importer\n\n* You can add assets like:\n\t* web content (articles, structures, templates)\n\t* documents\n\t* Really only beneficial if you want to package your theme for other people to reuse\n\n<img src=\"/images/liferay/resources-importer.png\" alt=\"Resources Importer\" style=\"max-width: 400px;\">\n\n\n### Embedding Apps\n\n##### Using the Portlet Name Attribute\n\n```htmlmixed\n<@liferay_portlet[\"runtime\"]\n\tportletName=\"CLASS_NAME\"\n/>\n```\n\n##### Using the Class Name Attribute\n\n```htmlmixed\n<@liferay_portlet[\"runtime\"]\n\tportletProviderAction=portletProviderAction.ACTION\n\tportletProviderClassName=\"CLASS.NAME\"\n/>\n```\n\n</article>\n\n\n<article id=\"10\">\n\n## Generating Layout Templates\n\n* Based on Bootstrap\n\n<img src=\"/images/liferay/layout-generator.png\" alt=\"Layout Generator\">\n\n\n#### Generates something like this\n\n```htmlmixed\n<div class=\"space-1-2-columns-50-50-limited\" id=\"main-content\" role=\"main\">\n\t<div class=\"portlet-layout row\">\n\t\t<div class=\"col-md-12 portlet-column portlet-column-only\" id=\"column-1\">\n\t\t\t$processor.processColumn(\"column-1\", \"portlet-column-content portlet-column-content-only\")\n\t\t</div>\n\t</div>\n\t<div class=\"portlet-layout row\">\n\t\t<div class=\"col-md-2 portlet-column portlet-column-first\" id=\"column-2\">\n\t\t\t$processor.processColumn(\"column-2\", \"portlet-column-content portlet-column-content-first\")\n\t\t</div>\n\t\t<div class=\"col-md-4 portlet-column\" id=\"column-3\">\n\t\t\t$processor.processColumn(\"column-3\", \"portlet-column-content\")\n\t\t</div>\n\t\t<div class=\"col-md-4 portlet-column\" id=\"column-4\">\n\t\t\t$processor.processColumn(\"column-4\", \"portlet-column-content\")\n\t\t</div>\n\t\t<div class=\"col-md-2 portlet-column portlet-column-last\" id=\"column-5\">\n\t\t\t$processor.processColumn(\"column-5\", \"portlet-column-content portlet-column-content-last\")\n\t\t</div>\n\t</div>\n</div>\n```\n\n</article>\n",
        "type": "MarkdownRemark",
        "contentDigest": "b7d166f4d9f1a25dc8241ed29357c927",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "DXP Front End Golden Nuggets",
        "description": "Gleanings from the DXP Front End Training Course",
        "author": "Jay Gatsby",
        "weight": 2,
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/front-end.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/front-end.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n<article id=\"1\">\n\n## Overview of New Tools\n\n#### Yeoman Generator\n\n* You can use yeoman [liferay theme generator](https://dev.liferay.com/develop/tutorials/-/knowledge_base/7-0/themes-generator) or [Blade](https://dev.liferay.com/develop/tutorials/-/knowledge_base/7-0/installing-blade-cli)\n* When generating the theme you can choose from\n\t* **Styled** (includes Lexicon)\n\t* **Unstyled** (doesn't include Lexicon)\n\n#### [Lexicon](https://lexicondesign.io/)\n\n> **Lexicon** is a design system that describes how you should develop the UI\n\n* Like [grids should be designed with 8px as the base unit](https://lexicondesign.io/docs/designPrinciples/grid.html)\n* Or [alerts should should for only 10 secons if actions are associated](https://lexicondesign.io/docs/patterns/alerts.html)\n* So it's really a set of guidelines to foster a **consistent user experience**\n* Extends Bootstrap 4 (breaking changes with Bootstrap 3) and built with SASS\n* The goals is to provide a **unified & consistent** user experience\n* The BIG BENEFIT to devs is that it provides **reusable patterns** that can be leveraged into components which speeds up development...*and is more fun* ;)\n\n#### [Clay](https://claycss.com)\n\n> **Clay** is essentially the design principles of Lexicon **coded out**\n\n* Clay is not in DXP yet (currently Lexicon is the experience and implementation)\n\t* It is on master now though\n* Extension of Bootstrap 3\n* Built with SASS\n* Consists of components like **Cards and Dropdowns**\n* Has reusable patterns built in\n* We start with Clay Base when we generate a theme\n* You can get access to clay by doing:\n\n```sass\n@import \"aui/lexicon/atlas\";\n```\n\n#### Templates\n\n* Web Content Templates\n* Application Display Templates (how you want to display)\n\t* Helpful because themes don't help with layout of apps on page\n* Soy/JSX Templates (In book appendix)\n\n#### Javascript\n\n* You can use Jquery, AlloyUI & Metal JS\n\t* **Alloy** is supported but not recommended for new development\n\t* you can use **ES6**! Wahoo!!!\n\n</article>\n\n<article id=\"2\">\n\n## Generating Your Theme\n\n* What has changed in DXP on the front end?\n\t* **Liferay theme generator**\n\t* **Themelets**\n\t\t* mini UI components\n\t* [Bourbon](http://bourbon.io/) sass utils\n\t\t* Process css3 features\n\t\t* provides mixins\n\t\t* Bourbon is deprecating vendor prefix mixins\n\t\t\t* [They recommend using autoprefixer](https://github.com/thoughtbot/bourbon/issues/702)\n\t* **Theme Contributors**\n\t\t* allows you to override default theme things like the **nav, menu or dockbar**\n\t\t* You need `Blade CLI` to do this\n\t\t* Requires some backend knowledge OSGI modules\n\t\t* If you’d like to package UI resources independent of a specific theme and include them on all pages, Theme Contributors are the right tool\n\n\t* **Importing Resources**\n\t\t* Resources importer allows you to deploy theme with predefined content\n\t\t* So you can create new sites with a predefined look and feel\n\nThis command will generate the base theme into your CWD\n* `cd` into `modules/apps` from liferay root and run:\n\n```shell\nyo liferay-theme\n```\n\n* Verify that your `theme folder` was generated in `portal-folder/modules/apps`\n\t* `cd` into it and then run:\n\n```shell\ngulp deploy\n```\n\n* Then you can go to `localhost` and check\n\t* Other gulp tasks are available [here](https://github.com/liferay/liferay-theme-tasks)\n\t* Then change to your theme by clicking configure like below\n\n<img src=\"/images/liferay/set-theme.png\" alt=\"Set Theme\">\n\n</article>\n\n<article id=\"3\">\n\n## Using the Build Folder\n\n* You can pull in resources from the **build** folder\n\t* There are a lot of *good examples* in there all the way from templates to sass modules that will serve as a helpful guide\n\t* So let's saty you want a **component**, go into `build` and copy that component into `src dir`\n\t\t* Make sure to ***mirror folder structure***\n\n</article>\n\n<article id=\"4\">\n\n## Templates\n\n### Macros\n\n* [Here is the list of available freemarker macros](https://dev.liferay.com/develop/tutorials/-/knowledge_base/7-0/freemarker-macros#product-macros) that you can use out of the box\n\n* Example of navigation macro\n\n```htmlmixed\n<@liferay.navigation_menu\n\tinstance_id=\"footer_navigation_menu\"\n\tdefault_preferences=\"${freeMarkerPortletPreferences}\"\n/>\n```\n\n### Theme Settings\n\n#### Example of getting a theme setting in freemarker\n\n```htmlmixed\n<#assign show_header_search = getterUtil.getBoolean(themeDisplay.getThemeSetting(\"show-header-search\")) />\n```\n</article>\n\n<article id=\"5\">\n\n## Application Decorators\n\n### Default Options\n* Barebone\n* Borderless\n* Decorate\n\n#### Example of changing existing app decorators\n\n```sass\n.portlet-decorate .portlet-content {\n\tbackground: $portlet-topper-color;\n\tborder: 1px solid #DEEEEE;\n}\n\n.portlet-barebone .portlet-content {\n\tpadding: 0;\n}\n```\n\n* Then in `liferay-look-and-feel.xml` do (na)\n* **id** saves in DB and **name** shows up on platform\n\n```xml\n<portlet-decorator id=\"trending\" name=\"Trending\">\n\t<portlet-decorator-css-class>portlet-trending</portlet-decorator-css-class>\n</portlet-decorator>\n```\n\n</article>\n\n\n<article id=\"6\">\n\n## Javascript\n\n* To use ES6 file endings must be `file.es.js`\n* To get access to use es6 run this in root of your theme:\n\n```shell\nnpm i -S liferay-theme-es2015-hook\n```\n\n* If you want to use metal do:\n\n```shell\nnpm i -S metal metal-dom metal-state\n```\n\n* We can require js modules in our `main.js` like so:\n\n```javascript\n(function() {\n\tAUI().ready(\n\t\t'liferay-sign-in-modal',\n\t\tfunction(A) {\n\t\t\tvar signIn = A.one('.sign-in > a');\n\n\t\t\tif (signIn && signIn.getData('redirect') !== 'true') {\n\t\t\t\tsignIn.plug(Liferay.SignInModal);\n\t\t\t}\n\t\t}\n\t);\n\n\trequire(\n\t\t'space-theme/js/top_search.es',\n\t\tfunction(TopSearch) {\n\t\t\tnew TopSearch.default();\n\t\t}\n\t);\n})();\n```\n\n* And then do cool stuff like:\n\n```javascript\nimport async from 'metal/src/async/async';\nimport core from 'metal/src/core';\nimport dom from 'metal-dom/src/dom';\nimport State from 'metal-state/src/State';\n\nclass MyComponent extends State {\n\tconstructor() {\n\t\t\tconsole.log('Hello, World!');\n\t}\n\t// ...more cool stuff\n}\n\nexport default MyComponent;\n```\n\n* When you are done run:\n\n```shell\ngulp deploy\n\nor\n\ngulp watch\n```\n\n#### Class Syntax\n\n```javascript\nclass Car {\n\tconstructor(make) { //constructors!\n\t\tthis.currentSpeed = 25;\n\t}\n\tprintCurrentSpeed() {\n\t\tconsole.log('current speed: ' + this.currentSpeed + ' mph.');\n\t}\n}\n\nclass RaceCar extends Car { //inheritance\n\tconstructor(make, topSpeed) {\n\t\tsuper(make);\n\t\tthis.topSpeed = topSpeed;\n\t}\n\tgoFast(){\n\t\tthis.currentSpeed = this.topSpeed;\n\t}\n}\n```\n\n#### Arrow Functions!\n\n```javascript\nvar materials = [\n  'Hydrogen',\n  'Helium',\n  'Lithium',\n  'Beryllium'\n];\n\nmaterials.map(function(material) { \n  return material.length; \n}); // [8, 6, 7, 9]\n\nmaterials.map((material) => {\n  return material.length;\n}); // [8, 6, 7, 9]\n\nmaterials.map(material => material.length); // [8, 6, 7, 9]\n\n// arrow functions don't bind this keyword to the function either! Wahoo :)\n```\n\n#### Semantically helpful `let` and `const` block-scoped declarations\n\n```javascript\n//let\nfunction letTest() {\n\tlet x = 1; // let declares a frame scope local variable\n\n\tif (true) {\n\t\tlet x = 2; // different variable\n\t\tconsole.log(x); // 2\n\t}\n\n\tconsole.log(x); // 1\n}\n\n//const\nconst ALWAYS_SEVEN = 7;\n// this will throw an error\nALWAYS_SEVEN = 8;\n\n// You can mutate but not reassign\n```\n\n</article>\n\n\n<article id=\"7\">\n\n## Layout Templates\n\n> Controls how portlets and web content layout on the page\n\n* If you want a custom layout, you can create these in the `layouttpl/custom` folder\n\t* File: `layouttpl/custom/porygon_50_50_width_limited.tpl`\n\n```htmlmixed\n<div class=\"columns-2 container-fluid-1280\" id=\"main-content\" role=\"main\">\n\t<div class=\"portlet-layout row\">\n\t\t<div class=\"col-md-6 portlet-column portlet-column-first\" id=\"column-1\">\n\t\t\t$processor.processColumn(\"column-1\", \"portlet-column-content portlet-column-content-first\")\n\t\t</div>\n\n\t\t<div class=\"col-md-6 portlet-column portlet-column-last\" id=\"column-2\">\n\t\t\t$processor.processColumn(\"column-2\", \"portlet-column-content portlet-column-content-last\")\n\t\t</div>\n\t</div>\n</div>\n```\n\n* You can also add an image in that same folder that will show up on the platform (Example below)\n\n<img src=\"/images/liferay/custom-layout.png\" alt=\"Layout\" style=\"max-width: 400px;\">\n\n\n* Then in `liferay-look-and-feel.xml` do\n\n```xml\n<layout-templates>\n\t<custom>\n\t\t<layout-template id=\"porygon_70_30_width_limited\" name=\"Porygon 2 Columns (70/30) width limited\">\n\t\t\t<template-path>/layouttpl/custom/porygon_70_30_width_limited.tpl</template-path>\n\t\t\t<thumbnail-path>/layouttpl/custom/porygon_70_30_width_limited.png</thumbnail-path>\n\t\t</layout-template>\n\t</custom>\n</layout-templates>\n```\n\n</article>\n\n\n<article id=\"8\">\n\n## Themelets\n\n> Themelets are small reusable pieces of code that you can leverage in themes\n\n* They can exist as **npm packages** (super dope)\n* Small ui components that you can plugin to your themes\n* Beneficial because there are **npm themelets** that have already been developed that you can consume\n\t* https://www.npmjs.com/search?q=themelets\n\t* https://dev.liferay.com/develop/tutorials/-/knowledge_base/7-0/themelets\n\t* Themelet JS gets injected here in portal normal:\n\n```\n<!-- inject:js -->\n<!-- endinject -->\n```\n\n### Example\n\n#### This installs it on the same level as your theme\n\n<img src=\"/images/liferay/themelet.png\" alt=\"Themelet\">\n\n* then cd into your new themelet directory and run:\n\n```shell\nnpm link\n```\n\n* then to plug it in, navigate back to your theme folder and run\n\n```shell\ngulp extend\n```\n\n<img src=\"/images/liferay/consume-themelet.png\" alt=\"Themelet\">\n\n* then `gulp-deploy`\n\nOr you can do: `gulp extend` and search for a themelet on npm\n\n\n</article>\n\n\n<article id=\"9\">\n\n## Resources Importer\n\n* You can add assets like:\n\t* web content (articles, structures, templates)\n\t* documents\n\t* Really only beneficial if you want to package your theme for other people to reuse\n\n<img src=\"/images/liferay/resources-importer.png\" alt=\"Resources Importer\" style=\"max-width: 400px;\">\n\n\n### Embedding Apps\n\n##### Using the Portlet Name Attribute\n\n```htmlmixed\n<@liferay_portlet[\"runtime\"]\n\tportletName=\"CLASS_NAME\"\n/>\n```\n\n##### Using the Class Name Attribute\n\n```htmlmixed\n<@liferay_portlet[\"runtime\"]\n\tportletProviderAction=portletProviderAction.ACTION\n\tportletProviderClassName=\"CLASS.NAME\"\n/>\n```\n\n</article>\n\n\n<article id=\"10\">\n\n## Generating Layout Templates\n\n* Based on Bootstrap\n\n<img src=\"/images/liferay/layout-generator.png\" alt=\"Layout Generator\">\n\n\n#### Generates something like this\n\n```htmlmixed\n<div class=\"space-1-2-columns-50-50-limited\" id=\"main-content\" role=\"main\">\n\t<div class=\"portlet-layout row\">\n\t\t<div class=\"col-md-12 portlet-column portlet-column-only\" id=\"column-1\">\n\t\t\t$processor.processColumn(\"column-1\", \"portlet-column-content portlet-column-content-only\")\n\t\t</div>\n\t</div>\n\t<div class=\"portlet-layout row\">\n\t\t<div class=\"col-md-2 portlet-column portlet-column-first\" id=\"column-2\">\n\t\t\t$processor.processColumn(\"column-2\", \"portlet-column-content portlet-column-content-first\")\n\t\t</div>\n\t\t<div class=\"col-md-4 portlet-column\" id=\"column-3\">\n\t\t\t$processor.processColumn(\"column-3\", \"portlet-column-content\")\n\t\t</div>\n\t\t<div class=\"col-md-4 portlet-column\" id=\"column-4\">\n\t\t\t$processor.processColumn(\"column-4\", \"portlet-column-content\")\n\t\t</div>\n\t\t<div class=\"col-md-2 portlet-column portlet-column-last\" id=\"column-5\">\n\t\t\t$processor.processColumn(\"column-5\", \"portlet-column-content portlet-column-content-last\")\n\t\t</div>\n\t</div>\n</div>\n```\n\n</article>\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/front-end.md",
      "fields": {
        "slug": "/liferay-front-end/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Liferay/index.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/index.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/index.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"Liferay\"\ndescription: \"DXP Updates\"\nauthor: Jay Gatsby\nicon: \"code-file\"\nweight: 1\n---\n\n\n\n<article id=\"1\">\n\n## TLDR;\n\n### Changes\n\n* Access to **modern JS** features (ES6)\n* Way forward to atomic design is via **Lexicon/Clay** (lots of promise there)\n* ***Node & Npm***! Need I say more?\n* **Gulp tasks** in our theme to speed up deployment and gives us the facility to integrate new steps into the build process like adding [autoprefixer](https://autoprefixer.github.io/) for automagic vendor prefixing\n* Sass **Bourbon** mixins\n* Out of the box **SVG icons** & font awesome\n* **Yeoman** generator to scaffold theme and template related tasks\n* [**Themelets**](https://dev.liferay.com/develop/tutorials/-/knowledge_base/7-0/themelets) which can be npm packages that you pull into theme\n* No more **eye icon** to show and hide admin settings\n* **Importing** Lar files is really easy now\n* **Searching** for templates is better\n* **UI is easier & faster** to customize web content, templates, structures\n* Cool **simulation feature** for checking design responsiveness\n* Recommendation is to **[not use Alloy UI](http://alloyui.com/rosetta-stone/)** for any new development (they've actually included **jQuery** lol)\n* DXP requires **Java 8**\n\n##### [Breaking Changes](https://dev.liferay.com/develop/reference/-/knowledge_base/7-0/breaking-changes)\n\n</article>\n",
        "type": "MarkdownRemark",
        "contentDigest": "96d3bf281f3abcb3f06ee49da81a59d3",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Liferay",
        "description": "DXP Updates",
        "author": "Jay Gatsby",
        "icon": "code-file",
        "weight": 1,
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/index.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/index.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n\n\n<article id=\"1\">\n\n## TLDR;\n\n### Changes\n\n* Access to **modern JS** features (ES6)\n* Way forward to atomic design is via **Lexicon/Clay** (lots of promise there)\n* ***Node & Npm***! Need I say more?\n* **Gulp tasks** in our theme to speed up deployment and gives us the facility to integrate new steps into the build process like adding [autoprefixer](https://autoprefixer.github.io/) for automagic vendor prefixing\n* Sass **Bourbon** mixins\n* Out of the box **SVG icons** & font awesome\n* **Yeoman** generator to scaffold theme and template related tasks\n* [**Themelets**](https://dev.liferay.com/develop/tutorials/-/knowledge_base/7-0/themelets) which can be npm packages that you pull into theme\n* No more **eye icon** to show and hide admin settings\n* **Importing** Lar files is really easy now\n* **Searching** for templates is better\n* **UI is easier & faster** to customize web content, templates, structures\n* Cool **simulation feature** for checking design responsiveness\n* Recommendation is to **[not use Alloy UI](http://alloyui.com/rosetta-stone/)** for any new development (they've actually included **jQuery** lol)\n* DXP requires **Java 8**\n\n##### [Breaking Changes](https://dev.liferay.com/develop/reference/-/knowledge_base/7-0/breaking-changes)\n\n</article>\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/index.md",
      "fields": {
        "slug": "/liferay/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Liferay/mysql.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/mysql.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/mysql.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"MySql\"\ndescription: \"Importing mysql db to Liferay\"\nauthor: Jay Gatsby\nweight: 5\n---\n\n\n\n<article id=\"1\">\n\n## How To Import\n\n* If db name does not exist, create a blank one\n\t* **login** to mysql\n\n```shell\nmysql -u root -p\n\n# Once in shell\n\nCREATE DATABASE db-name;\n\n# then type\n\nexit\n```\n\n* Once you have exited the shell, run \n\n```shell\nmysql -u root -p database_name < file.sql\n```\n\n* Then in your `bundles/tomcat-7.0.62/webapps/ROOT/WEB-INF/classes/portal-ext.properties` adjust this section:\n\n```\njdbc.default.driverClassName=com.mysql.jdbc.Driver\njdbc.default.url=jdbc:mysql://localhost:3306/YOUR_DB?useUnicode=true&characterEncoding=UTF-8&useFastDateParsing=false\njdbc.default.username=root\njdbc.default.password=YOUR_PASS\n```\n\n</article>\n",
        "type": "MarkdownRemark",
        "contentDigest": "a4c43dce62cad7695d4e79392ba72fae",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "MySql",
        "description": "Importing mysql db to Liferay",
        "author": "Jay Gatsby",
        "weight": 5,
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/mysql.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/mysql.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n\n\n<article id=\"1\">\n\n## How To Import\n\n* If db name does not exist, create a blank one\n\t* **login** to mysql\n\n```shell\nmysql -u root -p\n\n# Once in shell\n\nCREATE DATABASE db-name;\n\n# then type\n\nexit\n```\n\n* Once you have exited the shell, run \n\n```shell\nmysql -u root -p database_name < file.sql\n```\n\n* Then in your `bundles/tomcat-7.0.62/webapps/ROOT/WEB-INF/classes/portal-ext.properties` adjust this section:\n\n```\njdbc.default.driverClassName=com.mysql.jdbc.Driver\njdbc.default.url=jdbc:mysql://localhost:3306/YOUR_DB?useUnicode=true&characterEncoding=UTF-8&useFastDateParsing=false\njdbc.default.username=root\njdbc.default.password=YOUR_PASS\n```\n\n</article>\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/mysql.md",
      "fields": {
        "slug": "/liferay-mysql/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Liferay/templates.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/templates.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/templates.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"DXP Templating\"\ndescription: \"Describes the 3 options when it comes to templates\"\nauthor: Jay Gatsby\nweight: 3\n---\n\n<article id=\"1\">\n\n## Overview\n\n### Application Display Templates (ADTs)\n\n* **Assets** like web content and Dynamic Data Lists (DDLs)\n* **Applications** like Asset Publisher or custom Navigation\n* **Custom Applications** developed in Java\n* **Email Notifications**\n\n* You can also use Soy Templates and JSX templates\n\n### Freemarker\n\n* **Tag libs** are baller\n\t* Taglibs are a tool to create consistent, responsive, accessible UI\ncomponents for use in development\n\n```htmlmixed\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<%@ taglib uri=\"http://java.sun.com/portlet_2_0\" prefix=\"portlet\" %>\n<%@ taglib uri=\"http://liferay.com/tld/aui\" prefix=\"aui\" %>\n<%@ taglib uri=\"http://liferay.com/tld/portlet\" prefix=\"liferay-portlet\" %>\n\n<PREFIX:{tag-name} [TAG-ATTRIBUTES] />\n```\n\n* You can drop a **web content** field on structure while in the UI\n* You can **inject Database information** (no longer need to use resource locator)\n\t* New module called \"**Context Contributors**\" that allow you to access resources more securely than the resource locator\n\t\t* Because to use the resource locator, you have to give unrestricted access\n\t\t* Two Types of context contributors\n\t\t\t* **TYPE_GLOBAL**: variables available globally\n\t\t\t* **TYPE_THEME**: variables available only within themes\n\n* **Breaking Changes** in freemarker for DXP\n\t* https://dev.liferay.com/develop/reference/-/knowledge_base/7-0/breaking-changes\n\n### Clay components and elements\n\n* You can use [Clay components](https://claycss.com/) in your templates\n\t* Gives you lego type functionality\n\t* You can compose components\n\n### Generic Templates\n\n* **Standalone** templates not associated to a structure that can be imported into other templates \n\n```htmlmixed\n<#include \"${full_templates_path}/navigation.ftl\" />\n```\n\n### Embeddable Apps\n\n* You can **embed portlets** in freemarker\n\n</article>\n\n\n<article id=\"2\">\n\n## Workflow notifications\n\n* If backend developers create a Kaleo workflow for content manangement front end devs can provide **notification templates**\n\n```htmlmixed\n<#assign comments = taskComments!\"\">\n    <!-- email body -->\n\t\t<#assign journalArticleLocalService = serviceLocator.findService(\"com.liferay.journal.service.JournalArticleLocalService\") />\n\n\t\t<#assign article = journalArticleLocalService.getArticleByUrlTitle(36823, \"header-web-content\") />\n\n\t\t<#if article??>\n\t\t\t${article.getContent()?replace(\"]>\", \"\")}\n\t\t</#if>\n\n\t\t<p>\n\t\t\tYour assignment, ${entryType}, has been graded by the instructor. \n\t\t<#if comments != \"\" >\n\t\t\t<br />Here are the comments included: <strong>${comments}</strong>\n\t\t</#if>\n\t\t</p>\n\n<p>Sincerely,<br /><strong>S.P.A.C.E. Instructor</strong></p>\n```\n\n* Note is that using journal service has to be set to unrestricted which brings up security vulnerabilities like accessing the db\n\t* You can minimize this by following the **principle of least permissions**\n\t* Or use a context contributor so you can inject web content without exposing the entire journal service\n\n</article>\n\n\n<article id=\"3\">\n\n## Application Display Templates\n\n> Main difference from normal templates is using the **asset renderer**\n\n\n\n</article>\n",
        "type": "MarkdownRemark",
        "contentDigest": "96040cb7f2389840a4377220a3ee7ce3",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "DXP Templating",
        "description": "Describes the 3 options when it comes to templates",
        "author": "Jay Gatsby",
        "weight": 3,
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/templates.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/templates.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n<article id=\"1\">\n\n## Overview\n\n### Application Display Templates (ADTs)\n\n* **Assets** like web content and Dynamic Data Lists (DDLs)\n* **Applications** like Asset Publisher or custom Navigation\n* **Custom Applications** developed in Java\n* **Email Notifications**\n\n* You can also use Soy Templates and JSX templates\n\n### Freemarker\n\n* **Tag libs** are baller\n\t* Taglibs are a tool to create consistent, responsive, accessible UI\ncomponents for use in development\n\n```htmlmixed\n<%@ taglib uri=\"http://java.sun.com/jsp/jstl/core\" prefix=\"c\" %>\n<%@ taglib uri=\"http://java.sun.com/portlet_2_0\" prefix=\"portlet\" %>\n<%@ taglib uri=\"http://liferay.com/tld/aui\" prefix=\"aui\" %>\n<%@ taglib uri=\"http://liferay.com/tld/portlet\" prefix=\"liferay-portlet\" %>\n\n<PREFIX:{tag-name} [TAG-ATTRIBUTES] />\n```\n\n* You can drop a **web content** field on structure while in the UI\n* You can **inject Database information** (no longer need to use resource locator)\n\t* New module called \"**Context Contributors**\" that allow you to access resources more securely than the resource locator\n\t\t* Because to use the resource locator, you have to give unrestricted access\n\t\t* Two Types of context contributors\n\t\t\t* **TYPE_GLOBAL**: variables available globally\n\t\t\t* **TYPE_THEME**: variables available only within themes\n\n* **Breaking Changes** in freemarker for DXP\n\t* https://dev.liferay.com/develop/reference/-/knowledge_base/7-0/breaking-changes\n\n### Clay components and elements\n\n* You can use [Clay components](https://claycss.com/) in your templates\n\t* Gives you lego type functionality\n\t* You can compose components\n\n### Generic Templates\n\n* **Standalone** templates not associated to a structure that can be imported into other templates \n\n```htmlmixed\n<#include \"${full_templates_path}/navigation.ftl\" />\n```\n\n### Embeddable Apps\n\n* You can **embed portlets** in freemarker\n\n</article>\n\n\n<article id=\"2\">\n\n## Workflow notifications\n\n* If backend developers create a Kaleo workflow for content manangement front end devs can provide **notification templates**\n\n```htmlmixed\n<#assign comments = taskComments!\"\">\n    <!-- email body -->\n\t\t<#assign journalArticleLocalService = serviceLocator.findService(\"com.liferay.journal.service.JournalArticleLocalService\") />\n\n\t\t<#assign article = journalArticleLocalService.getArticleByUrlTitle(36823, \"header-web-content\") />\n\n\t\t<#if article??>\n\t\t\t${article.getContent()?replace(\"]>\", \"\")}\n\t\t</#if>\n\n\t\t<p>\n\t\t\tYour assignment, ${entryType}, has been graded by the instructor. \n\t\t<#if comments != \"\" >\n\t\t\t<br />Here are the comments included: <strong>${comments}</strong>\n\t\t</#if>\n\t\t</p>\n\n<p>Sincerely,<br /><strong>S.P.A.C.E. Instructor</strong></p>\n```\n\n* Note is that using journal service has to be set to unrestricted which brings up security vulnerabilities like accessing the db\n\t* You can minimize this by following the **principle of least permissions**\n\t* Or use a context contributor so you can inject web content without exposing the entire journal service\n\n</article>\n\n\n<article id=\"3\">\n\n## Application Display Templates\n\n> Main difference from normal templates is using the **asset renderer**\n\n\n\n</article>\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Liferay/templates.md",
      "fields": {
        "slug": "/liferay-templates/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Linux/actions.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Linux/actions.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/Linux/actions.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"Actions\"\ndescription: \"Cool actions you can do in linux\"\nauthor: Jay Gatsby\nweight: 2\n---\n\n\n\n<article id=\"1\">\n\n## Adding GitHub name and email in the global config \n\n```shell\ngit config --global user.name \"John Doe\"\ngit config --global user.email johndoe@example.com\n```\n\n</article>\n\n\n<article id=\"2\">\n\n## Change Default Terminal\n\n```shell\nsudo chsh -s $(which zsh)\n```\n\n</article>\n\n\n<article id=\"3\">\n\n## How to install a .deb file\n\n```shell\nsudo dpkg -i /path/to/deb/file\n```\n\n</article>\n\n\n<article id=\"4\">\n\n## Change Having to type password on Sudo command\n\nOpen terminal window and type:\n\n```\nsudo visudo\n```\n\nIn the bottom of the file, type the follow:\n\n```\nusername ALL=(ALL) NOPASSWD: ALL\n```\n\n</article>\n\n\n<article id=\"5\">\n\n## Permissions\n\n* Permissions are granted with:\n```\nchmod a+x filename\n```\n\nIf you run a `ls -l` in the cli you will get a list of files and folders with a string at the front like so:\n* -rw-rw-r--\n    * The first space will be blank for a file but `d` if it is a **directory**\n    * The next three spaces represent permissions for **current user**\n    * The next three **groups**\n    * The next three **all users**\n    * `x` = executable\n    * `w` = writable\n    * `r` = readable\n\n\n* So when running `a+x` you are saying to make file executable for all users\n\n</article>\n\n\n<article id=\"6\">\n\n## How to Remap Keys in Ubuntu\n\n* This approach relies upon a program to listen for keys events and then dispatching the key combo you want using a virtual keybard\n\n1. `sudo apt install xvkbd` This is the virtual keyboard\n2. `sudo apt install xbindkeys` This is the listener\n3. `sudo apt install xbindkeys-config` This is the listener gui\n\n* The data goes into your `.xbindkeysrc` file in your home dir\n\nHere is an example:\n\n```bash\n#Select Left\n\"xvkbd -xsendevent -text \"\\C\\S\\[Left]\"\"\n    Control+Shift+Mod2+Mod5 + j\n\n#Select Right\n\"xvkbd -xsendevent -text \"\\C\\S\\[Right]\"\"\n    Control+Shift+Mod2+Mod5 + l\n```\n\n* The above simply listens for the meta key + control + shift and sends a select left and select right text command with the virtual keyboard\n\n* After modifying your `.xbindkeysrc` file you must kill the xbindkeys process with `pkill -9 xbindkeys` and then rerun it with `xbindkeys` \n  * If you want to verify it is running you can do `pgrep xbindkeys` which will output the **pid**\n\n</article>\n\n\n<article id=\"7\">\n\n## How to unzip a tar file\n```\ntar -zxvf file\n```\n\n### How to unzip a gz file\n\n```\ngunzip < file.gz > file\n```\n\n</article>\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "3c4cdda60762e14c211f883f594c0341",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Actions",
        "description": "Cool actions you can do in linux",
        "author": "Jay Gatsby",
        "weight": 2,
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/Linux/actions.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/Linux/actions.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n\n\n<article id=\"1\">\n\n## Adding GitHub name and email in the global config \n\n```shell\ngit config --global user.name \"John Doe\"\ngit config --global user.email johndoe@example.com\n```\n\n</article>\n\n\n<article id=\"2\">\n\n## Change Default Terminal\n\n```shell\nsudo chsh -s $(which zsh)\n```\n\n</article>\n\n\n<article id=\"3\">\n\n## How to install a .deb file\n\n```shell\nsudo dpkg -i /path/to/deb/file\n```\n\n</article>\n\n\n<article id=\"4\">\n\n## Change Having to type password on Sudo command\n\nOpen terminal window and type:\n\n```\nsudo visudo\n```\n\nIn the bottom of the file, type the follow:\n\n```\nusername ALL=(ALL) NOPASSWD: ALL\n```\n\n</article>\n\n\n<article id=\"5\">\n\n## Permissions\n\n* Permissions are granted with:\n```\nchmod a+x filename\n```\n\nIf you run a `ls -l` in the cli you will get a list of files and folders with a string at the front like so:\n* -rw-rw-r--\n    * The first space will be blank for a file but `d` if it is a **directory**\n    * The next three spaces represent permissions for **current user**\n    * The next three **groups**\n    * The next three **all users**\n    * `x` = executable\n    * `w` = writable\n    * `r` = readable\n\n\n* So when running `a+x` you are saying to make file executable for all users\n\n</article>\n\n\n<article id=\"6\">\n\n## How to Remap Keys in Ubuntu\n\n* This approach relies upon a program to listen for keys events and then dispatching the key combo you want using a virtual keybard\n\n1. `sudo apt install xvkbd` This is the virtual keyboard\n2. `sudo apt install xbindkeys` This is the listener\n3. `sudo apt install xbindkeys-config` This is the listener gui\n\n* The data goes into your `.xbindkeysrc` file in your home dir\n\nHere is an example:\n\n```bash\n#Select Left\n\"xvkbd -xsendevent -text \"\\C\\S\\[Left]\"\"\n    Control+Shift+Mod2+Mod5 + j\n\n#Select Right\n\"xvkbd -xsendevent -text \"\\C\\S\\[Right]\"\"\n    Control+Shift+Mod2+Mod5 + l\n```\n\n* The above simply listens for the meta key + control + shift and sends a select left and select right text command with the virtual keyboard\n\n* After modifying your `.xbindkeysrc` file you must kill the xbindkeys process with `pkill -9 xbindkeys` and then rerun it with `xbindkeys` \n  * If you want to verify it is running you can do `pgrep xbindkeys` which will output the **pid**\n\n</article>\n\n\n<article id=\"7\">\n\n## How to unzip a tar file\n```\ntar -zxvf file\n```\n\n### How to unzip a gz file\n\n```\ngunzip < file.gz > file\n```\n\n</article>\n\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Linux/actions.md",
      "fields": {
        "slug": "/linux-actions/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Linux/index.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Linux/index.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/Linux/index.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"Linux\"\ndescription: \"Intro to Linux\"\nauthor: Jay Gatsby\nicon: \"cloud\"\nweight: 1\n---\n\n\n\n<article id=\"1\">\n\n## History\n> Linux, Mac, and Android are based on ideas and specs of *UNIX*\n\n* Started as an os at AT&T in the 60s\n* Unix was originally built for large *mainframe computers* that people would use at the same time\n* Every program on UNIX system read input from *standard input devide (stdin)* and write to *standard output (stdout)*\n  * The big idea is that rather than type everything yourself, you can have the computer **type for you**\n  * There were terminals and you ran your commands which \"printed out\" your stuff to an actual printer\n  \n</article>\n\n\n<article id=\"2\">\n\n## Shell\n> UNIX still matters because it is still portable to many kinds of hardware\n\n* **Introduction to Bash, VIM & Regex**\n  * wifi routers\n  * dsl and cable modems\n  * raspberry pi, beaglebone, nvidia, jetson\n  * android phones\n  * linux laptop or desktop\n  * Mac OSX computer\n  * Web server\n</article>\n\n\n<article id=\"3\">\n\n## Philosophy\n> A set of principles of how programs should relate to each other\n\n* each program should do one thing well\n* the **output** of a program can be the **input** of another\n\n</article>\n",
        "type": "MarkdownRemark",
        "contentDigest": "4713879e2f3bddddf5c5327e7855c78f",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Linux",
        "description": "Intro to Linux",
        "author": "Jay Gatsby",
        "icon": "cloud",
        "weight": 1,
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/Linux/index.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/Linux/index.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n\n\n<article id=\"1\">\n\n## History\n> Linux, Mac, and Android are based on ideas and specs of *UNIX*\n\n* Started as an os at AT&T in the 60s\n* Unix was originally built for large *mainframe computers* that people would use at the same time\n* Every program on UNIX system read input from *standard input devide (stdin)* and write to *standard output (stdout)*\n  * The big idea is that rather than type everything yourself, you can have the computer **type for you**\n  * There were terminals and you ran your commands which \"printed out\" your stuff to an actual printer\n  \n</article>\n\n\n<article id=\"2\">\n\n## Shell\n> UNIX still matters because it is still portable to many kinds of hardware\n\n* **Introduction to Bash, VIM & Regex**\n  * wifi routers\n  * dsl and cable modems\n  * raspberry pi, beaglebone, nvidia, jetson\n  * android phones\n  * linux laptop or desktop\n  * Mac OSX computer\n  * Web server\n</article>\n\n\n<article id=\"3\">\n\n## Philosophy\n> A set of principles of how programs should relate to each other\n\n* each program should do one thing well\n* the **output** of a program can be the **input** of another\n\n</article>\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Linux/index.md",
      "fields": {
        "slug": "/linux/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/Security/index.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/Security/index.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/Security/index.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"Security\"\ndescription: \"Web Security\"\nauthor: Jay Gatsby\nicon: \"lock\"\nweight: 1\n---\n\n\n\n<article id=\"1\">\n\n## User Data\n\n> Never trust raw user data!\n\n<img src=\"/images/security/user-data.png\" alt=\"XSS Defenses\">\n\n</article>\n",
        "type": "MarkdownRemark",
        "contentDigest": "1b9567a8fe7870bb79886304e372a976",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Security",
        "description": "Web Security",
        "author": "Jay Gatsby",
        "icon": "lock",
        "weight": 1,
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/Security/index.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/Security/index.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n\n\n<article id=\"1\">\n\n## User Data\n\n> Never trust raw user data!\n\n<img src=\"/images/security/user-data.png\" alt=\"XSS Defenses\">\n\n</article>\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/Security/index.md",
      "fields": {
        "slug": "/security/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/async.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/async.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/async.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"Asynchronous JS\"\ndescription: \"Deep dive into how js deals with async tasks\"\nauthor: Jay Gatsby\nweight: 5\n---\n\n<article id=\"1\">\n\n## Intro\n\n> Async is the backbone of modern web dev in JS\n\n* Since JS is sync we can't move onto the next line until the current line is finished executing\n\t* So then what happens when we call a function that takes 20 seconds to run?\n\t\t* Your program will freeze\n\t\t* The tension is sometimes you want to just call the function and move on if you don't need the data\n\t\t\t* But sometimes you want to wait for the data to return before doing anything else\n\n* Browser APIs (not JS itself) provide us with an async architecture\n\n* In order to understand async you have to understand:\n\t1. Thread of execution\n\t2. Memory/variable environment\n\t3. Call stack\n\t4. Web Browser APIs/Node background threads\n\t5. Callback/Message/Task queue\n\t6. Event Loop\n\n</article>\n\n\n<article id=\"2\">\n\n## Callback Queue\n\n* The callback queue **will not push anything onto the call stack until the call stack is TOTALLY empty**!\n\t* There can't event be any executable code to run in the global context \n\t* The event loop checks for this\n* So even though you told your timer in the example above to take `0ms` it actually will take at least as long as it takes to get to the bottom of the call stack\n* **Lightbulb**: this sheds light on how Node.js api methods are async\n\t* Because those methods transcend the JS language, they can provide the benefit of asynchronicity\n\n</article>\n\n<article id=\"3\">\n\n## Event Loop\n\n* The event loop is a posh term that simply means it is **checking if the call stack is totally empty**\n* So above it keeps checking over and over to see if `blockFor1Second` has been popped off until it gives the green light for the function in the callback queue to be pushed onto the call stack\n\n</article>\n\n<article id=\"4\">\n\n## Browser APIs\n\n### setTimeout\n\n* `setTimeout` doesn't behave in the typical way a normal function does\n\t* We spin this up in the background\n\t* It is a built in way to create an async timer\n\t* It speaks to our browser API\n\t\t* So it is outside of the normal JS land that we are used to\n\t* If we were to create a timer ourselves, it would be sync because JS is single threaded\n\t\t* It wouldn't be able to execute anything else\n\n<p data-height=\"300\" data-theme-id=\"31719\" data-slug-hash=\"GdrryW\" data-default-tab=\"js,result\" data-user=\"RyanGarant\" data-embed-version=\"2\" data-pen-title=\"setTimeout Async Example\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/RyanGarant/pen/GdrryW/\">setTimeout Async Example</a> by Ryan Garant (<a href=\"https://codepen.io/RyanGarant\">@RyanGarant</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n\n* \"Me first `i`\" will print out first\n\t* setTimeout is *almost like an api request* because it is speaking to the web browser\n\t* It doesn't just willy nilly push the call to `printHello` onto the call stack\n\t\t* It pushes it into the **callback queue**\n\n### Ways to NOT block our thread\n\n* There are many things where waiting would block our thread\n\t* so we use Browser APIs instead\n\n1. A timer to finish running\n2. New info from a server (AJAX)\n3. Indication that a portion of the page has loaded\n4. User interaction (clicks, mouseovers, drags)\n5. Writing/Reading to File System (Node)\n6. Writing/reading db (Firebase)\n\n* For each of these we have a web browser feature that we can spin up in the background and only push onto the call stack when the main thread including global code is done running\n\n```javascript\nfunction display(data) {\n\tconsole.log(data.post)\n}\n\n$.get('http://twitter.com/ryan/tweet/1', display)\n\nconsole.log('Me first!')\n```\n\n* The same thing happens in the code above as in the `printHello` example\n\t* $.get makes an xmlHttpRequest (xhr) in Browser Api/Feature Land\n\t* Sets up an async request\n\t* Queues up the call to display once the data is ready in the callback queue\n\t* Event loop gives the green light\n\t* `display` is dequeued from the callback queue & pushed onto the call stack\n\n### Goals\n\n1. Be able to do tasks that take a long time to complete like getting data from the server\n2. Continue running our JS line by line without one long task blocking single thread\n3. When slow tasks resolves, we should run functionality knowing that the task is done and data is ready\n\nBrowser Features/APIs:\n* Storage\n* XHR ability\n* Console\n* DOM\n* Window\n</article>\n\n\n<article id=\"5\">\n\n## Promises\n\n* Promises are a readability enhancer\n* They are special objects built into JS that get returned immediately when we make a call to a web browser API/feature (like fetch)\n* They act as a placeholder for data we hope to get back from web browser land's feature background work\n* They will auto trigger functionality once the Promise resolves\n\n```js\nfunction display(data) {\n  console.log(data)\n}\n\nconst futureData = fetch('twitter.com/ryan/tweets/1')\n\nfutureData.then(display)\n\nconsole.log('Me first!')\n```\n\n* Example above\n\t* When you make a `fetch` call, you:\n\t\t1. Kick off a `Promise` in JS land\n\t\t2. Call `xmlHttpRequest` in Web Browser land\n\t* The `Promise` stores an initial object in memory:\n\t\t* `futureData: $#123; value: undefined,  onFulfillment: [] &#125;`\n\t* Then `futureData.then(display)` call does this\n\t\t* `futureData: $#123; value: undefined,  onFulfillment: [ DisplayFunctionDefinition ] &#125;`\n\t* Then we execute `console.log('Me first!')`\n\t* In `x` ms Twitter servers return a tweet: `'hi'`\n\t* Now that the data has come back, we assign that returned value to `futureData`\n\t\t* `futureData: $#123; value: 'hi',  onFulfillment: [ DisplayFunctionDefinition ] &#125;`\n\t* Then we trigger running the `display` function with parameter `'hi'`\n\t* Then `console.log('hi')`\n* This example achieves the 3 goals we listed earlier\n\n```js\nfunction display(data) {\n  console.log(data)\n}\n\nfunction printHello() {\n  console.log('Hello')\n}\n\nfunction blockFor300ms() {\n\t// block for 300ms\n}\n\nsetTimeout(printHello, 0)\n\nconst futureData = fetch('twitter.com/ryan/tweets/1')\n\nfutureData.then(display)\n\n// Which will run first?\n\nconsole.log('Me first!')\n```\n\n* Example above\n\t* Store the display function definition in global memory under the label `display`\n\t* Store printHello in global memory\n\t* Store blockFor300ms in global memory\n\t* Call browser api `setTimeout` with argument of the function definition `printHello`\n\t* Once the timer is finished after apprx 0ms it enqueues `printHello` to the callback queue\n\t\t* Since `global()` is still on the call stack, the event loop will not tell the callback queue to push `printHello`\n\t* Store `futureData` in global memory whose value is `&#123; value: undefined, onFulfillment: [] &#125;`\n\t* Set up XHR call in browser land\n\t\t* Send request to Twitter servers\n\t* Execute `futureData.then(display)` which stores this function definition on `futureData` as `&#123; value: undefined, onFulfillment: [display] &#125;`\n\t* Execute `blockFor300ms`\n\t* While we are inside `blockFor300ms` the fetch request resolves an returns the value `'hi'` and stores it on `futureData` as `&#123; value: 'h&#125; [display] &#125;`\n\t* `blockFor300ms` finishes running\n\t* Execute `console.log('Me first!')`\n\t* QUESTION: Will `printHello` from `setTimeout` or `display` from `fetch` run first?\n\t\t* There is a second queue called the **microtask queue** (known as **Job Queue** in the JS spec) will determine this answer\n\t\t\t* `printHello` will be added to the callback queue\n\t\t\t* `display` will be added to the microtask queue since its value actually gets updated in the JS global object `futureData`\n\t\t\t\t* The Browser prioritizes the microtask queue over the callback queue\n\t\t\t\t* Therefore `display` will be called first\n\t* The microtask queue will dequeue `display` and push it to the call stack\n\t* Execute `console.log('hi')`\n\t* Pop `display` from the call stack\n\t* The callback queue will dequeue `printHello` and push it to the call stack\n\t* Pop `printHello` from the call stack\n\t* Execute `console.log('hello')`\n* Note that we didn't handle the Promise `status` property on the `futureData` object\n</article>\n\n\n<article id=\"6\">\n\n## Iterators\n\n* We regularly have lists or collections or data where we want to go through each item and do something to each element\n* The classic way to do this is with for loops\n\n```js\nconst numbers = [4, 5, 6]\n\nfor (let i = 0; i < numbers.length; i++) {\n\tconsole.log(numbers[i])\n}\n```\n\n* The problem with this is that we are spending so much time on how to iterate that it takes more time to just focus on the code\n* There are better ways to do this in js\n\nExample:\n\n* WE want to create a function that holds our array the position we are currently at in our stream of elements and can return the next element\n\t* The problem that we have to solve is that functions do not remember their previous invocation (unless you do something special which is the solution)\n\n```js\nfunction createFlow(array) {\n\tlet i = 0\n\n\tfunction inner() {\n\t\tconst element = array[i]\n\t\ti++\n\t\treturn element\n\t}\n\n\treturn inner\n}\n\nconst returnNextElement = createFlow([4, 5, 6])\n\nreturnNextElement()\nreturnNextElement()\nreturnNextElement()\n```\n\n</article>\n\n<article id=\"7\">\n\n## Generators\n\n* Very similar to closure:\n\t* We have a persistent backpack of data\n\t* But we also track the position of execution after each `yield` statement\n* Generators are not a new concept in the world of programming\n\t* They are included in languages like Python\n\n\n### Ground up generator function\n\n* https://codepen.io/pen?editors=0012\n\n### Built in Generator functions\n\n```js\nfunction *createFlow() {\n  yield 4\n  yield 5\n  yield 6\n}\n\nconst returnNextElement = createFlow()\nconst element1 = returnNextElement.next()\nconst element2 = returnNextElement.next()\n```\n\n* Example above\n\t* This example does almost exactly what we did manually in the previous example\n\t\t* It returns an object with next function\n\t* the call to `createFlow` does enter createFlow's execution context, it actually returns an object: `&#123; next: ƒ def &#125;`\n\t* the call to `returnNextElement.next()` will then enter `createFlow`'s execution context and returns 4\n\t* then next call `returnNextElement.next()` returns 5\n* This allows us to dynamically set what data flows to us each time we turn on the \"tap\"\n\n```js\nfunction *createFlow() {\n\tconst num = 10\n\tconst newNum = yield num\n\tyield 5 + newNum\n\tyield 6\n}\n\nconst returnNextElement = createFlow()\nconst element1 = returnNextElement.next() // 10\nconst element2 = returnNextElement.next(2) // 7\n\n```\n\n* Example above:\n\t* The first `returnNextElement.next()` hits `yield num` and returns `10` and pauses before it even gets assigned to `newNum`\n\t* The second call to `returnNextElement.next(2)` whatever we pass in is going to be the evaluated result of `yield 10`\n\t\t* Which `newNum` becomes 2\n\t\t* So the first yield statement becomes 2\n\t* We hit `yield 5 + 2` and it pauses and returns 7\n* The practical ramification is that this allows us to insert data back into our execution context dynamically\n* This is a paradigm shift on how we design our programs\n* The state of the generator is stored under the property `[[generator]]` property which includes:\n\t* our backpack of persistent data\n\t\t* `&#123; value: 10, done: false &#125;`\n\t* the current location/line in the thread of execution\n\n```js\nfunction doWhenDataReceived(value) {\n\treturnNextElement.next(value)\n}\n\nfunction* createFlow(){\n\tconst data = yield fetch('twitter.com/tweets/ryan/1')\n\tconsole.log(data)\n}\n\nconst returnNextElement = createFlow()\nconst futureData = returnNextElement.next()\n\nfutureData.then(doWhenDataReceived)\n```\n\n* Example above\n\t* Store doWhenDataReceived def in global mem\n\t* Store createFlow def in global mem\n\t* execute `createFlow` which does not enter its execution context yet\n\t* Next line `returnNextElement.next()` will enter the generator function's execution context and hit the yield statement\n\t\t* It's important to note that it does not assign whatever the return of `yield` to `data` until the next iteration\n\t\t* `fetch` will return a promise `&#123; value: unfulfilled, onfulfillment: [] &#125;`\n\t\t* `fetch` will also kick off an XHR\n\t\t* So `futureData` = `&#123; value: unfulfilled, onfulfillment: [] &#125;`\n\t* `futureData.then(doWhenDataReceived)` will set add the `doWhenDataReceived` to `unfulfillment` array\n\t\t* When the XHR data resolves, the response will get passed to `doWhenDataRecieved`\n\t\t* Which will then get passed to the iterator with `returnNextElement.next(value)`\n\t\t* which will then console.log(data)\n* This is **async await** built from scratch!!!!!!\n\n</article>\n\n<article id=\"8\">\n\n## Async Await\n\n* This pattern will do what we did above but just more elegantly and tersely\n\n```js\nasync function createFlow() {\n\tconsole.log('Me first')\n\tconst data = await fetch('twitter.com/will/tweets/1')\n\tconsole.log(data)\n}\n\nconst futureData = createFlow()\n\nconsole.log('Me second')\n```\n\n* Example above\n\t* Store `createFlow` func def in global mem\n\t* Store `futureData` in global mem with unfulfilled value\n\t* Push createFlow onto the call stack\n\t* Create new execution context for createFlow\n\t* Because it is an `async` function we enter directly into it's execution context\n\t\t* We don't have to trigger it like we did with generator functions `.next()` method\n\t* `console.log('me first')`\n\t* create a variable data in local mem with unfulfilled value\n\t* `fetch` will return a Promise object: `&#123; value: undefined, unfulfillment: [] &#125;`\n\t\t* `await` says what ever gets resolved here throw it as my output which WON'T be stored in `data` but will be stored in `futureData`\n\t\t* So currently `futureData` = `&#123; value: undefined, unfulfillment: [] &#125;`\n\t* `fetch` will also kick off XHR browser feature/api\n\t\t* XHR gets a url, path, type\n\t\t\t* Then XHR sends a http message to Twitter's servers\n\t* `Console.log('me second')`\n\t* Twitter responds with string `'hi'`\n\t* XHR then adds `'hi'` to `futureData` so now it looks like `&#123; value: 'hi', unfulfillment: [] &#125;`\n* This way we auto trigger the resumption of createFlow instead of using `.then`\n\n</article>",
        "type": "MarkdownRemark",
        "contentDigest": "e1de8161c7ec4b90a0be3d6fc0f1f100",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Asynchronous JS",
        "description": "Deep dive into how js deals with async tasks",
        "author": "Jay Gatsby",
        "weight": 5,
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/async.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/async.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n<article id=\"1\">\n\n## Intro\n\n> Async is the backbone of modern web dev in JS\n\n* Since JS is sync we can't move onto the next line until the current line is finished executing\n\t* So then what happens when we call a function that takes 20 seconds to run?\n\t\t* Your program will freeze\n\t\t* The tension is sometimes you want to just call the function and move on if you don't need the data\n\t\t\t* But sometimes you want to wait for the data to return before doing anything else\n\n* Browser APIs (not JS itself) provide us with an async architecture\n\n* In order to understand async you have to understand:\n\t1. Thread of execution\n\t2. Memory/variable environment\n\t3. Call stack\n\t4. Web Browser APIs/Node background threads\n\t5. Callback/Message/Task queue\n\t6. Event Loop\n\n</article>\n\n\n<article id=\"2\">\n\n## Callback Queue\n\n* The callback queue **will not push anything onto the call stack until the call stack is TOTALLY empty**!\n\t* There can't event be any executable code to run in the global context \n\t* The event loop checks for this\n* So even though you told your timer in the example above to take `0ms` it actually will take at least as long as it takes to get to the bottom of the call stack\n* **Lightbulb**: this sheds light on how Node.js api methods are async\n\t* Because those methods transcend the JS language, they can provide the benefit of asynchronicity\n\n</article>\n\n<article id=\"3\">\n\n## Event Loop\n\n* The event loop is a posh term that simply means it is **checking if the call stack is totally empty**\n* So above it keeps checking over and over to see if `blockFor1Second` has been popped off until it gives the green light for the function in the callback queue to be pushed onto the call stack\n\n</article>\n\n<article id=\"4\">\n\n## Browser APIs\n\n### setTimeout\n\n* `setTimeout` doesn't behave in the typical way a normal function does\n\t* We spin this up in the background\n\t* It is a built in way to create an async timer\n\t* It speaks to our browser API\n\t\t* So it is outside of the normal JS land that we are used to\n\t* If we were to create a timer ourselves, it would be sync because JS is single threaded\n\t\t* It wouldn't be able to execute anything else\n\n<p data-height=\"300\" data-theme-id=\"31719\" data-slug-hash=\"GdrryW\" data-default-tab=\"js,result\" data-user=\"RyanGarant\" data-embed-version=\"2\" data-pen-title=\"setTimeout Async Example\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/RyanGarant/pen/GdrryW/\">setTimeout Async Example</a> by Ryan Garant (<a href=\"https://codepen.io/RyanGarant\">@RyanGarant</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n\n* \"Me first `i`\" will print out first\n\t* setTimeout is *almost like an api request* because it is speaking to the web browser\n\t* It doesn't just willy nilly push the call to `printHello` onto the call stack\n\t\t* It pushes it into the **callback queue**\n\n### Ways to NOT block our thread\n\n* There are many things where waiting would block our thread\n\t* so we use Browser APIs instead\n\n1. A timer to finish running\n2. New info from a server (AJAX)\n3. Indication that a portion of the page has loaded\n4. User interaction (clicks, mouseovers, drags)\n5. Writing/Reading to File System (Node)\n6. Writing/reading db (Firebase)\n\n* For each of these we have a web browser feature that we can spin up in the background and only push onto the call stack when the main thread including global code is done running\n\n```javascript\nfunction display(data) {\n\tconsole.log(data.post)\n}\n\n$.get('http://twitter.com/ryan/tweet/1', display)\n\nconsole.log('Me first!')\n```\n\n* The same thing happens in the code above as in the `printHello` example\n\t* $.get makes an xmlHttpRequest (xhr) in Browser Api/Feature Land\n\t* Sets up an async request\n\t* Queues up the call to display once the data is ready in the callback queue\n\t* Event loop gives the green light\n\t* `display` is dequeued from the callback queue & pushed onto the call stack\n\n### Goals\n\n1. Be able to do tasks that take a long time to complete like getting data from the server\n2. Continue running our JS line by line without one long task blocking single thread\n3. When slow tasks resolves, we should run functionality knowing that the task is done and data is ready\n\nBrowser Features/APIs:\n* Storage\n* XHR ability\n* Console\n* DOM\n* Window\n</article>\n\n\n<article id=\"5\">\n\n## Promises\n\n* Promises are a readability enhancer\n* They are special objects built into JS that get returned immediately when we make a call to a web browser API/feature (like fetch)\n* They act as a placeholder for data we hope to get back from web browser land's feature background work\n* They will auto trigger functionality once the Promise resolves\n\n```js\nfunction display(data) {\n  console.log(data)\n}\n\nconst futureData = fetch('twitter.com/ryan/tweets/1')\n\nfutureData.then(display)\n\nconsole.log('Me first!')\n```\n\n* Example above\n\t* When you make a `fetch` call, you:\n\t\t1. Kick off a `Promise` in JS land\n\t\t2. Call `xmlHttpRequest` in Web Browser land\n\t* The `Promise` stores an initial object in memory:\n\t\t* `futureData: $#123; value: undefined,  onFulfillment: [] &#125;`\n\t* Then `futureData.then(display)` call does this\n\t\t* `futureData: $#123; value: undefined,  onFulfillment: [ DisplayFunctionDefinition ] &#125;`\n\t* Then we execute `console.log('Me first!')`\n\t* In `x` ms Twitter servers return a tweet: `'hi'`\n\t* Now that the data has come back, we assign that returned value to `futureData`\n\t\t* `futureData: $#123; value: 'hi',  onFulfillment: [ DisplayFunctionDefinition ] &#125;`\n\t* Then we trigger running the `display` function with parameter `'hi'`\n\t* Then `console.log('hi')`\n* This example achieves the 3 goals we listed earlier\n\n```js\nfunction display(data) {\n  console.log(data)\n}\n\nfunction printHello() {\n  console.log('Hello')\n}\n\nfunction blockFor300ms() {\n\t// block for 300ms\n}\n\nsetTimeout(printHello, 0)\n\nconst futureData = fetch('twitter.com/ryan/tweets/1')\n\nfutureData.then(display)\n\n// Which will run first?\n\nconsole.log('Me first!')\n```\n\n* Example above\n\t* Store the display function definition in global memory under the label `display`\n\t* Store printHello in global memory\n\t* Store blockFor300ms in global memory\n\t* Call browser api `setTimeout` with argument of the function definition `printHello`\n\t* Once the timer is finished after apprx 0ms it enqueues `printHello` to the callback queue\n\t\t* Since `global()` is still on the call stack, the event loop will not tell the callback queue to push `printHello`\n\t* Store `futureData` in global memory whose value is `&#123; value: undefined, onFulfillment: [] &#125;`\n\t* Set up XHR call in browser land\n\t\t* Send request to Twitter servers\n\t* Execute `futureData.then(display)` which stores this function definition on `futureData` as `&#123; value: undefined, onFulfillment: [display] &#125;`\n\t* Execute `blockFor300ms`\n\t* While we are inside `blockFor300ms` the fetch request resolves an returns the value `'hi'` and stores it on `futureData` as `&#123; value: 'h&#125; [display] &#125;`\n\t* `blockFor300ms` finishes running\n\t* Execute `console.log('Me first!')`\n\t* QUESTION: Will `printHello` from `setTimeout` or `display` from `fetch` run first?\n\t\t* There is a second queue called the **microtask queue** (known as **Job Queue** in the JS spec) will determine this answer\n\t\t\t* `printHello` will be added to the callback queue\n\t\t\t* `display` will be added to the microtask queue since its value actually gets updated in the JS global object `futureData`\n\t\t\t\t* The Browser prioritizes the microtask queue over the callback queue\n\t\t\t\t* Therefore `display` will be called first\n\t* The microtask queue will dequeue `display` and push it to the call stack\n\t* Execute `console.log('hi')`\n\t* Pop `display` from the call stack\n\t* The callback queue will dequeue `printHello` and push it to the call stack\n\t* Pop `printHello` from the call stack\n\t* Execute `console.log('hello')`\n* Note that we didn't handle the Promise `status` property on the `futureData` object\n</article>\n\n\n<article id=\"6\">\n\n## Iterators\n\n* We regularly have lists or collections or data where we want to go through each item and do something to each element\n* The classic way to do this is with for loops\n\n```js\nconst numbers = [4, 5, 6]\n\nfor (let i = 0; i < numbers.length; i++) {\n\tconsole.log(numbers[i])\n}\n```\n\n* The problem with this is that we are spending so much time on how to iterate that it takes more time to just focus on the code\n* There are better ways to do this in js\n\nExample:\n\n* WE want to create a function that holds our array the position we are currently at in our stream of elements and can return the next element\n\t* The problem that we have to solve is that functions do not remember their previous invocation (unless you do something special which is the solution)\n\n```js\nfunction createFlow(array) {\n\tlet i = 0\n\n\tfunction inner() {\n\t\tconst element = array[i]\n\t\ti++\n\t\treturn element\n\t}\n\n\treturn inner\n}\n\nconst returnNextElement = createFlow([4, 5, 6])\n\nreturnNextElement()\nreturnNextElement()\nreturnNextElement()\n```\n\n</article>\n\n<article id=\"7\">\n\n## Generators\n\n* Very similar to closure:\n\t* We have a persistent backpack of data\n\t* But we also track the position of execution after each `yield` statement\n* Generators are not a new concept in the world of programming\n\t* They are included in languages like Python\n\n\n### Ground up generator function\n\n* https://codepen.io/pen?editors=0012\n\n### Built in Generator functions\n\n```js\nfunction *createFlow() {\n  yield 4\n  yield 5\n  yield 6\n}\n\nconst returnNextElement = createFlow()\nconst element1 = returnNextElement.next()\nconst element2 = returnNextElement.next()\n```\n\n* Example above\n\t* This example does almost exactly what we did manually in the previous example\n\t\t* It returns an object with next function\n\t* the call to `createFlow` does enter createFlow's execution context, it actually returns an object: `&#123; next: ƒ def &#125;`\n\t* the call to `returnNextElement.next()` will then enter `createFlow`'s execution context and returns 4\n\t* then next call `returnNextElement.next()` returns 5\n* This allows us to dynamically set what data flows to us each time we turn on the \"tap\"\n\n```js\nfunction *createFlow() {\n\tconst num = 10\n\tconst newNum = yield num\n\tyield 5 + newNum\n\tyield 6\n}\n\nconst returnNextElement = createFlow()\nconst element1 = returnNextElement.next() // 10\nconst element2 = returnNextElement.next(2) // 7\n\n```\n\n* Example above:\n\t* The first `returnNextElement.next()` hits `yield num` and returns `10` and pauses before it even gets assigned to `newNum`\n\t* The second call to `returnNextElement.next(2)` whatever we pass in is going to be the evaluated result of `yield 10`\n\t\t* Which `newNum` becomes 2\n\t\t* So the first yield statement becomes 2\n\t* We hit `yield 5 + 2` and it pauses and returns 7\n* The practical ramification is that this allows us to insert data back into our execution context dynamically\n* This is a paradigm shift on how we design our programs\n* The state of the generator is stored under the property `[[generator]]` property which includes:\n\t* our backpack of persistent data\n\t\t* `&#123; value: 10, done: false &#125;`\n\t* the current location/line in the thread of execution\n\n```js\nfunction doWhenDataReceived(value) {\n\treturnNextElement.next(value)\n}\n\nfunction* createFlow(){\n\tconst data = yield fetch('twitter.com/tweets/ryan/1')\n\tconsole.log(data)\n}\n\nconst returnNextElement = createFlow()\nconst futureData = returnNextElement.next()\n\nfutureData.then(doWhenDataReceived)\n```\n\n* Example above\n\t* Store doWhenDataReceived def in global mem\n\t* Store createFlow def in global mem\n\t* execute `createFlow` which does not enter its execution context yet\n\t* Next line `returnNextElement.next()` will enter the generator function's execution context and hit the yield statement\n\t\t* It's important to note that it does not assign whatever the return of `yield` to `data` until the next iteration\n\t\t* `fetch` will return a promise `&#123; value: unfulfilled, onfulfillment: [] &#125;`\n\t\t* `fetch` will also kick off an XHR\n\t\t* So `futureData` = `&#123; value: unfulfilled, onfulfillment: [] &#125;`\n\t* `futureData.then(doWhenDataReceived)` will set add the `doWhenDataReceived` to `unfulfillment` array\n\t\t* When the XHR data resolves, the response will get passed to `doWhenDataRecieved`\n\t\t* Which will then get passed to the iterator with `returnNextElement.next(value)`\n\t\t* which will then console.log(data)\n* This is **async await** built from scratch!!!!!!\n\n</article>\n\n<article id=\"8\">\n\n## Async Await\n\n* This pattern will do what we did above but just more elegantly and tersely\n\n```js\nasync function createFlow() {\n\tconsole.log('Me first')\n\tconst data = await fetch('twitter.com/will/tweets/1')\n\tconsole.log(data)\n}\n\nconst futureData = createFlow()\n\nconsole.log('Me second')\n```\n\n* Example above\n\t* Store `createFlow` func def in global mem\n\t* Store `futureData` in global mem with unfulfilled value\n\t* Push createFlow onto the call stack\n\t* Create new execution context for createFlow\n\t* Because it is an `async` function we enter directly into it's execution context\n\t\t* We don't have to trigger it like we did with generator functions `.next()` method\n\t* `console.log('me first')`\n\t* create a variable data in local mem with unfulfilled value\n\t* `fetch` will return a Promise object: `&#123; value: undefined, unfulfillment: [] &#125;`\n\t\t* `await` says what ever gets resolved here throw it as my output which WON'T be stored in `data` but will be stored in `futureData`\n\t\t* So currently `futureData` = `&#123; value: undefined, unfulfillment: [] &#125;`\n\t* `fetch` will also kick off XHR browser feature/api\n\t\t* XHR gets a url, path, type\n\t\t\t* Then XHR sends a http message to Twitter's servers\n\t* `Console.log('me second')`\n\t* Twitter responds with string `'hi'`\n\t* XHR then adds `'hi'` to `futureData` so now it looks like `&#123; value: 'hi', unfulfillment: [] &#125;`\n* This way we auto trigger the resumption of createFlow instead of using `.then`\n\n</article>",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/async.md",
      "fields": {
        "slug": "/javascript-async/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/functional.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/functional.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/functional.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"Functional JS\"\ndescription: \"\"\nauthor: Jay Gatsby\nweight: 4\n---\n\n<article id=\"1\">\n\n## Functional Programming\n\n* The most prominent paradigm in the past 25 years is object oriented programming\n* This is an alternative paradaigm\n\n#### Classic characteristics of functional programming\n\n* Functions are **first class citizens**\n* **Pure functions**: no side effects (*you don't change/mutate your program*)\n\t* It's only consequence is the return value of the function\n* Immutable\n\n### Pair Programming\n* A secret to growing into a junior or senior level engineer\n* Hard learning is where you grow the most\n* **Hard Learning Spectrum**\n\t1. *The Researcher Trap*\n\t\t* Doing the hard work but you just get stuck researching and never get to coding\n\t2. *The StackOverflow Approach*\n\t\t* Take snippet try it, it doesn't work, try another snippet......\n* Pair programming solves the hard learning dilema\n\n#### How to do it?\n* **Driver**: One person is saying psuedocode  \n* **Navigator**: One person is interpreting & typing psuedocode\n\t* The navigator never tells the driver how to turn the psuedocode into the code specifically\n\t* This greatly helps with technical communication\n\n\n#### Generalizing Functions\n\nRefactoring the previous example to be more DRY & General:\n\n```javascript\nfunction copyArrayAndManipulate(array, instructions) {\n  let output = [];\n  for (let i = 0; i < array.length; i++) {\n    output.push(instructions(array[i]));\n  }\n  return;\n  output;\n}\nfunction multiplyBy2(input) {\n  return;\n  input * 2;\n}\nlet result = copyArrayAndManipulate([1, 2, 3], multiplyBy2);\n```\n\n#### First Class Objects:\n\n* They can co-exist with and can be treated like any other js object\n\t* The only bonus thing of an object is that it can be executed/run\n\n#### Higher Order Functions vs. Callbacks\n\n* **HOCs** are simply functions that return other functions\n* **Callbacks** are the function that is passed into the HOC\n* They simplify your code and help keep it **DRY**\n\n##### Line By Line example\n\n```javascript\nfunction instructionGenerator() {\n\tfunction mulitplyBy2(num) {\n\t\treturn num * 2\n\t}\n\n\treturn multiplyBy2\n}\n\nlet generatedFunc = instructionGenerator()\n\nlet result = generatedFunc(3)\n```\n\n* The key line that throws seasoned devs off is `let generatedFunc = instructionGenerator()`\n\t* Because instruction generator doesn't actually call multiplyBy2, it returns the function definition of multiplyBy2 \n\n</article>",
        "type": "MarkdownRemark",
        "contentDigest": "c9fac9ff66d54fbeb1eab504054c187f",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Functional JS",
        "description": "",
        "author": "Jay Gatsby",
        "weight": 4,
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/functional.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/functional.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n<article id=\"1\">\n\n## Functional Programming\n\n* The most prominent paradigm in the past 25 years is object oriented programming\n* This is an alternative paradaigm\n\n#### Classic characteristics of functional programming\n\n* Functions are **first class citizens**\n* **Pure functions**: no side effects (*you don't change/mutate your program*)\n\t* It's only consequence is the return value of the function\n* Immutable\n\n### Pair Programming\n* A secret to growing into a junior or senior level engineer\n* Hard learning is where you grow the most\n* **Hard Learning Spectrum**\n\t1. *The Researcher Trap*\n\t\t* Doing the hard work but you just get stuck researching and never get to coding\n\t2. *The StackOverflow Approach*\n\t\t* Take snippet try it, it doesn't work, try another snippet......\n* Pair programming solves the hard learning dilema\n\n#### How to do it?\n* **Driver**: One person is saying psuedocode  \n* **Navigator**: One person is interpreting & typing psuedocode\n\t* The navigator never tells the driver how to turn the psuedocode into the code specifically\n\t* This greatly helps with technical communication\n\n\n#### Generalizing Functions\n\nRefactoring the previous example to be more DRY & General:\n\n```javascript\nfunction copyArrayAndManipulate(array, instructions) {\n  let output = [];\n  for (let i = 0; i < array.length; i++) {\n    output.push(instructions(array[i]));\n  }\n  return;\n  output;\n}\nfunction multiplyBy2(input) {\n  return;\n  input * 2;\n}\nlet result = copyArrayAndManipulate([1, 2, 3], multiplyBy2);\n```\n\n#### First Class Objects:\n\n* They can co-exist with and can be treated like any other js object\n\t* The only bonus thing of an object is that it can be executed/run\n\n#### Higher Order Functions vs. Callbacks\n\n* **HOCs** are simply functions that return other functions\n* **Callbacks** are the function that is passed into the HOC\n* They simplify your code and help keep it **DRY**\n\n##### Line By Line example\n\n```javascript\nfunction instructionGenerator() {\n\tfunction mulitplyBy2(num) {\n\t\treturn num * 2\n\t}\n\n\treturn multiplyBy2\n}\n\nlet generatedFunc = instructionGenerator()\n\nlet result = generatedFunc(3)\n```\n\n* The key line that throws seasoned devs off is `let generatedFunc = instructionGenerator()`\n\t* Because instruction generator doesn't actually call multiplyBy2, it returns the function definition of multiplyBy2 \n\n</article>",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/functional.md",
      "fields": {
        "slug": "/javascript-functional/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/index.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/index.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/index.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"JavaScript\"\ndescription: \"When you strive to comprehend your code, you create\nbetter work and become better at what you do. The code isn’t just\nyour job anymore, it’s your craft. ~Jenn Lukas\"\nauthor: Jay Gatsby\nicon: \"flash\"\nweight: 1\n---\n\n\n\n<article id=\"1\">\n\n> I am not content, nor should you be, at stopping once something just works, and not really knowing why. I gently challenge you to journey down that bumpy \"*road less traveled*\" and embrace all that JavaScript is and can do. With that knowledge, no **technique**, no **framework**, no popular **buzzword** acronym of the week, will be beyond your understanding. ~Kyle Simpson\n\n## Principles of JS\n\n### Thread of execution\n* Definition: parsing and executing the code line after line\n* The thread never executes more than one line at a time\n\t* Hence the name *\"single threaded\"\n* **The thread of execution** will never enter your function declaration until you call the function\n\n#### Execution Context Example\n\n```javascript\nconst num = 3;\n\nfunction multiplyBy2(inputNumber) {\n\tconst result = inputNumber * 2\n\tresturn result\n}\n\nconst output = multiplyBy2(4)\nconst newOutput = multiplyBy2(10)\n```\n\n* Execution context:\n\t* You have a **local** and a **global** execution context\n\t* when you call multiplyBy2 the thread enters the function\n\t* comprised of **local memory**\n\t* assigns result to 8\n\t* returns result and stored in `output` global memory\n\t* The local execution context then goes away and the global execution context picks up at newOutput\n\n\n### Call Stack\n\n*How do you keep track of calling functions within functions?*\n* The way JS keeps track of the thread of execution in all its contexts is with the call stack\n* The call stack uses the **stack data structure**\n\t* So the last thing that you **push** on the stack, is the first thing it gets out (**LIFO**)\n* Typically you have one call stack in your environment\n\t* Sometimes you have multiple callstacks with things like web workers\n\n*How does it work (using the previous JS example)?*\n\n1. **Push** global on call stack\n2. **Push** multiplyBy2 on stack\n3. **Pop** multiplyBy2 off stack after you get return value\n4. Goes back to global execution context because that is on the top of the stack\n5. **Push** the second multiplyBy2 call to the top of stack\n6. **Pop** multiplyBy2 off stack after you get return value\n7. Goes back to global execution context because that is on the top of the stack\n\n* The thread is always at the top of the call stack\n* And variables are always stored in which ever part of the call stack they are in\n\n### Example of reading code line by line\n\n```javascript\nfunction copyArrayAndDivideBy2(array) {\n\tlet output = []\n\tfor (let i =0; i < array.length; i++) {\n\t\toutput.push(array[i]/2)\n\t}\n\treturn output\n}\n\nconst myArray = [1,2,3]\nlet result = copyArrayAndDivideBy2(myArray)\n```\n\nLine By Line:\n\n1. Declaring copyArrayAndDivideBy2 function & storing it's definition in global storage under the label copyArrayAndDivideBy2\n2. Store an unreassignable myArray variable under the label myArray in global memory with value of an Array literal that is flat with three number values\n3. Declare result as undefined in global memory\n4. Push copyArrayAndDivideBy2 function call onto call stack\n5. Create a new local execution context for copyArrayAndDivideBy2\n6. Establish params (In this case array param = [1,2,3]) \n7. Declare a reassignable variable output in copyArrayAndDivideBy2 and assign it to an empty Array literal\n7. Declare i as 0\n8. Establish logic to continue the loop\n9. Do math push it on output\n10. Exit loop\n11. return output array\n12. Assign return value to result in global memory\n13. pop copyArrayAndDivideBy2 off callstack\n\n</article>\n\n<article id=\"3\">\n\n## Closure\n\n> \"Closure is the most important concept ever invented in the history of computing science\" ~Kyle Simpson\n\n\n### Key Questions:\n\n1. *What is closure?*\n\t* A function that can reference it's outer enclosing scope EVEN when it is called OUTSIDE that scope\n\n2. *How is closure created?*\n\t* Declare a function and within that function, reference a variable from it's outer scope\n\n3. *How long does scope stay around?*\n\t* Until there are no references to it\n\n4. *How do you leverage the module pattern?*\n\t* Use an outer enclosing function which runs once and returns a function that references its scope\n\n\n### The power of closure:\n\n* Our functions get '**memories**'\n\t* **once**\n\t\t* You can \"onceify\" your function so that it can only be run once\n\t* **memoize**\n\t\t* Say you have an algo that requries lots of steps like getting the 1000th prime number\n\t\t* You can save that value \"memoize\" in the function's backpack like\n```javascript\nconst primeNumbers = { 1000: x }\n```\n\t\t* So next time you look for > than the 1000th prime number\n* The functions get live persistent memeory\n* We can implement the JS module pattern\n\n* When function is called a **live store** is created which includes:\n\t* local memory\n\t* variable environment (VE)\n\t* state\n\n* When function is finished executing it **deletes local memory** automatically\n\t* The exception is for returned value\n\t* This is known as *garbage collection*\n\n* \"Closure is when a function '**remembers**' its lexical scope even when the function is executed outside that lexical scope\" ~Kyle Simpson\n\t* It's like seeing something that has always been there you just haven't been able to see it before\n\t* Closure can save access to variables as many nested scopes as you want\n\t* When you reference a **variable within your function in a scope outside your function**, it will preserve access to that variable for as long as the function is alive\n\t\t* The practical lesson for this is that if you nest your functions uncessarily deep, you can create unintended closure\n\t\t\t* The auto garbage collector will not garbage collect while that function is still alive\n\t\t\t* Every time you create a new closure, you are taking up more memory\n\t\t\t\t* To manually garbage collect a function with closure, you can just assign the function to null\n\t* \"Closure is a logical conclusion of lexical scope\" ~Kyle Simpson\n\n\n\n#### So why wouldn't you just use global memory?\n\n* Problems with that:\n\t* Often times you want independent live stores associated with each function rather than one big global store\n\t* When you write code at scale you do not want to pollute global memory\n\t\t* If you are adding things to the global scope and you are working with hundreds of other engineers who try to use the same name, you will have name collisions\n\t* You can't use the module pattern\n\t\t* where you write code in such away that its data sticks around but is protected\n\t\t\t* You also should try to make your functions easy to write to and easy to get data out of\n\n##### Line By Line example\n\n<p data-height=\"300\" data-theme-id=\"31719\" data-slug-hash=\"PeWzMQ\" data-default-tab=\"js,result\" data-user=\"RyanGarant\" data-embed-version=\"2\" data-pen-title=\"JS Closure Example\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/RyanGarant/pen/PeWzMQ/\">JS Closure Example</a> by Ryan Garant (<a href=\"https://codepen.io/RyanGarant\">@RyanGarant</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n\n* Given everything we currently know, when you call `myNewFunction` you would not expect it to be able to find the variable `counter` because that has been garbage collected when we finished calling `outer()`\n\t* **HUGE POINT**: However at the time of function declaration, it stores in its def the surrounding data\n\t\t* In this case the `counter` var\n\n* When we store the function definition of `incrementCounter` in the variable `myNewFunction` it carries on its back a **\"backpack\"** which is in this case the **live persistent variable** `counter`\n\t* This is a beautiful concept because it provides a way to have **live persistent data between function calls**\n\t* The **backpack** is also known as:\n\t\t* **closure** (most colloquial but not very helpful)\n\t\t* **lexical scope**\n\t\t\t* This is what we mean when JS is statically or lexically scoped\n\t\t* **closed over variable environment (COVE)**\n\t* This backpack is stored behind the scenes in the function definition as `[[scope]]`\n\t\t* So how can you access this data?\n\t\t\t* It's only available from the call of this function\n\t\t\t* And only the data that is referenced within `incrementCounter` is going to be stored in the backpack\n\t\t\t\t* If there were other variables besides `counter` defined outside `incrementCounter` they would be garbage collected\n \n</article>\n\n<article id=\"4\">\n\n## The Module Pattern\n\n* This is where you can protect private functions from being accessed from the public api\n* Closure makes the module pattern feasible\n\n* Main **benefit** is restricting access & protecting internal functions from being called\n\t* Also helps with abstracting code so that it is more readable\n* Main **disadvantage** is if your testing methodology believes a unit test involves testing all private internals\n\t* If you subscribe to Kyle Simpson's persuasion this is not a problem\n\t\t* He believes a unit is not a function, it is a single indivisible piece of business logic\n\n```javascript\nvar App = (function setupApp(){\n\tvar publicAPI = {\n\t\tinit: initUI,\n\t\taddProject: addProject,\n\t\taddWorkToProject: addWorkToProject\n\t}\n\n\treturn publicAPI\n\n\tfunction initUI() { ... }\n\tfunction addProject() { ... }\n\tfunction addWorkToProject() { ... }\n})()\n\nApp.init()\n\nApp.addProject('client features')\n```\n\n</article>\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "9b131f2f5293c948afd93296a7df89b0",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "JavaScript",
        "description": "When you strive to comprehend your code, you create better work and become better at what you do. The code isn’t just your job anymore, it’s your craft. ~Jenn Lukas",
        "author": "Jay Gatsby",
        "icon": "flash",
        "weight": 1,
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/index.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/index.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n\n\n<article id=\"1\">\n\n> I am not content, nor should you be, at stopping once something just works, and not really knowing why. I gently challenge you to journey down that bumpy \"*road less traveled*\" and embrace all that JavaScript is and can do. With that knowledge, no **technique**, no **framework**, no popular **buzzword** acronym of the week, will be beyond your understanding. ~Kyle Simpson\n\n## Principles of JS\n\n### Thread of execution\n* Definition: parsing and executing the code line after line\n* The thread never executes more than one line at a time\n\t* Hence the name *\"single threaded\"\n* **The thread of execution** will never enter your function declaration until you call the function\n\n#### Execution Context Example\n\n```javascript\nconst num = 3;\n\nfunction multiplyBy2(inputNumber) {\n\tconst result = inputNumber * 2\n\tresturn result\n}\n\nconst output = multiplyBy2(4)\nconst newOutput = multiplyBy2(10)\n```\n\n* Execution context:\n\t* You have a **local** and a **global** execution context\n\t* when you call multiplyBy2 the thread enters the function\n\t* comprised of **local memory**\n\t* assigns result to 8\n\t* returns result and stored in `output` global memory\n\t* The local execution context then goes away and the global execution context picks up at newOutput\n\n\n### Call Stack\n\n*How do you keep track of calling functions within functions?*\n* The way JS keeps track of the thread of execution in all its contexts is with the call stack\n* The call stack uses the **stack data structure**\n\t* So the last thing that you **push** on the stack, is the first thing it gets out (**LIFO**)\n* Typically you have one call stack in your environment\n\t* Sometimes you have multiple callstacks with things like web workers\n\n*How does it work (using the previous JS example)?*\n\n1. **Push** global on call stack\n2. **Push** multiplyBy2 on stack\n3. **Pop** multiplyBy2 off stack after you get return value\n4. Goes back to global execution context because that is on the top of the stack\n5. **Push** the second multiplyBy2 call to the top of stack\n6. **Pop** multiplyBy2 off stack after you get return value\n7. Goes back to global execution context because that is on the top of the stack\n\n* The thread is always at the top of the call stack\n* And variables are always stored in which ever part of the call stack they are in\n\n### Example of reading code line by line\n\n```javascript\nfunction copyArrayAndDivideBy2(array) {\n\tlet output = []\n\tfor (let i =0; i < array.length; i++) {\n\t\toutput.push(array[i]/2)\n\t}\n\treturn output\n}\n\nconst myArray = [1,2,3]\nlet result = copyArrayAndDivideBy2(myArray)\n```\n\nLine By Line:\n\n1. Declaring copyArrayAndDivideBy2 function & storing it's definition in global storage under the label copyArrayAndDivideBy2\n2. Store an unreassignable myArray variable under the label myArray in global memory with value of an Array literal that is flat with three number values\n3. Declare result as undefined in global memory\n4. Push copyArrayAndDivideBy2 function call onto call stack\n5. Create a new local execution context for copyArrayAndDivideBy2\n6. Establish params (In this case array param = [1,2,3]) \n7. Declare a reassignable variable output in copyArrayAndDivideBy2 and assign it to an empty Array literal\n7. Declare i as 0\n8. Establish logic to continue the loop\n9. Do math push it on output\n10. Exit loop\n11. return output array\n12. Assign return value to result in global memory\n13. pop copyArrayAndDivideBy2 off callstack\n\n</article>\n\n<article id=\"3\">\n\n## Closure\n\n> \"Closure is the most important concept ever invented in the history of computing science\" ~Kyle Simpson\n\n\n### Key Questions:\n\n1. *What is closure?*\n\t* A function that can reference it's outer enclosing scope EVEN when it is called OUTSIDE that scope\n\n2. *How is closure created?*\n\t* Declare a function and within that function, reference a variable from it's outer scope\n\n3. *How long does scope stay around?*\n\t* Until there are no references to it\n\n4. *How do you leverage the module pattern?*\n\t* Use an outer enclosing function which runs once and returns a function that references its scope\n\n\n### The power of closure:\n\n* Our functions get '**memories**'\n\t* **once**\n\t\t* You can \"onceify\" your function so that it can only be run once\n\t* **memoize**\n\t\t* Say you have an algo that requries lots of steps like getting the 1000th prime number\n\t\t* You can save that value \"memoize\" in the function's backpack like\n```javascript\nconst primeNumbers = { 1000: x }\n```\n\t\t* So next time you look for > than the 1000th prime number\n* The functions get live persistent memeory\n* We can implement the JS module pattern\n\n* When function is called a **live store** is created which includes:\n\t* local memory\n\t* variable environment (VE)\n\t* state\n\n* When function is finished executing it **deletes local memory** automatically\n\t* The exception is for returned value\n\t* This is known as *garbage collection*\n\n* \"Closure is when a function '**remembers**' its lexical scope even when the function is executed outside that lexical scope\" ~Kyle Simpson\n\t* It's like seeing something that has always been there you just haven't been able to see it before\n\t* Closure can save access to variables as many nested scopes as you want\n\t* When you reference a **variable within your function in a scope outside your function**, it will preserve access to that variable for as long as the function is alive\n\t\t* The practical lesson for this is that if you nest your functions uncessarily deep, you can create unintended closure\n\t\t\t* The auto garbage collector will not garbage collect while that function is still alive\n\t\t\t* Every time you create a new closure, you are taking up more memory\n\t\t\t\t* To manually garbage collect a function with closure, you can just assign the function to null\n\t* \"Closure is a logical conclusion of lexical scope\" ~Kyle Simpson\n\n\n\n#### So why wouldn't you just use global memory?\n\n* Problems with that:\n\t* Often times you want independent live stores associated with each function rather than one big global store\n\t* When you write code at scale you do not want to pollute global memory\n\t\t* If you are adding things to the global scope and you are working with hundreds of other engineers who try to use the same name, you will have name collisions\n\t* You can't use the module pattern\n\t\t* where you write code in such away that its data sticks around but is protected\n\t\t\t* You also should try to make your functions easy to write to and easy to get data out of\n\n##### Line By Line example\n\n<p data-height=\"300\" data-theme-id=\"31719\" data-slug-hash=\"PeWzMQ\" data-default-tab=\"js,result\" data-user=\"RyanGarant\" data-embed-version=\"2\" data-pen-title=\"JS Closure Example\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/RyanGarant/pen/PeWzMQ/\">JS Closure Example</a> by Ryan Garant (<a href=\"https://codepen.io/RyanGarant\">@RyanGarant</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n\n* Given everything we currently know, when you call `myNewFunction` you would not expect it to be able to find the variable `counter` because that has been garbage collected when we finished calling `outer()`\n\t* **HUGE POINT**: However at the time of function declaration, it stores in its def the surrounding data\n\t\t* In this case the `counter` var\n\n* When we store the function definition of `incrementCounter` in the variable `myNewFunction` it carries on its back a **\"backpack\"** which is in this case the **live persistent variable** `counter`\n\t* This is a beautiful concept because it provides a way to have **live persistent data between function calls**\n\t* The **backpack** is also known as:\n\t\t* **closure** (most colloquial but not very helpful)\n\t\t* **lexical scope**\n\t\t\t* This is what we mean when JS is statically or lexically scoped\n\t\t* **closed over variable environment (COVE)**\n\t* This backpack is stored behind the scenes in the function definition as `[[scope]]`\n\t\t* So how can you access this data?\n\t\t\t* It's only available from the call of this function\n\t\t\t* And only the data that is referenced within `incrementCounter` is going to be stored in the backpack\n\t\t\t\t* If there were other variables besides `counter` defined outside `incrementCounter` they would be garbage collected\n \n</article>\n\n<article id=\"4\">\n\n## The Module Pattern\n\n* This is where you can protect private functions from being accessed from the public api\n* Closure makes the module pattern feasible\n\n* Main **benefit** is restricting access & protecting internal functions from being called\n\t* Also helps with abstracting code so that it is more readable\n* Main **disadvantage** is if your testing methodology believes a unit test involves testing all private internals\n\t* If you subscribe to Kyle Simpson's persuasion this is not a problem\n\t\t* He believes a unit is not a function, it is a single indivisible piece of business logic\n\n```javascript\nvar App = (function setupApp(){\n\tvar publicAPI = {\n\t\tinit: initUI,\n\t\taddProject: addProject,\n\t\taddWorkToProject: addWorkToProject\n\t}\n\n\treturn publicAPI\n\n\tfunction initUI() { ... }\n\tfunction addProject() { ... }\n\tfunction addWorkToProject() { ... }\n})()\n\nApp.init()\n\nApp.addProject('client features')\n```\n\n</article>\n\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/index.md",
      "fields": {
        "slug": "/javascript/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/objectOriented.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/objectOriented.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/objectOriented.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"OOP JavaScript\"\ndescription: \"Object Oriented Programming in JS notes adapted from [JS Hardparts](https://frontendmasters.com/courses/javascript-hard-parts) & [JS Foundations](https://frontendmasters.com/courses/javascript-foundations)\"\nauthor: Jay Gatsby\nweight: 3\n---\n\n<article id=\"1\">\n\n## Object Oriented Programming (OOP)\n\n* Easy to add features and functionality\n* Performant (efficient in terms of memory)\n* Easy for us and other developers to reason about (a clear structure)\n\n* **Encapsulation**:\n\t* Binding together data and functions that manipulate the data\n\n<p data-height=\"300\" data-theme-id=\"31719\" data-slug-hash=\"deNWmr\" data-default-tab=\"js,result\" data-user=\"RyanGarant\" data-embed-version=\"2\" data-pen-title=\"Simple OOP Example\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/RyanGarant/pen/deNWmr/\">Simple OOP Example</a> by Ryan Garant (<a href=\"https://codepen.io/RyanGarant\">@RyanGarant</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n\n* This has the benefit of being very simple but\n\t* Each time we create a new user we make space in our computer's memory for all our data and functions\n\t\t* But the functions are just copies\n\t* If you have hundreds of users, why would you just copy the same copy over and over again?\n\t\t* So inefficient :(\n\n### Object.create\n\n#### Example\n\n<p data-height=\"300\" data-theme-id=\"31719\" data-slug-hash=\"devNmP\" data-default-tab=\"js,result\" data-user=\"RyanGarant\" data-embed-version=\"2\" data-pen-title=\"__proto__ JS Bond Example\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/RyanGarant/pen/devNmP/\">__proto__ JS Bond Example</a> by Ryan Garant (<a href=\"https://codepen.io/RyanGarant\">@RyanGarant</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n\n* Main point of this example is to show the special bond that `Object.create()` makes\n\t* So Object.create actually does 2 things:\n\t\t* It returns an empty object\n\t\t* It creates a reference to whatever object that you pass in under the special property `__proto__`\n\t\t\t* Check out the browser console in the example above and click the dropdown under the prop `__proto__` to see it in action\n\t\t\t\t* `__proto__` already exists on an empty object and contains things like `toString` and `hasOwnProperty`\n\t\t\t\t* What we do with `Object.create(ourObj)` is add our object methods that we pass in as the new first level of the `__proto__` object\n\t\t\t\t\t* The previous methods that exist in `__proto__` still exist but they are now nested in a second level under the key `__proto__`\n\t\t\t* This is actually really useful\n\t\t\t* Say you have a function that you want available on every user object but you don't want to duplicate it for every object\n\t\t\t\t* You create instead link the function to your object so it is store one place in memory rather than being stored once for every single user object\n</article>\n\n<article id=\"2\">\n\n## this Keyword\n\n* Every function (while executing) has a reference to its current execution context, called `this`\t\n* The JS's version of **dynamic scope** is `this`\n* The arrow function with a this keyword behaves according to lexical rules\n\t* It treats it as a normal variable and looks up the scope chain to find the variable this\n\n<img src=\"/images/js/this-scope.png\" alt=\"this keyword scope\">\n\n* Example\n\n```javascript\nfunction foo() {\n\tconsole.log(this.bar)\n}\n\nvar bar = 'bar1'\nvar obj = { bar: 'bar2' }\nvar o2 = { bar: 'bar2', foo }\nvar o3 = { bar: 'bar3', foo }\n\nfoo() // 'bar1'\nfoo.call(obj) // 'bar2'\no2.foo() // 'bar2'\no3.foo() // 'bar3'\n```\n\n* The 4 `this` rules from the example above:\n\n1. **Default Rule**: in *non strict mode* the this keyword points at the global object IE\n2. **Explicit Binding Rule**: `foo.call(obj)` calls foo but uses `obj` as its this context \n3. **Implicit Binding Rule**: `o2.foo()` implicitly binds `this` to the `o2` object `bar`\n\t* The danger of implicit binding is that you can't enforce `this` being bound to its calling context\n\t* The work around for this is **hard binding**\n\n### Hard Binding\n\n```javascript\nfunction foo(baz, bam) {\n\tconsole.log(`${this.bar} ${baz} ${bam}`)\n} \n\nvar obj = { bar: 'bar' }\nfoo = foo.bind(obj, 'baz')\n\nfoo('bam') // 'bar baz bam'\n```\n\n* This solves the problem of not being able to control the value of `this` at the call site\n* You can pass a hard bound function so `this` will be consistent & **predictable**\n* The tradeoff is that you lose **flexibility**\n\t* There is a tension between **flexibility** vs **predictability**\n\t* The heuristic you can use is:\n\t\t* Use **Lexical Scope**: If you need predictability the lexical system is better\n\t\t* use **Dynamic Scope** (`this`): If you need flexibility\n\t\t* IE\n\t\t\t* Say you are using `this` and every once in a while you use a couple hard bindings then `this` is typically better\n\t\t\t* If you are using `this` and having to hard bind a bunch then **lexical scope** would be better\n\t\t* Use each system for what they are better at\n\n### Order of Precedence Rules In Determining What `this` Points To\n\n1. Is the function called by `new`?\n2. If not is the function called by `call()` or `apply()`? (bind uses apply)\n3. If not was the function called with a context object?\n4. If not default to the global object (except in strict mode)\n\n</article>\n\n<article id=\"3\">\n\n## new Keyword\n\n* There are a couple things you need to understand about functions before understanding what's going on under the hood with the new Keyword\n\t* AKA *constructor call* (it just a creates an object when placed in front of any function)\n\t* Functions are actually just objects\n\t\t* If you have a function stored in global memory under the label `myFunc` you can write `myFunc.firstName = 'Ryan'`\n\t\t\t* And if you log that out you will actually see `firstName` as a key on `myFunc`\n\t\t\t* The **actual functionality of the function** when you call it with parens is under the `call` property of the function definition which is located within the `__proto__` property\n\t\t\t* Note that this is not standard practice to use functions as an object, but good to know that in their essence they are actually an object\n\n<p data-height=\"300\" data-theme-id=\"31719\" data-slug-hash=\"gzWpwQ\" data-default-tab=\"js,result\" data-user=\"RyanGarant\" data-embed-version=\"2\" data-pen-title=\"JS Functions As Objects\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/RyanGarant/pen/gzWpwQ/\">JS Functions As Objects</a> by Ryan Garant (<a href=\"https://codepen.io/RyanGarant\">@RyanGarant</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n\n\n* **The Four Things** That Happens When Putting the `new` Keyword in Front of a Function Call:\n\n1. It creates a brand new empty objects\n2. The newly created object gets linked to another object\n3. The newly created object gets passed in as the `this` context to the function call\n4. If that function does not already return its own object, it will return `this`\n\n* When we call the constructor function with new in front we automate 2 things:\n\t* Create a new user object: `this = Object.create(userCreator)`\n\t\t* This creates the `__proto__` property which references the prototype object methods\n\t* return the new user object: `return this`\n\n<p data-height=\"300\" data-theme-id=\"31719\" data-slug-hash=\"deWWjK\" data-default-tab=\"js,result\" data-user=\"RyanGarant\" data-embed-version=\"2\" data-pen-title=\"JS New Keyword\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/RyanGarant/pen/deWWjK/\">JS New Keyword</a> by Ryan Garant (<a href=\"https://codepen.io/RyanGarant\">@RyanGarant</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n\n</article>\n\n<article id=\"4\">\n\n## The Class 'Syntactic Sugar'\n\n* It is doing the same thing under the hood as the `new` keyword\n\n<p data-height=\"300\" data-theme-id=\"31719\" data-slug-hash=\"RyVVmd\" data-default-tab=\"js,result\" data-user=\"RyanGarant\" data-embed-version=\"2\" data-pen-title=\"JS Class Sugar For new Keyword\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/RyanGarant/pen/RyVVmd/\">JS Class Sugar For new Keyword</a> by Ryan Garant (<a href=\"https://codepen.io/RyanGarant\">@RyanGarant</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n\n</article>\n\n<article id=\"5\">\n\n## Prototypes\n\n> Objects are built by constructor calls where a constructor makes an object linked to its own prototype\n\n* `Object.prototype` is the most important object in JS\n* C++ & Java implements classes very differently than JS\n\t* When a class inherits from another class it **copies** that class's methods\n\t* If you alter the parent class's methods after the child inherits them, the inherited methods on the child are NOT changed\n\t* *IE: If I break my leg and my son is a biological copy of me to a degree, you would not expect his leg to be broken*\n* JS on the other hand has \"**Retroactive Inheritance**\"\n\t* If you alter the parent class's methods after the child inherits them, the inherited methods on the child ARE changed\n\n\n<p data-height=\"300\" data-theme-id=\"31719\" data-slug-hash=\"ERVBqa\" data-default-tab=\"js,result\" data-user=\"RyanGarant\" data-embed-version=\"2\" data-pen-title=\"JS Prototypes\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/RyanGarant/pen/ERVBqa/\">JS Prototypes</a> by Ryan Garant (<a href=\"https://codepen.io/RyanGarant\">@RyanGarant</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n\n* calling `child.constructor` tells you where the child came from, in this case the parent\n* `child.constructor.prototype` & `child.__proto__` give you the prototype of Parent\n\n\n<img src=\"/images/js/prototype.png\" alt=\"prototype\">\n\n</article>\n\n<article id=\"6\">\n\n## Quiz\n\n1. How do you “borrow” a function and implicitly set this? \n2. How do you explicitly set this for the function call? \n3. How can you lock a specific this to a function? \n\t* Why do that? Why not? \n4. How do you create a new this for the function call?\n\n</article>",
        "type": "MarkdownRemark",
        "contentDigest": "81f2c81885637cf0f9c44699ee9d12c1",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "OOP JavaScript",
        "description": "Object Oriented Programming in JS notes adapted from [JS Hardparts](https://frontendmasters.com/courses/javascript-hard-parts) & [JS Foundations](https://frontendmasters.com/courses/javascript-foundations)",
        "author": "Jay Gatsby",
        "weight": 3,
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/objectOriented.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/objectOriented.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n<article id=\"1\">\n\n## Object Oriented Programming (OOP)\n\n* Easy to add features and functionality\n* Performant (efficient in terms of memory)\n* Easy for us and other developers to reason about (a clear structure)\n\n* **Encapsulation**:\n\t* Binding together data and functions that manipulate the data\n\n<p data-height=\"300\" data-theme-id=\"31719\" data-slug-hash=\"deNWmr\" data-default-tab=\"js,result\" data-user=\"RyanGarant\" data-embed-version=\"2\" data-pen-title=\"Simple OOP Example\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/RyanGarant/pen/deNWmr/\">Simple OOP Example</a> by Ryan Garant (<a href=\"https://codepen.io/RyanGarant\">@RyanGarant</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n\n* This has the benefit of being very simple but\n\t* Each time we create a new user we make space in our computer's memory for all our data and functions\n\t\t* But the functions are just copies\n\t* If you have hundreds of users, why would you just copy the same copy over and over again?\n\t\t* So inefficient :(\n\n### Object.create\n\n#### Example\n\n<p data-height=\"300\" data-theme-id=\"31719\" data-slug-hash=\"devNmP\" data-default-tab=\"js,result\" data-user=\"RyanGarant\" data-embed-version=\"2\" data-pen-title=\"__proto__ JS Bond Example\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/RyanGarant/pen/devNmP/\">__proto__ JS Bond Example</a> by Ryan Garant (<a href=\"https://codepen.io/RyanGarant\">@RyanGarant</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n\n* Main point of this example is to show the special bond that `Object.create()` makes\n\t* So Object.create actually does 2 things:\n\t\t* It returns an empty object\n\t\t* It creates a reference to whatever object that you pass in under the special property `__proto__`\n\t\t\t* Check out the browser console in the example above and click the dropdown under the prop `__proto__` to see it in action\n\t\t\t\t* `__proto__` already exists on an empty object and contains things like `toString` and `hasOwnProperty`\n\t\t\t\t* What we do with `Object.create(ourObj)` is add our object methods that we pass in as the new first level of the `__proto__` object\n\t\t\t\t\t* The previous methods that exist in `__proto__` still exist but they are now nested in a second level under the key `__proto__`\n\t\t\t* This is actually really useful\n\t\t\t* Say you have a function that you want available on every user object but you don't want to duplicate it for every object\n\t\t\t\t* You create instead link the function to your object so it is store one place in memory rather than being stored once for every single user object\n</article>\n\n<article id=\"2\">\n\n## this Keyword\n\n* Every function (while executing) has a reference to its current execution context, called `this`\t\n* The JS's version of **dynamic scope** is `this`\n* The arrow function with a this keyword behaves according to lexical rules\n\t* It treats it as a normal variable and looks up the scope chain to find the variable this\n\n<img src=\"/images/js/this-scope.png\" alt=\"this keyword scope\">\n\n* Example\n\n```javascript\nfunction foo() {\n\tconsole.log(this.bar)\n}\n\nvar bar = 'bar1'\nvar obj = { bar: 'bar2' }\nvar o2 = { bar: 'bar2', foo }\nvar o3 = { bar: 'bar3', foo }\n\nfoo() // 'bar1'\nfoo.call(obj) // 'bar2'\no2.foo() // 'bar2'\no3.foo() // 'bar3'\n```\n\n* The 4 `this` rules from the example above:\n\n1. **Default Rule**: in *non strict mode* the this keyword points at the global object IE\n2. **Explicit Binding Rule**: `foo.call(obj)` calls foo but uses `obj` as its this context \n3. **Implicit Binding Rule**: `o2.foo()` implicitly binds `this` to the `o2` object `bar`\n\t* The danger of implicit binding is that you can't enforce `this` being bound to its calling context\n\t* The work around for this is **hard binding**\n\n### Hard Binding\n\n```javascript\nfunction foo(baz, bam) {\n\tconsole.log(`${this.bar} ${baz} ${bam}`)\n} \n\nvar obj = { bar: 'bar' }\nfoo = foo.bind(obj, 'baz')\n\nfoo('bam') // 'bar baz bam'\n```\n\n* This solves the problem of not being able to control the value of `this` at the call site\n* You can pass a hard bound function so `this` will be consistent & **predictable**\n* The tradeoff is that you lose **flexibility**\n\t* There is a tension between **flexibility** vs **predictability**\n\t* The heuristic you can use is:\n\t\t* Use **Lexical Scope**: If you need predictability the lexical system is better\n\t\t* use **Dynamic Scope** (`this`): If you need flexibility\n\t\t* IE\n\t\t\t* Say you are using `this` and every once in a while you use a couple hard bindings then `this` is typically better\n\t\t\t* If you are using `this` and having to hard bind a bunch then **lexical scope** would be better\n\t\t* Use each system for what they are better at\n\n### Order of Precedence Rules In Determining What `this` Points To\n\n1. Is the function called by `new`?\n2. If not is the function called by `call()` or `apply()`? (bind uses apply)\n3. If not was the function called with a context object?\n4. If not default to the global object (except in strict mode)\n\n</article>\n\n<article id=\"3\">\n\n## new Keyword\n\n* There are a couple things you need to understand about functions before understanding what's going on under the hood with the new Keyword\n\t* AKA *constructor call* (it just a creates an object when placed in front of any function)\n\t* Functions are actually just objects\n\t\t* If you have a function stored in global memory under the label `myFunc` you can write `myFunc.firstName = 'Ryan'`\n\t\t\t* And if you log that out you will actually see `firstName` as a key on `myFunc`\n\t\t\t* The **actual functionality of the function** when you call it with parens is under the `call` property of the function definition which is located within the `__proto__` property\n\t\t\t* Note that this is not standard practice to use functions as an object, but good to know that in their essence they are actually an object\n\n<p data-height=\"300\" data-theme-id=\"31719\" data-slug-hash=\"gzWpwQ\" data-default-tab=\"js,result\" data-user=\"RyanGarant\" data-embed-version=\"2\" data-pen-title=\"JS Functions As Objects\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/RyanGarant/pen/gzWpwQ/\">JS Functions As Objects</a> by Ryan Garant (<a href=\"https://codepen.io/RyanGarant\">@RyanGarant</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n\n\n* **The Four Things** That Happens When Putting the `new` Keyword in Front of a Function Call:\n\n1. It creates a brand new empty objects\n2. The newly created object gets linked to another object\n3. The newly created object gets passed in as the `this` context to the function call\n4. If that function does not already return its own object, it will return `this`\n\n* When we call the constructor function with new in front we automate 2 things:\n\t* Create a new user object: `this = Object.create(userCreator)`\n\t\t* This creates the `__proto__` property which references the prototype object methods\n\t* return the new user object: `return this`\n\n<p data-height=\"300\" data-theme-id=\"31719\" data-slug-hash=\"deWWjK\" data-default-tab=\"js,result\" data-user=\"RyanGarant\" data-embed-version=\"2\" data-pen-title=\"JS New Keyword\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/RyanGarant/pen/deWWjK/\">JS New Keyword</a> by Ryan Garant (<a href=\"https://codepen.io/RyanGarant\">@RyanGarant</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n\n</article>\n\n<article id=\"4\">\n\n## The Class 'Syntactic Sugar'\n\n* It is doing the same thing under the hood as the `new` keyword\n\n<p data-height=\"300\" data-theme-id=\"31719\" data-slug-hash=\"RyVVmd\" data-default-tab=\"js,result\" data-user=\"RyanGarant\" data-embed-version=\"2\" data-pen-title=\"JS Class Sugar For new Keyword\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/RyanGarant/pen/RyVVmd/\">JS Class Sugar For new Keyword</a> by Ryan Garant (<a href=\"https://codepen.io/RyanGarant\">@RyanGarant</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n\n</article>\n\n<article id=\"5\">\n\n## Prototypes\n\n> Objects are built by constructor calls where a constructor makes an object linked to its own prototype\n\n* `Object.prototype` is the most important object in JS\n* C++ & Java implements classes very differently than JS\n\t* When a class inherits from another class it **copies** that class's methods\n\t* If you alter the parent class's methods after the child inherits them, the inherited methods on the child are NOT changed\n\t* *IE: If I break my leg and my son is a biological copy of me to a degree, you would not expect his leg to be broken*\n* JS on the other hand has \"**Retroactive Inheritance**\"\n\t* If you alter the parent class's methods after the child inherits them, the inherited methods on the child ARE changed\n\n\n<p data-height=\"300\" data-theme-id=\"31719\" data-slug-hash=\"ERVBqa\" data-default-tab=\"js,result\" data-user=\"RyanGarant\" data-embed-version=\"2\" data-pen-title=\"JS Prototypes\" class=\"codepen\">See the Pen <a href=\"https://codepen.io/RyanGarant/pen/ERVBqa/\">JS Prototypes</a> by Ryan Garant (<a href=\"https://codepen.io/RyanGarant\">@RyanGarant</a>) on <a href=\"https://codepen.io\">CodePen</a>.</p>\n\n* calling `child.constructor` tells you where the child came from, in this case the parent\n* `child.constructor.prototype` & `child.__proto__` give you the prototype of Parent\n\n\n<img src=\"/images/js/prototype.png\" alt=\"prototype\">\n\n</article>\n\n<article id=\"6\">\n\n## Quiz\n\n1. How do you “borrow” a function and implicitly set this? \n2. How do you explicitly set this for the function call? \n3. How can you lock a specific this to a function? \n\t* Why do that? Why not? \n4. How do you create a new this for the function call?\n\n</article>",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/objectOriented.md",
      "fields": {
        "slug": "/javascript-objectOriented/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/pro-tips.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/pro-tips.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/pro-tips.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"Pro Tips\"\ndescription: \"Golden nuggets on JS from the masters\"\nauthor: Jay Gatsby\nweight: 6\n---\n\n\n\n<article id=\"1\">\n\n## Master Tips\n\n> Always, always, always favor **readability**.  If it is a bottleneck to perf come back and fix it later\n\n**Stability** is something you want to keep in mind when picking an algo\n\n### Algos are all about **tradeoffs**\n\n> **Pro Tip**  If you cannot see the variable on the same page, \"redeclare it\" so the reader knows exactly what scope it belongs to\n</article>\n\n\n<article id=\"2\">\n\n## Top 5 Capacities You Should Develop\n\n1. Analytical problem solving with code\n2. Technical communication (can I implement your approach just from your explanation)\n3. Engineering best practices and approach (Debugging, code structure, patience and reference to docs)\n4. Non-technical communication (empathetic and thoughtful communication)\n5. Language and comp sci experience\n\n</article>\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "7c02c70185fe5fa963392a93af199245",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Pro Tips",
        "description": "Golden nuggets on JS from the masters",
        "author": "Jay Gatsby",
        "weight": 6,
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/pro-tips.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/pro-tips.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n\n\n<article id=\"1\">\n\n## Master Tips\n\n> Always, always, always favor **readability**.  If it is a bottleneck to perf come back and fix it later\n\n**Stability** is something you want to keep in mind when picking an algo\n\n### Algos are all about **tradeoffs**\n\n> **Pro Tip**  If you cannot see the variable on the same page, \"redeclare it\" so the reader knows exactly what scope it belongs to\n</article>\n\n\n<article id=\"2\">\n\n## Top 5 Capacities You Should Develop\n\n1. Analytical problem solving with code\n2. Technical communication (can I implement your approach just from your explanation)\n3. Engineering best practices and approach (Debugging, code structure, patience and reference to docs)\n4. Non-technical communication (empathetic and thoughtful communication)\n5. Language and comp sci experience\n\n</article>\n\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/pro-tips.md",
      "fields": {
        "slug": "/javascript-pro-tips/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/scope.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/scope.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/scope.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"Scope\"\ndescription: \"Super important concept about what level declared variables can be accessed\"\nauthor: Jay Gatsby\nweight: 2\n---\n\n\n\n<article id=\"1\">\n\n## What Is Scope?\n\n> Where to look for things\n\n* JS is at a minimum a \"*2-pass*\" system that involves **compilation** and **execution**\n* It's not necessary to be super familiar with compiler theory\n\t* However there are a few things we need to understand\n\t\t* What we care about is:\n\t\t\t* **how variable buckets are created** and **how we get different color marbles in the buckets**\n\t\t\t* Formal declarations\n\n* Example to illustrate how the JS compiler works\n\n```javascript\nvar foo = 'bar'\n\nfunction bar() {\n\tvar foo = 'baz'\n}\n\nfunction baz(foo) {\n\tfoo = 'bam'\n\tbam = 'yay'\n}\n```\n\n**1st Pass: Compiler**\n\n* The compiler knows that line one that `foo` is on the left hand side of the equals and is therefore the **target of an assignment**\n\t* This is known as **LHS** (Left Hand Side)\n* It knows that `'bar'` is on the right hand side of the equals and is therefore the **source of an assignment**\n\t* This is known as **RHS** (Right Hand Side)\n* The second declaration of the variable `foo` is called shadowing\n\t* If you console logged in `bar` before the declaration `foo` it would print undefined\n* The parameter `foo` in declaration `baz` is a formal declaration\n* We don't have a variable `foo` in the scope of `baz` so we store it in the \"green\" `baz` bucket\n* `bam` is not a formal declaration so we can't assume anything about it\n\n**2nd Pass: JS Engine**\n\n* This is just like go fish\n\t* There is two answers to the question:\n\t\t* \"Hey global scope I am looking for the `foo` variable ever heard of him?\"\n\t\t\t* Either yes or no \"Go fish!\"\n* *Engine*: Hey scope of `baz` I have an LHS for `bam` ever heard of him?\n\t* *Compiler*: \"Go fish!\"\n\t* *Engine*: Hey global scope I have an LHS for `bam` ever heard of him?\n\t\t* *Compiler*: \"No but I will create one for you since I don't have one formally declared\"\n\t\t\t* This is an implicit declaration in global scope\n\t\t\t* This is virtually always a mistake\n\t\t\t* If you are doing this on purpose STOP! You should never do this\n\t\t\t* However if you have `\"use strict\"` it will not allow you to do this!\n\t\t\t\t* It will throw a referece error: `bam is not defined`\n\t\t\t\t\t* This is not the same as an undefined variable\n\t\t\t\t\t* It's actually saying `bame is not declared`\n\n* Practical implication from this example is: USE STRICT MODE `'use strict'`\n\t* Although it has the ring of an overbearing parent, it is more **like a loving father**\n\t\t* By not following the specs laid out by strict mode, you are **making it harder** for JS:\n\t\t\t* To compile your code\n\t\t\t* Optimize your code\n\t\t\t* Execute your code\n\t\t* For instance, creating an *implicit global variable at runtime is slower than creating it it at compile time*\n\t\t\t* Which will in turn slow down the execution of your code\n\t* `'use strict'` is file based\n\t\t* So even if a 3rd party library doesn't use it, you can use it\n\t\t* **babel** adds it for you\n</article>\n\n<article id=\"2\">\n\n## Block Scope\n\n> Block scopes have curly braces\n\n* Kyle Simpson recommends using `var` most of the time, then `let`, then `const`\n  * He doesn't use `const` to declare functions only uses `const` for immutable objects\n\n* **const** implies a constant\n  * means it never is *reassigned*\n  * the problem of using const is that it confuses readers because a lot of people still think that a \"constant\" doesn't change\n\n```javascript\nfunction diff(x,y) {\n  if (x > y) {\n    let tmp = x \n    x = y\n    y = tmp\n  }\n\n  return y - x\n}\n```\n\n* **Let** is blocked scoped to `if`\n  * If you try to access `tmp` outside of the **if block** you will get a *reference error*\n\n* `let` is always better used in a `for loop`\n* `let` cannot be redeclared but `var` can be redeclared\n\n```javascript\nfunction repeat(fn, n) {\n  var result;\n\n  for (let i = 0; i < n; i ++) {\n    result = fn( result, i)\n  }\n\n  return result\n}\n\n```\n\n* `var` is better used when you want to stylistically signal to the reader that `result` in this case is going to be used throughout the function\n\n```javascript\nfunction lookupRecord(searchStr) {\n  try {\n    var id = getRecord(searchStr)\n  }\n  catch (err) {\n    var id = -1\n  }\n\n  return id\n}\n```\n\n* By using `var` here you escape the block scope and can reference the variable\n\n</article>\n\n\n<article id=\"3\">\n\n## Function Scoping\n\n```javascript\nvar foo = 'foo'\n\nfunction bob(0 {\n  var foo = 'foo2'\n  console.log(foo) // 'foo2'\n})\nbob()\n\nconsole.log(foo) // 'foo' phew!\n```\n\n</article>\n\n\n<article id=\"4\">\n\n## IIFE (immediately invoked function expression) Pattern\n\n> If you don't want to pollute the name space, but you want to **create scope and you only want your function to run once**, the IIFE pattern is helpful\n\n* This is similar to **block scoping**\n\n```javascript\nvar foo = 'foo'\n\n(function IIFE(bar) {\n  var foo = 'foo2'\n  console.log(foo) // 'foo2'\n})(foo)\n\nconsole.log(foo) // 'foo'\n```\n\n</article>\n\n<article id=\"5\">\n\n## Hoisting\n\n> This is a made up concept which doesn't exist...it's a convenient metaphor\n\n* This is simply a easy way to think about how lexical scope is working in the 2 pass system\n\t* When assignments occur (which is executable code belonging to the 2nd pass) it doesn't get \"hoisted\" to the top of the scope\n\t\t* *IE: function declarations are hoisted but function expressions are not*\n\t* `let` and `const` are **not initialized** at the top of their scope but rather are intialized at the line where they are used\n\t\t* This does not mean that they are not hoisted\n\t\t\t* Hoisting involves adding the variable to the enclosing lexical scope\n\t\t\t* Hoisting does not describe the **initialzation** step\n\t\t\t\t* `var` is hoisted and initialized whereas `let` and `const`\n\n* One benefit of hoisting is by using **function declarations**\n\t* You don't have to declare functions in order before they need to be consumed\n\t\t* It takes longer to scroll down to the bottom of the file to figure out what the program is actually doing\n\t\t* You can order your functions logically\n\t\t* Or you can order them alphabetically\n\t* You can do mutual recursion\n\t\t* This is when one function recursively calls another function which calls another recursively\n\t\t* Mutual recursion is impossible without function declarations\n\n</article>\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "6dec0ddcbd2507debca5bd3b1b2c8c81",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Scope",
        "description": "Super important concept about what level declared variables can be accessed",
        "author": "Jay Gatsby",
        "weight": 2,
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/scope.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/scope.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n\n\n<article id=\"1\">\n\n## What Is Scope?\n\n> Where to look for things\n\n* JS is at a minimum a \"*2-pass*\" system that involves **compilation** and **execution**\n* It's not necessary to be super familiar with compiler theory\n\t* However there are a few things we need to understand\n\t\t* What we care about is:\n\t\t\t* **how variable buckets are created** and **how we get different color marbles in the buckets**\n\t\t\t* Formal declarations\n\n* Example to illustrate how the JS compiler works\n\n```javascript\nvar foo = 'bar'\n\nfunction bar() {\n\tvar foo = 'baz'\n}\n\nfunction baz(foo) {\n\tfoo = 'bam'\n\tbam = 'yay'\n}\n```\n\n**1st Pass: Compiler**\n\n* The compiler knows that line one that `foo` is on the left hand side of the equals and is therefore the **target of an assignment**\n\t* This is known as **LHS** (Left Hand Side)\n* It knows that `'bar'` is on the right hand side of the equals and is therefore the **source of an assignment**\n\t* This is known as **RHS** (Right Hand Side)\n* The second declaration of the variable `foo` is called shadowing\n\t* If you console logged in `bar` before the declaration `foo` it would print undefined\n* The parameter `foo` in declaration `baz` is a formal declaration\n* We don't have a variable `foo` in the scope of `baz` so we store it in the \"green\" `baz` bucket\n* `bam` is not a formal declaration so we can't assume anything about it\n\n**2nd Pass: JS Engine**\n\n* This is just like go fish\n\t* There is two answers to the question:\n\t\t* \"Hey global scope I am looking for the `foo` variable ever heard of him?\"\n\t\t\t* Either yes or no \"Go fish!\"\n* *Engine*: Hey scope of `baz` I have an LHS for `bam` ever heard of him?\n\t* *Compiler*: \"Go fish!\"\n\t* *Engine*: Hey global scope I have an LHS for `bam` ever heard of him?\n\t\t* *Compiler*: \"No but I will create one for you since I don't have one formally declared\"\n\t\t\t* This is an implicit declaration in global scope\n\t\t\t* This is virtually always a mistake\n\t\t\t* If you are doing this on purpose STOP! You should never do this\n\t\t\t* However if you have `\"use strict\"` it will not allow you to do this!\n\t\t\t\t* It will throw a referece error: `bam is not defined`\n\t\t\t\t\t* This is not the same as an undefined variable\n\t\t\t\t\t* It's actually saying `bame is not declared`\n\n* Practical implication from this example is: USE STRICT MODE `'use strict'`\n\t* Although it has the ring of an overbearing parent, it is more **like a loving father**\n\t\t* By not following the specs laid out by strict mode, you are **making it harder** for JS:\n\t\t\t* To compile your code\n\t\t\t* Optimize your code\n\t\t\t* Execute your code\n\t\t* For instance, creating an *implicit global variable at runtime is slower than creating it it at compile time*\n\t\t\t* Which will in turn slow down the execution of your code\n\t* `'use strict'` is file based\n\t\t* So even if a 3rd party library doesn't use it, you can use it\n\t\t* **babel** adds it for you\n</article>\n\n<article id=\"2\">\n\n## Block Scope\n\n> Block scopes have curly braces\n\n* Kyle Simpson recommends using `var` most of the time, then `let`, then `const`\n  * He doesn't use `const` to declare functions only uses `const` for immutable objects\n\n* **const** implies a constant\n  * means it never is *reassigned*\n  * the problem of using const is that it confuses readers because a lot of people still think that a \"constant\" doesn't change\n\n```javascript\nfunction diff(x,y) {\n  if (x > y) {\n    let tmp = x \n    x = y\n    y = tmp\n  }\n\n  return y - x\n}\n```\n\n* **Let** is blocked scoped to `if`\n  * If you try to access `tmp` outside of the **if block** you will get a *reference error*\n\n* `let` is always better used in a `for loop`\n* `let` cannot be redeclared but `var` can be redeclared\n\n```javascript\nfunction repeat(fn, n) {\n  var result;\n\n  for (let i = 0; i < n; i ++) {\n    result = fn( result, i)\n  }\n\n  return result\n}\n\n```\n\n* `var` is better used when you want to stylistically signal to the reader that `result` in this case is going to be used throughout the function\n\n```javascript\nfunction lookupRecord(searchStr) {\n  try {\n    var id = getRecord(searchStr)\n  }\n  catch (err) {\n    var id = -1\n  }\n\n  return id\n}\n```\n\n* By using `var` here you escape the block scope and can reference the variable\n\n</article>\n\n\n<article id=\"3\">\n\n## Function Scoping\n\n```javascript\nvar foo = 'foo'\n\nfunction bob(0 {\n  var foo = 'foo2'\n  console.log(foo) // 'foo2'\n})\nbob()\n\nconsole.log(foo) // 'foo' phew!\n```\n\n</article>\n\n\n<article id=\"4\">\n\n## IIFE (immediately invoked function expression) Pattern\n\n> If you don't want to pollute the name space, but you want to **create scope and you only want your function to run once**, the IIFE pattern is helpful\n\n* This is similar to **block scoping**\n\n```javascript\nvar foo = 'foo'\n\n(function IIFE(bar) {\n  var foo = 'foo2'\n  console.log(foo) // 'foo2'\n})(foo)\n\nconsole.log(foo) // 'foo'\n```\n\n</article>\n\n<article id=\"5\">\n\n## Hoisting\n\n> This is a made up concept which doesn't exist...it's a convenient metaphor\n\n* This is simply a easy way to think about how lexical scope is working in the 2 pass system\n\t* When assignments occur (which is executable code belonging to the 2nd pass) it doesn't get \"hoisted\" to the top of the scope\n\t\t* *IE: function declarations are hoisted but function expressions are not*\n\t* `let` and `const` are **not initialized** at the top of their scope but rather are intialized at the line where they are used\n\t\t* This does not mean that they are not hoisted\n\t\t\t* Hoisting involves adding the variable to the enclosing lexical scope\n\t\t\t* Hoisting does not describe the **initialzation** step\n\t\t\t\t* `var` is hoisted and initialized whereas `let` and `const`\n\n* One benefit of hoisting is by using **function declarations**\n\t* You don't have to declare functions in order before they need to be consumed\n\t\t* It takes longer to scroll down to the bottom of the file to figure out what the program is actually doing\n\t\t* You can order your functions logically\n\t\t* Or you can order them alphabetically\n\t* You can do mutual recursion\n\t\t* This is when one function recursively calls another function which calls another recursively\n\t\t* Mutual recursion is impossible without function declarations\n\n</article>\n\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/scope.md",
      "fields": {
        "slug": "/javascript-scope/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/typescript.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/typescript.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/typescript.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"Typescript\"\ndescription: \"Typescript Fundamentals based on https://github.com/mike-works/typescript-fundamentals\"\nauthor: Jay Gatsby\nweight: 7\n---\n\n\n\n<article id=\"1\">\n\n## Primitives\n\n1. null\n2. undefined\n3. boolean\n4. number\n5. string\n6. symbol\n\n* Every thing else extends from Objects\n* Primitives are immutable\n\n### Auto-Boxing\n\n* When primitives are wrapped in identically-named Objects\n\t* `new Boolean(true)` actually creates an object\n\t* auto boxing like this is almost always a mistake\n\n### Why Add Types\n\n* move common errors to **compile** time from **runtime**\n* great docs for fellow devs\n* clever abstractions are safer to use\n* JS does some unintuitive things like converting primitive types\n* Modern JS runtimes are written in typed langs like C++\n\t* As soon as you break types you get out of \"Hot mode\"\n\n</article>\n\n<article id=\"2\">\n\n## Typing\n\n* Important note: Typescript provides out of the box for core JS functionality & the DOM api\n\n### Implicit\n\n* Typescript is good at guessing\n\n```javascript\nlet teacherAge = 43\nteacherAge = '5' // Error\n```\n\n### Explicit\n\n#### Annotations\n\n```javascript\nlet teacherAge: number = 34;\n```\n\n#### Casting\n\n```javascript\nlet input = document.querySelector('input#name_field') as HTMLInputElement;\n```\n\n#### Function Params & Return\n\n```javascript\nfunction login(username: string, password: string): User {\n}\n\nconst login = (username: string, password: string): User => {\n}\n```\n\n#### The Any Type\n\n* This is essentially the JS world with TS\n* allows for a value of any kind\n* useful to migrate code from JS to TS\n* The goal is to get to using actual types instead of any\n* Start with making all anys explicit, and then squash as many as possible\n\n#### Never Type\n\n* something that you would want in unreachable sections of code\n* compile time equivalent of a throw\n* it's for scenarios you are trying to avoid\n* `let hi: never = 'hello'` //error\n\n</article>\n\n<article id=\"2\">\n\n## Object Shapes\n\n```javascript\nlet myCar: { make: string, model: string, year: number };\n\nmyCar = {\n\tmake: 'Honda',\n\tmodel: 'Accord',\n\tyear: 1992\n};\n```\n\n### Interfaces\n\n* Solve the problem of manually defining the shape of each new object which can get very verbose\n* Same as **Java Interfaces** & C abstract classes\n* They don't transpile to any JS they are for the TS compiler only\n* Only describe structure\n* DRY type definition allows for easy refactoring later\n* Can be **extended**\n\n```javascript\ninterface Car {\n\tmake: string;\n\tmodel: string;\n\tyear: number;\n};\n\nlet myCar: Car = { make: 'Honda', model: 'Accord', year: 1992};\nlet lisasCar: Car = { make: 'Ford', model: 'Monster Truck', year: 2016};\n```\n\n</article>\n\n",
        "type": "MarkdownRemark",
        "contentDigest": "a915c9fc0721f28886724355a26b3810",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Typescript",
        "description": "Typescript Fundamentals based on https://github.com/mike-works/typescript-fundamentals",
        "author": "Jay Gatsby",
        "weight": 7,
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/typescript.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/typescript.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\n\n\n<article id=\"1\">\n\n## Primitives\n\n1. null\n2. undefined\n3. boolean\n4. number\n5. string\n6. symbol\n\n* Every thing else extends from Objects\n* Primitives are immutable\n\n### Auto-Boxing\n\n* When primitives are wrapped in identically-named Objects\n\t* `new Boolean(true)` actually creates an object\n\t* auto boxing like this is almost always a mistake\n\n### Why Add Types\n\n* move common errors to **compile** time from **runtime**\n* great docs for fellow devs\n* clever abstractions are safer to use\n* JS does some unintuitive things like converting primitive types\n* Modern JS runtimes are written in typed langs like C++\n\t* As soon as you break types you get out of \"Hot mode\"\n\n</article>\n\n<article id=\"2\">\n\n## Typing\n\n* Important note: Typescript provides out of the box for core JS functionality & the DOM api\n\n### Implicit\n\n* Typescript is good at guessing\n\n```javascript\nlet teacherAge = 43\nteacherAge = '5' // Error\n```\n\n### Explicit\n\n#### Annotations\n\n```javascript\nlet teacherAge: number = 34;\n```\n\n#### Casting\n\n```javascript\nlet input = document.querySelector('input#name_field') as HTMLInputElement;\n```\n\n#### Function Params & Return\n\n```javascript\nfunction login(username: string, password: string): User {\n}\n\nconst login = (username: string, password: string): User => {\n}\n```\n\n#### The Any Type\n\n* This is essentially the JS world with TS\n* allows for a value of any kind\n* useful to migrate code from JS to TS\n* The goal is to get to using actual types instead of any\n* Start with making all anys explicit, and then squash as many as possible\n\n#### Never Type\n\n* something that you would want in unreachable sections of code\n* compile time equivalent of a throw\n* it's for scenarios you are trying to avoid\n* `let hi: never = 'hello'` //error\n\n</article>\n\n<article id=\"2\">\n\n## Object Shapes\n\n```javascript\nlet myCar: { make: string, model: string, year: number };\n\nmyCar = {\n\tmake: 'Honda',\n\tmodel: 'Accord',\n\tyear: 1992\n};\n```\n\n### Interfaces\n\n* Solve the problem of manually defining the shape of each new object which can get very verbose\n* Same as **Java Interfaces** & C abstract classes\n* They don't transpile to any JS they are for the TS compiler only\n* Only describe structure\n* DRY type definition allows for easy refactoring later\n* Can be **extended**\n\n```javascript\ninterface Car {\n\tmake: string;\n\tmodel: string;\n\tyear: number;\n};\n\nlet myCar: Car = { make: 'Honda', model: 'Accord', year: 1992};\nlet lisasCar: Car = { make: 'Ford', model: 'Monster Truck', year: 2016};\n```\n\n</article>\n\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/typescript.md",
      "fields": {
        "slug": "/javascript-typescript/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/examples/example---custom-separator/index.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/examples/example---custom-separator/index.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/examples/example---custom-separator/index.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"Getting an Excerpt with a Separator\"\ndraft: false\nexample: true\nauthor: Daisy Buchanan\n---\n\nThis example uses a custom excerpt_separator.\n\nYou can manually mark in your markdown where to stop excerpting—similar to Jekyll. <!-- end -->`gatsby-transformer-remark` uses [gray-matter](https://github.com/jonschlinkert/gray-matter) to parse markdown frontmatter, so you can specify an `excerpt_separator`, as well as any of the other options mentioned [here](https://github.com/jonschlinkert/gray-matter#options), in the `gatsby-config.js` file.\n\n```json\n{\n  resolve: `gatsby-transformer-remark`,\n  options: {\n    excerpt_separator: `<!-- end -->`\n  }\n}\n```\n\nAny file that does not have the given `excerpt_separator` will fall back to the default pruning method.\n",
        "type": "MarkdownRemark",
        "contentDigest": "aee6d3a135fcadc4884dcd1ed47c077f",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "Getting an Excerpt with a Separator",
        "draft": false,
        "example": true,
        "author": "Daisy Buchanan",
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/examples/example---custom-separator/index.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/examples/example---custom-separator/index.md absPath of file"
      },
      "excerpt": "\nThis example uses a custom excerpt_separator.\n\nYou can manually mark in your markdown where to stop excerpting—similar to Jekyll. ",
      "rawMarkdownBody": "\nThis example uses a custom excerpt_separator.\n\nYou can manually mark in your markdown where to stop excerpting—similar to Jekyll. <!-- end -->`gatsby-transformer-remark` uses [gray-matter](https://github.com/jonschlinkert/gray-matter) to parse markdown frontmatter, so you can specify an `excerpt_separator`, as well as any of the other options mentioned [here](https://github.com/jonschlinkert/gray-matter#options), in the `gatsby-config.js` file.\n\n```json\n{\n  resolve: `gatsby-transformer-remark`,\n  options: {\n    excerpt_separator: `<!-- end -->`\n  }\n}\n```\n\nAny file that does not have the given `excerpt_separator` will fall back to the default pruning method.\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/examples/example---custom-separator/index.md",
      "fields": {
        "slug": "/example---custom-separator/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/examples/example---no-separator/index.md absPath of file >>> MarkdownRemark": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/examples/example---no-separator/index.md absPath of file >>> MarkdownRemark",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/examples/example---no-separator/index.md absPath of file",
      "internal": {
        "content": "---\ntitle: \"A Default, 140 Character Excerpt\"\ndraft: false\nexample: true\nauthor: Daisy Buchanan\n---\n\nThis example uses the default pruning method.\n\n`gatsby-transformer-remark` allows you to get an excerpt from a markdown post. By default, it will prune the first 140 characters, but you can optionally specify a `pruneLength` in the graphql query.\n\n```graphql\n{\n  allMarkdownRemark {\n    edges {\n      node {\n        excerpt(pruneLength: 280)\n      }\n    }\n  }\n}\n```\n",
        "type": "MarkdownRemark",
        "contentDigest": "6564e8d56f4d0a849a3522d6de280dbc",
        "owner": "gatsby-transformer-remark",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "frontmatter": {
        "title": "A Default, 140 Character Excerpt",
        "draft": false,
        "example": true,
        "author": "Daisy Buchanan",
        "_PARENT": "/home/ryan/dev/notes/gatsby/src/pages/examples/example---no-separator/index.md absPath of file",
        "parent": "/home/ryan/dev/notes/gatsby/src/pages/examples/example---no-separator/index.md absPath of file"
      },
      "excerpt": "",
      "rawMarkdownBody": "\nThis example uses the default pruning method.\n\n`gatsby-transformer-remark` allows you to get an excerpt from a markdown post. By default, it will prune the first 140 characters, but you can optionally specify a `pruneLength` in the graphql query.\n\n```graphql\n{\n  allMarkdownRemark {\n    edges {\n      node {\n        excerpt(pruneLength: 280)\n      }\n    }\n  }\n}\n```\n",
      "fileAbsolutePath": "/home/ryan/dev/notes/gatsby/src/pages/examples/example---no-separator/index.md",
      "fields": {
        "slug": "/example---no-separator/"
      }
    },
    "Daisy Buchanan": {
      "id": "Daisy Buchanan",
      "avatar": "avatars/daisy.jpg",
      "bio": "is an attractive, if shallow and self-absorbed, young woman.",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/author.yaml absPath of file",
      "internal": {
        "contentDigest": "2135287ec2c4706725186c0970f45fb0",
        "type": "AuthorYaml",
        "owner": "gatsby-transformer-yaml"
      }
    },
    "Jay Gatsby": {
      "id": "Jay Gatsby",
      "avatar": "avatars/jay.jpg",
      "bio": "is a mysterious millionaire with shady business connections.",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/author.yaml absPath of file",
      "internal": {
        "contentDigest": "53f66bbda966651a9e6b2428313411b2",
        "type": "AuthorYaml",
        "owner": "gatsby-transformer-yaml"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2016-04-15---hello-world-kitchen-sink/joshua-earle-234740.jpg absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2016-04-15---hello-world-kitchen-sink/joshua-earle-234740.jpg absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/2016-04-15---hello-world-kitchen-sink/joshua-earle-234740.jpg absPath of file >> ImageSharp"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "833ce9f12b00f867785a53b0258ca6a3",
        "mediaType": "image/jpeg",
        "type": "File",
        "description": "File \"src/pages/2016-04-15---hello-world-kitchen-sink/joshua-earle-234740.jpg\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2016-04-15---hello-world-kitchen-sink/joshua-earle-234740.jpg",
      "relativePath": "2016-04-15---hello-world-kitchen-sink/joshua-earle-234740.jpg",
      "extension": "jpg",
      "size": 1108165,
      "prettySize": "1.11 MB",
      "modifiedTime": "2018-06-07T06:10:26.754Z",
      "accessTime": "2018-06-07T06:13:53.877Z",
      "changeTime": "2018-06-07T06:10:26.762Z",
      "birthTime": "2018-06-07T06:10:26.762Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/2016-04-15---hello-world-kitchen-sink",
      "base": "joshua-earle-234740.jpg",
      "ext": ".jpg",
      "name": "joshua-earle-234740",
      "relativeDirectory": "2016-04-15---hello-world-kitchen-sink",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12462742,
      "blocks": 2168,
      "atimeMs": 1528352033877.436,
      "mtimeMs": 1528351826753.8342,
      "ctimeMs": 1528351826761.834,
      "birthtimeMs": 1528351826761.834,
      "atime": "2018-06-07T06:13:53.877Z",
      "mtime": "2018-06-07T06:10:26.754Z",
      "ctime": "2018-06-07T06:10:26.762Z",
      "birthtime": "2018-06-07T06:10:26.762Z",
      "fields": {
        "slug": "/2016-04-15---hello-world-kitchen-sink-joshua-earle-234740/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2016-04-15---hello-world-kitchen-sink/joshua-earle-234740.jpg absPath of file >> ImageSharp": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2016-04-15---hello-world-kitchen-sink/joshua-earle-234740.jpg absPath of file >> ImageSharp",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/2016-04-15---hello-world-kitchen-sink/joshua-earle-234740.jpg absPath of file",
      "internal": {
        "contentDigest": "833ce9f12b00f867785a53b0258ca6a3",
        "type": "ImageSharp",
        "owner": "gatsby-transformer-sharp"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-04-04---code-and-syntax-highlighting/jeremy-bishop-262119.jpg absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-04-04---code-and-syntax-highlighting/jeremy-bishop-262119.jpg absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/2017-04-04---code-and-syntax-highlighting/jeremy-bishop-262119.jpg absPath of file >> ImageSharp"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "0128c0a4ce2195d2b4e1b472e4eebcfe",
        "mediaType": "image/jpeg",
        "type": "File",
        "description": "File \"src/pages/2017-04-04---code-and-syntax-highlighting/jeremy-bishop-262119.jpg\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-04-04---code-and-syntax-highlighting/jeremy-bishop-262119.jpg",
      "relativePath": "2017-04-04---code-and-syntax-highlighting/jeremy-bishop-262119.jpg",
      "extension": "jpg",
      "size": 1499132,
      "prettySize": "1.5 MB",
      "modifiedTime": "2018-06-07T06:10:32.422Z",
      "accessTime": "2018-06-07T06:13:55.921Z",
      "changeTime": "2018-06-07T06:10:32.434Z",
      "birthTime": "2018-06-07T06:10:32.434Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/2017-04-04---code-and-syntax-highlighting",
      "base": "jeremy-bishop-262119.jpg",
      "ext": ".jpg",
      "name": "jeremy-bishop-262119",
      "relativeDirectory": "2017-04-04---code-and-syntax-highlighting",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12597089,
      "blocks": 2928,
      "atimeMs": 1528352035921.4329,
      "mtimeMs": 1528351832421.8213,
      "ctimeMs": 1528351832433.8213,
      "birthtimeMs": 1528351832433.8213,
      "atime": "2018-06-07T06:13:55.921Z",
      "mtime": "2018-06-07T06:10:32.422Z",
      "ctime": "2018-06-07T06:10:32.434Z",
      "birthtime": "2018-06-07T06:10:32.434Z",
      "fields": {
        "slug": "/2017-04-04---code-and-syntax-highlighting-jeremy-bishop-262119/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-04-04---code-and-syntax-highlighting/jeremy-bishop-262119.jpg absPath of file >> ImageSharp": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-04-04---code-and-syntax-highlighting/jeremy-bishop-262119.jpg absPath of file >> ImageSharp",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/2017-04-04---code-and-syntax-highlighting/jeremy-bishop-262119.jpg absPath of file",
      "internal": {
        "contentDigest": "0128c0a4ce2195d2b4e1b472e4eebcfe",
        "type": "ImageSharp",
        "owner": "gatsby-transformer-sharp"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/select2-logo.gif absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/select2-logo.gif absPath of file",
      "children": [],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "95d3428a7085411f7af33260c60cba07",
        "mediaType": "image/gif",
        "type": "File",
        "description": "File \"src/pages/2017-01-02---responsive-images-and-iframes/select2-logo.gif\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/select2-logo.gif",
      "relativePath": "2017-01-02---responsive-images-and-iframes/select2-logo.gif",
      "extension": "gif",
      "size": 2504647,
      "prettySize": "2.5 MB",
      "modifiedTime": "2018-06-07T06:10:30.354Z",
      "accessTime": "2018-06-07T06:13:54.981Z",
      "changeTime": "2018-06-07T06:10:30.386Z",
      "birthTime": "2018-06-07T06:10:30.386Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes",
      "base": "select2-logo.gif",
      "ext": ".gif",
      "name": "select2-logo",
      "relativeDirectory": "2017-01-02---responsive-images-and-iframes",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12597081,
      "blocks": 4896,
      "atimeMs": 1528352034981.4343,
      "mtimeMs": 1528351830353.826,
      "ctimeMs": 1528351830385.826,
      "birthtimeMs": 1528351830385.826,
      "atime": "2018-06-07T06:13:54.981Z",
      "mtime": "2018-06-07T06:10:30.354Z",
      "ctime": "2018-06-07T06:10:30.386Z",
      "birthtime": "2018-06-07T06:10:30.386Z",
      "fields": {
        "slug": "/2017-01-02---responsive-images-and-iframes-select2-logo/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/max-boettinger-109436.jpg absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/max-boettinger-109436.jpg absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/max-boettinger-109436.jpg absPath of file >> ImageSharp"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "bbd8d1cf389bd9f85b6c705f8c07c650",
        "mediaType": "image/jpeg",
        "type": "File",
        "description": "File \"src/pages/2017-01-02---responsive-images-and-iframes/max-boettinger-109436.jpg\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/max-boettinger-109436.jpg",
      "relativePath": "2017-01-02---responsive-images-and-iframes/max-boettinger-109436.jpg",
      "extension": "jpg",
      "size": 3439919,
      "prettySize": "3.44 MB",
      "modifiedTime": "2018-06-07T06:10:27.194Z",
      "accessTime": "2018-06-07T06:13:54.001Z",
      "changeTime": "2018-06-07T06:10:27.194Z",
      "birthTime": "2018-06-07T06:10:27.194Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes",
      "base": "max-boettinger-109436.jpg",
      "ext": ".jpg",
      "name": "max-boettinger-109436",
      "relativeDirectory": "2017-01-02---responsive-images-and-iframes",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12597078,
      "blocks": 6720,
      "atimeMs": 1528352034001.436,
      "mtimeMs": 1528351827193.833,
      "ctimeMs": 1528351827193.833,
      "birthtimeMs": 1528351827193.833,
      "atime": "2018-06-07T06:13:54.001Z",
      "mtime": "2018-06-07T06:10:27.194Z",
      "ctime": "2018-06-07T06:10:27.194Z",
      "birthtime": "2018-06-07T06:10:27.194Z",
      "fields": {
        "slug": "/2017-01-02---responsive-images-and-iframes-max-boettinger-109436/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/max-boettinger-109436.jpg absPath of file >> ImageSharp": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/max-boettinger-109436.jpg absPath of file >> ImageSharp",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/max-boettinger-109436.jpg absPath of file",
      "internal": {
        "contentDigest": "bbd8d1cf389bd9f85b6c705f8c07c650",
        "type": "ImageSharp",
        "owner": "gatsby-transformer-sharp"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/max-boettinger-288448.jpg absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/max-boettinger-288448.jpg absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/max-boettinger-288448.jpg absPath of file >> ImageSharp"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "e8a1d341d967d20d1bdff3705cf3cd0d",
        "mediaType": "image/jpeg",
        "type": "File",
        "description": "File \"src/pages/2017-01-02---responsive-images-and-iframes/max-boettinger-288448.jpg\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/max-boettinger-288448.jpg",
      "relativePath": "2017-01-02---responsive-images-and-iframes/max-boettinger-288448.jpg",
      "extension": "jpg",
      "size": 4118281,
      "prettySize": "4.12 MB",
      "modifiedTime": "2018-06-07T06:10:27.542Z",
      "accessTime": "2018-06-07T06:13:54.289Z",
      "changeTime": "2018-06-07T06:10:27.546Z",
      "birthTime": "2018-06-07T06:10:27.546Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes",
      "base": "max-boettinger-288448.jpg",
      "ext": ".jpg",
      "name": "max-boettinger-288448",
      "relativeDirectory": "2017-01-02---responsive-images-and-iframes",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12597079,
      "blocks": 8048,
      "atimeMs": 1528352034289.4355,
      "mtimeMs": 1528351827541.8323,
      "ctimeMs": 1528351827545.8323,
      "birthtimeMs": 1528351827545.8323,
      "atime": "2018-06-07T06:13:54.289Z",
      "mtime": "2018-06-07T06:10:27.542Z",
      "ctime": "2018-06-07T06:10:27.546Z",
      "birthtime": "2018-06-07T06:10:27.546Z",
      "fields": {
        "slug": "/2017-01-02---responsive-images-and-iframes-max-boettinger-288448/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/max-boettinger-288448.jpg absPath of file >> ImageSharp": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/max-boettinger-288448.jpg absPath of file >> ImageSharp",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/max-boettinger-288448.jpg absPath of file",
      "internal": {
        "contentDigest": "e8a1d341d967d20d1bdff3705cf3cd0d",
        "type": "ImageSharp",
        "owner": "gatsby-transformer-sharp"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/mikael-cho-214358.jpg absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/mikael-cho-214358.jpg absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/mikael-cho-214358.jpg absPath of file >> ImageSharp"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "c2b0ceb3f755dde19b555e98a2f3fa27",
        "mediaType": "image/jpeg",
        "type": "File",
        "description": "File \"src/pages/2017-01-02---responsive-images-and-iframes/mikael-cho-214358.jpg\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/mikael-cho-214358.jpg",
      "relativePath": "2017-01-02---responsive-images-and-iframes/mikael-cho-214358.jpg",
      "extension": "jpg",
      "size": 4400317,
      "prettySize": "4.4 MB",
      "modifiedTime": "2018-06-07T06:10:27.922Z",
      "accessTime": "2018-06-07T06:13:54.597Z",
      "changeTime": "2018-06-07T06:10:27.922Z",
      "birthTime": "2018-06-07T06:10:27.922Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes",
      "base": "mikael-cho-214358.jpg",
      "ext": ".jpg",
      "name": "mikael-cho-214358",
      "relativeDirectory": "2017-01-02---responsive-images-and-iframes",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12597080,
      "blocks": 8600,
      "atimeMs": 1528352034597.435,
      "mtimeMs": 1528351827921.8315,
      "ctimeMs": 1528351827921.8315,
      "birthtimeMs": 1528351827921.8315,
      "atime": "2018-06-07T06:13:54.597Z",
      "mtime": "2018-06-07T06:10:27.922Z",
      "ctime": "2018-06-07T06:10:27.922Z",
      "birthtime": "2018-06-07T06:10:27.922Z",
      "fields": {
        "slug": "/2017-01-02---responsive-images-and-iframes-mikael-cho-214358/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/mikael-cho-214358.jpg absPath of file >> ImageSharp": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/mikael-cho-214358.jpg absPath of file >> ImageSharp",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/mikael-cho-214358.jpg absPath of file",
      "internal": {
        "contentDigest": "c2b0ceb3f755dde19b555e98a2f3fa27",
        "type": "ImageSharp",
        "owner": "gatsby-transformer-sharp"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links/denys-nevozhai-184452.jpg absPath of file": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links/denys-nevozhai-184452.jpg absPath of file",
      "children": [
        "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links/denys-nevozhai-184452.jpg absPath of file >> ImageSharp"
      ],
      "parent": "___SOURCE___",
      "internal": {
        "contentDigest": "3b13b4b9e1dddff72799e34c130e4bb8",
        "mediaType": "image/jpeg",
        "type": "File",
        "description": "File \"src/pages/2017-03-21---copy-linked-files-intercepting-local-links/denys-nevozhai-184452.jpg\"",
        "owner": "gatsby-source-filesystem",
        "fieldOwners": {
          "slug": "default-site-plugin"
        }
      },
      "sourceInstanceName": "pages",
      "absolutePath": "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links/denys-nevozhai-184452.jpg",
      "relativePath": "2017-03-21---copy-linked-files-intercepting-local-links/denys-nevozhai-184452.jpg",
      "extension": "jpg",
      "size": 7493438,
      "prettySize": "7.49 MB",
      "modifiedTime": "2018-06-07T06:10:32.266Z",
      "accessTime": "2018-06-07T06:13:55.185Z",
      "changeTime": "2018-06-07T06:10:32.274Z",
      "birthTime": "2018-06-07T06:10:32.274Z",
      "root": "/",
      "dir": "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links",
      "base": "denys-nevozhai-184452.jpg",
      "ext": ".jpg",
      "name": "denys-nevozhai-184452",
      "relativeDirectory": "2017-03-21---copy-linked-files-intercepting-local-links",
      "dev": 64769,
      "mode": 33188,
      "nlink": 1,
      "uid": 1000,
      "gid": 1000,
      "rdev": 0,
      "blksize": 4096,
      "ino": 12597085,
      "blocks": 14640,
      "atimeMs": 1528352035185.434,
      "mtimeMs": 1528351832265.8215,
      "ctimeMs": 1528351832273.8215,
      "birthtimeMs": 1528351832273.8215,
      "atime": "2018-06-07T06:13:55.185Z",
      "mtime": "2018-06-07T06:10:32.266Z",
      "ctime": "2018-06-07T06:10:32.274Z",
      "birthtime": "2018-06-07T06:10:32.274Z",
      "fields": {
        "slug": "/2017-03-21---copy-linked-files-intercepting-local-links-denys-nevozhai-184452/"
      }
    },
    "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links/denys-nevozhai-184452.jpg absPath of file >> ImageSharp": {
      "id": "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links/denys-nevozhai-184452.jpg absPath of file >> ImageSharp",
      "children": [],
      "parent": "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links/denys-nevozhai-184452.jpg absPath of file",
      "internal": {
        "contentDigest": "3b13b4b9e1dddff72799e34c130e4bb8",
        "type": "ImageSharp",
        "owner": "gatsby-transformer-sharp"
      }
    },
    "SitePage /2016-04-15---hello-world-kitchen-sink/": {
      "layout": "index",
      "jsonName": "2016-04-15-hello-world-kitchen-sink.json",
      "internalComponentName": "Component20160415HelloWorldKitchenSink",
      "path": "/2016-04-15---hello-world-kitchen-sink/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/2016-04-15---hello-world-kitchen-sink/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /2016-04-15---hello-world-kitchen-sink/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "7b4998deb7901dea128e2a51f78a0c40",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /2017-03-21---copy-linked-files-intercepting-local-links/": {
      "layout": "index",
      "jsonName": "2017-03-21-copy-linked-files-intercepting-local-links.json",
      "internalComponentName": "Component20170321CopyLinkedFilesInterceptingLocalLinks",
      "path": "/2017-03-21---copy-linked-files-intercepting-local-links/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/2017-03-21---copy-linked-files-intercepting-local-links/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /2017-03-21---copy-linked-files-intercepting-local-links/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "29aeebcb959d15b145d2e528a042b2fa",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /2017-08-07---katex/": {
      "layout": "index",
      "jsonName": "2017-08-07-katex.json",
      "internalComponentName": "Component20170807Katex",
      "path": "/2017-08-07---katex/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/2017-08-07---katex/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /2017-08-07---katex/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "8479cbef66f7c669206f1ca686f9b7f8",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /2017-01-02---responsive-images-and-iframes/": {
      "layout": "index",
      "jsonName": "2017-01-02-responsive-images-and-iframes.json",
      "internalComponentName": "Component20170102ResponsiveImagesAndIframes",
      "path": "/2017-01-02---responsive-images-and-iframes/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/2017-01-02---responsive-images-and-iframes/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /2017-01-02---responsive-images-and-iframes/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "8418f9dfa26c7625675edf3612fdac84",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /2017-04-04---code-and-syntax-highlighting/": {
      "layout": "index",
      "jsonName": "2017-04-04-code-and-syntax-highlighting.json",
      "internalComponentName": "Component20170404CodeAndSyntaxHighlighting",
      "path": "/2017-04-04---code-and-syntax-highlighting/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/2017-04-04---code-and-syntax-highlighting/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /2017-04-04---code-and-syntax-highlighting/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "7fb1ed8ca4e40f9266c4035636d7fb2c",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /2017-11-14---excerpts/": {
      "layout": "index",
      "jsonName": "2017-11-14-excerpts.json",
      "internalComponentName": "Component20171114Excerpts",
      "path": "/2017-11-14---excerpts/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/2017-11-14---excerpts/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /2017-11-14---excerpts/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "af13f3813e306ecb145c7a6e325d35c2",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /2018-01-27---custom-components/": {
      "layout": "index",
      "jsonName": "2018-01-27-custom-components.json",
      "internalComponentName": "Component20180127CustomComponents",
      "path": "/2018-01-27---custom-components/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/2018-01-27---custom-components/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /2018-01-27---custom-components/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "3a70695e12456279ba1af879366dd455",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /algos-data-structures/": {
      "layout": "index",
      "jsonName": "algos-data-structures.json",
      "internalComponentName": "ComponentAlgosDataStructures",
      "path": "/algos-data-structures/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/algos-data-structures/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /algos-data-structures/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "7b1d34e62d0bf90397dcee1a0e706817",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /algos/": {
      "layout": "index",
      "jsonName": "algos.json",
      "internalComponentName": "ComponentAlgos",
      "path": "/algos/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/algos/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /algos/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "d4320b623f29d2e0173e26f00333eee1",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /devops/": {
      "layout": "index",
      "jsonName": "devops.json",
      "internalComponentName": "ComponentDevops",
      "path": "/devops/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/devops/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /devops/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "be5234efd7475268f5cf5f9f42465209",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /dbs/": {
      "layout": "index",
      "jsonName": "dbs.json",
      "internalComponentName": "ComponentDbs",
      "path": "/dbs/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/dbs/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /dbs/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "068fb81abc9729a5c28fcb821ec77983",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /liferay-component/": {
      "layout": "index",
      "jsonName": "liferay-component.json",
      "internalComponentName": "ComponentLiferayComponent",
      "path": "/liferay-component/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/liferay-component/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /liferay-component/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "eec1777cd5a931cc11102227b529a87f",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /liferay-front-end/": {
      "layout": "index",
      "jsonName": "liferay-front-end.json",
      "internalComponentName": "ComponentLiferayFrontEnd",
      "path": "/liferay-front-end/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/liferay-front-end/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /liferay-front-end/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "eb3847f119ee79690b3556bfc222746b",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /liferay/": {
      "layout": "index",
      "jsonName": "liferay.json",
      "internalComponentName": "ComponentLiferay",
      "path": "/liferay/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/liferay/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /liferay/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "c926bf27141bcc4c907b5482284a3071",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /liferay-mysql/": {
      "layout": "index",
      "jsonName": "liferay-mysql.json",
      "internalComponentName": "ComponentLiferayMysql",
      "path": "/liferay-mysql/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/liferay-mysql/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /liferay-mysql/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "3e47f54723b2dbecd1ceb1b9cc686566",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /liferay-templates/": {
      "layout": "index",
      "jsonName": "liferay-templates.json",
      "internalComponentName": "ComponentLiferayTemplates",
      "path": "/liferay-templates/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/liferay-templates/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /liferay-templates/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "e729432bbe5cdcd892044b0555d32e8f",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /linux-actions/": {
      "layout": "index",
      "jsonName": "linux-actions.json",
      "internalComponentName": "ComponentLinuxActions",
      "path": "/linux-actions/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/linux-actions/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /linux-actions/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "f61f857fc77415b086e4c0bc0e9319e4",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /linux/": {
      "layout": "index",
      "jsonName": "linux.json",
      "internalComponentName": "ComponentLinux",
      "path": "/linux/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/linux/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /linux/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "c695a72cc8f3497b312fbce03668b9eb",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /security/": {
      "layout": "index",
      "jsonName": "security.json",
      "internalComponentName": "ComponentSecurity",
      "path": "/security/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/security/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /security/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "ce061776164ca7dea29a3fc01033c4db",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /javascript-async/": {
      "layout": "index",
      "jsonName": "javascript-async.json",
      "internalComponentName": "ComponentJavascriptAsync",
      "path": "/javascript-async/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/javascript-async/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /javascript-async/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "03aaa3170c8dad5d832399c56f862005",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /javascript-functional/": {
      "layout": "index",
      "jsonName": "javascript-functional.json",
      "internalComponentName": "ComponentJavascriptFunctional",
      "path": "/javascript-functional/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/javascript-functional/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /javascript-functional/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "eba40616fde12de03d249eb0e3ad9909",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /javascript/": {
      "layout": "index",
      "jsonName": "javascript.json",
      "internalComponentName": "ComponentJavascript",
      "path": "/javascript/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/javascript/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /javascript/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "b8c270a48623872eaf383b336f9dcc35",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /javascript-objectOriented/": {
      "layout": "index",
      "jsonName": "javascript-object-oriented.json",
      "internalComponentName": "ComponentJavascriptObjectOriented",
      "path": "/javascript-objectOriented/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/javascript-objectOriented/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /javascript-objectOriented/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "fd46e141e0ecfef0e795d4965d768aed",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /javascript-pro-tips/": {
      "layout": "index",
      "jsonName": "javascript-pro-tips.json",
      "internalComponentName": "ComponentJavascriptProTips",
      "path": "/javascript-pro-tips/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/javascript-pro-tips/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /javascript-pro-tips/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "f4e6d9e4c020ca3ef29b9ab38c70e21b",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /javascript-scope/": {
      "layout": "index",
      "jsonName": "javascript-scope.json",
      "internalComponentName": "ComponentJavascriptScope",
      "path": "/javascript-scope/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/javascript-scope/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /javascript-scope/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "e48dd17cf2227f2dbfb43597f06a109c",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /javascript-typescript/": {
      "layout": "index",
      "jsonName": "javascript-typescript.json",
      "internalComponentName": "ComponentJavascriptTypescript",
      "path": "/javascript-typescript/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/javascript-typescript/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /javascript-typescript/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "1ebc6709c8dae29362359b2277a6bd99",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /example---custom-separator/": {
      "layout": "index",
      "jsonName": "example-custom-separator.json",
      "internalComponentName": "ComponentExampleCustomSeparator",
      "path": "/example---custom-separator/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/example---custom-separator/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /example---custom-separator/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "e454986a7e1e1007e5a84b92d7d8c4ba",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /example---no-separator/": {
      "layout": "index",
      "jsonName": "example-no-separator.json",
      "internalComponentName": "ComponentExampleNoSeparator",
      "path": "/example---no-separator/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "componentChunkName": "component---src-templates-template-blog-post-js",
      "context": {
        "slug": "/example---no-separator/"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-blog-post.js",
      "id": "SitePage /example---no-separator/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "8a8fd6e358e2f23482003d39b0c88975",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /tags/remark/": {
      "layout": "index",
      "jsonName": "tags-remark.json",
      "internalComponentName": "ComponentTagsRemark",
      "path": "/tags/remark/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "componentChunkName": "component---src-templates-template-tag-page-js",
      "context": {
        "tag": "remark"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "id": "SitePage /tags/remark/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "b25b765925f0127bf95404a31a26b4c4",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /tags/kitchen-sink/": {
      "layout": "index",
      "jsonName": "tags-kitchen-sink.json",
      "internalComponentName": "ComponentTagsKitchenSink",
      "path": "/tags/kitchen-sink/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "componentChunkName": "component---src-templates-template-tag-page-js",
      "context": {
        "tag": "Kitchen Sink"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "id": "SitePage /tags/kitchen-sink/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "ab91be58135ebfa1b481eac0e9665f94",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /tags/images/": {
      "layout": "index",
      "jsonName": "tags-images.json",
      "internalComponentName": "ComponentTagsImages",
      "path": "/tags/images/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "componentChunkName": "component---src-templates-template-tag-page-js",
      "context": {
        "tag": "Images"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "id": "SitePage /tags/images/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "c6be00203a2592efecd9a3d99e1db753",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /tags/linked-files/": {
      "layout": "index",
      "jsonName": "tags-linked-files.json",
      "internalComponentName": "ComponentTagsLinkedFiles",
      "path": "/tags/linked-files/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "componentChunkName": "component---src-templates-template-tag-page-js",
      "context": {
        "tag": "linked files"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "id": "SitePage /tags/linked-files/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "262538140ca0dd932b42f0b2a0821ccd",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /tags/local-links/": {
      "layout": "index",
      "jsonName": "tags-local-links.json",
      "internalComponentName": "ComponentTagsLocalLinks",
      "path": "/tags/local-links/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "componentChunkName": "component---src-templates-template-tag-page-js",
      "context": {
        "tag": "local links"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "id": "SitePage /tags/local-links/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "72c6d503d97b5ac619bcb1cf11f0a601",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /tags/math/": {
      "layout": "index",
      "jsonName": "tags-math.json",
      "internalComponentName": "ComponentTagsMath",
      "path": "/tags/math/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "componentChunkName": "component---src-templates-template-tag-page-js",
      "context": {
        "tag": "math"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "id": "SitePage /tags/math/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "7583ec9f0de8064bf3992b94961cd4fd",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /tags/ka-te-x/": {
      "layout": "index",
      "jsonName": "tags-ka-te-x.json",
      "internalComponentName": "ComponentTagsKaTeX",
      "path": "/tags/ka-te-x/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "componentChunkName": "component---src-templates-template-tag-page-js",
      "context": {
        "tag": "KaTeX"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "id": "SitePage /tags/ka-te-x/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "1717fd5ae767910e81daa4c242458c79",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /tags/videos/": {
      "layout": "index",
      "jsonName": "tags-videos.json",
      "internalComponentName": "ComponentTagsVideos",
      "path": "/tags/videos/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "componentChunkName": "component---src-templates-template-tag-page-js",
      "context": {
        "tag": "Videos"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "id": "SitePage /tags/videos/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "801879d37d4626c1d5d583ff26035325",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /tags/i-frames/": {
      "layout": "index",
      "jsonName": "tags-i-frames.json",
      "internalComponentName": "ComponentTagsIFrames",
      "path": "/tags/i-frames/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "componentChunkName": "component---src-templates-template-tag-page-js",
      "context": {
        "tag": "iFrames"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "id": "SitePage /tags/i-frames/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "c2c113a3b8194beedb359cfaecb2b791",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /tags/code-highlighting/": {
      "layout": "index",
      "jsonName": "tags-code-highlighting.json",
      "internalComponentName": "ComponentTagsCodeHighlighting",
      "path": "/tags/code-highlighting/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "componentChunkName": "component---src-templates-template-tag-page-js",
      "context": {
        "tag": "Code Highlighting"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "id": "SitePage /tags/code-highlighting/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "7b187e4f82723fcd734d58d7b6455c4b",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /tags/excerpts/": {
      "layout": "index",
      "jsonName": "tags-excerpts.json",
      "internalComponentName": "ComponentTagsExcerpts",
      "path": "/tags/excerpts/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "componentChunkName": "component---src-templates-template-tag-page-js",
      "context": {
        "tag": "excerpts"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "id": "SitePage /tags/excerpts/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "26e176308f2fe3783b1ed4dd12059d07",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /tags/react/": {
      "layout": "index",
      "jsonName": "tags-react.json",
      "internalComponentName": "ComponentTagsReact",
      "path": "/tags/react/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "componentChunkName": "component---src-templates-template-tag-page-js",
      "context": {
        "tag": "React"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "id": "SitePage /tags/react/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "b108e0a80f3f17fd0c19bacfd3b4aecd",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /tags/components/": {
      "layout": "index",
      "jsonName": "tags-components.json",
      "internalComponentName": "ComponentTagsComponents",
      "path": "/tags/components/",
      "component": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "componentChunkName": "component---src-templates-template-tag-page-js",
      "context": {
        "tag": "components"
      },
      "pluginCreator___NODE": "Plugin default-site-plugin",
      "pluginCreatorId": "Plugin default-site-plugin",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/templates/template-tag-page.js",
      "id": "SitePage /tags/components/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "b4ffd044e7ac6398c5f51eb10eef4ac8",
        "description": "Your site's \"gatsby-node.js\"",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /excerpt-example/": {
      "layout": "index",
      "jsonName": "excerpt-example.json",
      "internalComponentName": "ComponentExcerptExample",
      "path": "/excerpt-example/",
      "component": "/home/ryan/dev/notes/gatsby/src/pages/excerpt-example.js",
      "componentChunkName": "component---src-pages-excerpt-example-js",
      "context": {},
      "pluginCreator___NODE": "Plugin component-page-creator",
      "pluginCreatorId": "Plugin component-page-creator",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/pages/excerpt-example.js",
      "id": "SitePage /excerpt-example/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "ef56f85591858c1fc6edbfc2b3971b5d",
        "description": "Plugin component-page-creator",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /": {
      "layout": "index",
      "jsonName": "index.json",
      "internalComponentName": "ComponentIndex",
      "path": "/",
      "component": "/home/ryan/dev/notes/gatsby/src/pages/index.js",
      "componentChunkName": "component---src-pages-index-js",
      "context": {},
      "pluginCreator___NODE": "Plugin component-page-creator",
      "pluginCreatorId": "Plugin component-page-creator",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/pages/index.js",
      "id": "SitePage /",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "2c412cf5f7b2102fb80cf8c60781cb20",
        "description": "Plugin component-page-creator",
        "owner": "internal-data-bridge"
      }
    },
    "SitePage /tags/": {
      "layout": "index",
      "jsonName": "tags.json",
      "internalComponentName": "ComponentTags",
      "path": "/tags/",
      "component": "/home/ryan/dev/notes/gatsby/src/pages/tags.js",
      "componentChunkName": "component---src-pages-tags-js",
      "context": {},
      "pluginCreator___NODE": "Plugin component-page-creator",
      "pluginCreatorId": "Plugin component-page-creator",
      "componentPath": "/home/ryan/dev/notes/gatsby/src/pages/tags.js",
      "id": "SitePage /tags/",
      "parent": "SOURCE",
      "children": [],
      "internal": {
        "type": "SitePage",
        "contentDigest": "da978b7eecf70fb87a7d4ce380e94578",
        "description": "Plugin component-page-creator",
        "owner": "internal-data-bridge"
      }
    }
  },
  "status": {
    "plugins": {},
    "PLUGINS_HASH": "89c64fe9c2afcbb771dca292f28a351a"
  },
  "componentDataDependencies": {
    "nodes": {
      "/home/ryan/dev/notes/gatsby/src/pages/2017-08-07---katex/index.md absPath of file >>> MarkdownRemark": [
        "/2017-08-07---katex/"
      ],
      "Daisy Buchanan": [
        "/2017-08-07---katex/",
        "/2017-03-21---copy-linked-files-intercepting-local-links/",
        "/2017-04-04---code-and-syntax-highlighting/",
        "/example---custom-separator/",
        "/example---no-separator/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/avatars/daisy.jpg absPath of file": [
        "/2017-08-07---katex/",
        "/2017-03-21---copy-linked-files-intercepting-local-links/",
        "/2017-04-04---code-and-syntax-highlighting/",
        "/example---custom-separator/",
        "/example---no-separator/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/avatars/daisy.jpg absPath of file >> ImageSharp": [
        "/2017-08-07---katex/",
        "/2017-03-21---copy-linked-files-intercepting-local-links/",
        "/2017-04-04---code-and-syntax-highlighting/",
        "/example---custom-separator/",
        "/example---no-separator/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/2017-03-21---copy-linked-files-intercepting-local-links/index.md absPath of file >>> MarkdownRemark": [
        "/2017-03-21---copy-linked-files-intercepting-local-links/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/2016-04-15---hello-world-kitchen-sink/index.md absPath of file >>> MarkdownRemark": [
        "/2016-04-15---hello-world-kitchen-sink/"
      ],
      "Jay Gatsby": [
        "/2016-04-15---hello-world-kitchen-sink/",
        "/2017-01-02---responsive-images-and-iframes/",
        "/2017-11-14---excerpts/",
        "/2018-01-27---custom-components/",
        "/algos-data-structures/",
        "/algos/",
        "/devops/",
        "/dbs/",
        "/liferay-component/",
        "/liferay-front-end/",
        "/liferay/",
        "/liferay-mysql/",
        "/liferay-templates/",
        "/linux-actions/",
        "/linux/",
        "/security/",
        "/javascript-async/",
        "/javascript-functional/",
        "/javascript/",
        "/javascript-objectOriented/",
        "/javascript-pro-tips/",
        "/javascript-scope/",
        "/javascript-typescript/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/avatars/jay.jpg absPath of file": [
        "/2016-04-15---hello-world-kitchen-sink/",
        "/2017-01-02---responsive-images-and-iframes/",
        "/2017-11-14---excerpts/",
        "/2018-01-27---custom-components/",
        "/algos-data-structures/",
        "/algos/",
        "/devops/",
        "/dbs/",
        "/liferay-component/",
        "/liferay-front-end/",
        "/liferay/",
        "/liferay-mysql/",
        "/liferay-templates/",
        "/linux-actions/",
        "/linux/",
        "/security/",
        "/javascript-async/",
        "/javascript-functional/",
        "/javascript/",
        "/javascript-objectOriented/",
        "/javascript-pro-tips/",
        "/javascript-scope/",
        "/javascript-typescript/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/avatars/jay.jpg absPath of file >> ImageSharp": [
        "/2016-04-15---hello-world-kitchen-sink/",
        "/2017-01-02---responsive-images-and-iframes/",
        "/2017-11-14---excerpts/",
        "/2018-01-27---custom-components/",
        "/algos-data-structures/",
        "/algos/",
        "/devops/",
        "/dbs/",
        "/liferay-component/",
        "/liferay-front-end/",
        "/liferay/",
        "/liferay-mysql/",
        "/liferay-templates/",
        "/linux-actions/",
        "/linux/",
        "/security/",
        "/javascript-async/",
        "/javascript-functional/",
        "/javascript/",
        "/javascript-objectOriented/",
        "/javascript-pro-tips/",
        "/javascript-scope/",
        "/javascript-typescript/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/2017-01-02---responsive-images-and-iframes/index.md absPath of file >>> MarkdownRemark": [
        "/2017-01-02---responsive-images-and-iframes/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/2017-04-04---code-and-syntax-highlighting/index.md absPath of file >>> MarkdownRemark": [
        "/2017-04-04---code-and-syntax-highlighting/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/2017-11-14---excerpts/index.md absPath of file >>> MarkdownRemark": [
        "/2017-11-14---excerpts/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/2018-01-27---custom-components/index.md absPath of file >>> MarkdownRemark": [
        "/2018-01-27---custom-components/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/Algos/data-structures.md absPath of file >>> MarkdownRemark": [
        "/algos-data-structures/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/Algos/index.md absPath of file >>> MarkdownRemark": [
        "/algos/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/DevOps/index.md absPath of file >>> MarkdownRemark": [
        "/devops/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/DBs/index.md absPath of file >>> MarkdownRemark": [
        "/dbs/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/Liferay/component.md absPath of file >>> MarkdownRemark": [
        "/liferay-component/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/Liferay/front-end.md absPath of file >>> MarkdownRemark": [
        "/liferay-front-end/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/Liferay/index.md absPath of file >>> MarkdownRemark": [
        "/liferay/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/Liferay/mysql.md absPath of file >>> MarkdownRemark": [
        "/liferay-mysql/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/Liferay/templates.md absPath of file >>> MarkdownRemark": [
        "/liferay-templates/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/Linux/actions.md absPath of file >>> MarkdownRemark": [
        "/linux-actions/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/Linux/index.md absPath of file >>> MarkdownRemark": [
        "/linux/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/Security/index.md absPath of file >>> MarkdownRemark": [
        "/security/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/async.md absPath of file >>> MarkdownRemark": [
        "/javascript-async/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/functional.md absPath of file >>> MarkdownRemark": [
        "/javascript-functional/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/index.md absPath of file >>> MarkdownRemark": [
        "/javascript/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/objectOriented.md absPath of file >>> MarkdownRemark": [
        "/javascript-objectOriented/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/pro-tips.md absPath of file >>> MarkdownRemark": [
        "/javascript-pro-tips/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/scope.md absPath of file >>> MarkdownRemark": [
        "/javascript-scope/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/JavaScript/typescript.md absPath of file >>> MarkdownRemark": [
        "/javascript-typescript/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/examples/example---custom-separator/index.md absPath of file >>> MarkdownRemark": [
        "/example---custom-separator/"
      ],
      "/home/ryan/dev/notes/gatsby/src/pages/examples/example---no-separator/index.md absPath of file >>> MarkdownRemark": [
        "/example---no-separator/"
      ],
      "Site": [
        "/tags/",
        "LAYOUT___index"
      ]
    },
    "connections": {
      "MarkdownRemark": [
        "/tags/remark/",
        "/tags/kitchen-sink/",
        "/tags/images/",
        "/tags/linked-files/",
        "/tags/local-links/",
        "/tags/math/",
        "/tags/ka-te-x/",
        "/tags/videos/",
        "/tags/i-frames/",
        "/tags/code-highlighting/",
        "/tags/excerpts/",
        "/tags/react/",
        "/tags/components/",
        "/excerpt-example/",
        "/",
        "/tags/"
      ],
      "SitePage": [
        "/dev-404-page/"
      ]
    }
  }
}